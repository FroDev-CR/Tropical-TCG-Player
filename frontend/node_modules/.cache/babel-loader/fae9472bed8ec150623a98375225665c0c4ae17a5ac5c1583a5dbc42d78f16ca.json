{"ast":null,"code":"var _jsxFileName = \"/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/TransactionContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/TransactionContext.js\n// Context específico para manejo de transacciones P2P - MIGRADO A BACKEND\n\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport backendAPI from '../services/backendAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionContext = /*#__PURE__*/createContext();\nexport function TransactionProvider({\n  children\n}) {\n  _s();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const [transactions, setTransactions] = useState([]);\n  const [buyerTransactions, setBuyerTransactions] = useState([]);\n  const [sellerTransactions, setSellerTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [unreadNotifications, setUnreadNotifications] = useState(0);\n\n  // Cargar transacciones cuando el usuario se autentica\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      fetchTransactions();\n    } else {\n      setTransactions([]);\n      setBuyerTransactions([]);\n      setSellerTransactions([]);\n      setUnreadNotifications(0);\n      setLoading(false);\n    }\n  }, [isAuthenticated, user]);\n  const fetchTransactions = async () => {\n    try {\n      setLoading(true);\n      const response = await backendAPI.getTransactions();\n      if (response.success) {\n        var _response$data;\n        const allTransactions = (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.transactions) || []).map(t => {\n          var _t$timeline;\n          return {\n            ...t,\n            id: t._id,\n            createdAt: new Date(((_t$timeline = t.timeline) === null || _t$timeline === void 0 ? void 0 : _t$timeline.created) || t.createdAt),\n            type: t.buyer.userId === user._id ? 'buyer' : 'seller'\n          };\n        });\n        const buyer = allTransactions.filter(t => t.type === 'buyer');\n        const seller = allTransactions.filter(t => t.type === 'seller');\n        setTransactions(allTransactions);\n        setBuyerTransactions(buyer);\n        setSellerTransactions(seller);\n\n        // TODO: Implementar conteo de notificaciones no leídas\n        setUnreadNotifications(0);\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n    }\n    setLoading(false);\n  };\n\n  // Función para crear una nueva transacción\n  const createTransaction = async transactionData => {\n    try {\n      const response = await backendAPI.createTransaction(transactionData);\n      if (response.success) {\n        await fetchTransactions(); // Refrescar la lista\n        return {\n          success: true,\n          transaction: response.transaction\n        };\n      } else {\n        return {\n          success: false,\n          error: response.message\n        };\n      }\n    } catch (error) {\n      console.error('Error creating transaction:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Función para aceptar una transacción (vendedor)\n  const acceptTransaction = async (transactionId, originStore) => {\n    try {\n      const response = await backendAPI.acceptTransaction(transactionId, originStore);\n      if (response.success) {\n        await fetchTransactions(); // Refrescar la lista\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: response.message\n        };\n      }\n    } catch (error) {\n      console.error('Error accepting transaction:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // TODO: Implementar más funciones de transacción según se necesiten\n  const rejectTransaction = async (transactionId, reason) => {\n    try {\n      // TODO: Implementar endpoint en backend\n      console.log('Reject transaction:', transactionId, reason);\n      return {\n        success: false,\n        error: 'Funcionalidad pendiente de implementar'\n      };\n    } catch (error) {\n      console.error('Error rejecting transaction:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const confirmDelivery = async (transactionId, proofData) => {\n    try {\n      // TODO: Implementar endpoint en backend\n      console.log('Confirm delivery:', transactionId, proofData);\n      return {\n        success: false,\n        error: 'Funcionalidad pendiente de implementar'\n      };\n    } catch (error) {\n      console.error('Error confirming delivery:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const confirmPayment = async (transactionId, proofData) => {\n    try {\n      // TODO: Implementar endpoint en backend\n      console.log('Confirm payment:', transactionId, proofData);\n      return {\n        success: false,\n        error: 'Funcionalidad pendiente de implementar'\n      };\n    } catch (error) {\n      console.error('Error confirming payment:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const addRating = async (transactionId, rating, comment) => {\n    try {\n      // TODO: Implementar endpoint en backend\n      console.log('Add rating:', transactionId, rating, comment);\n      return {\n        success: false,\n        error: 'Funcionalidad pendiente de implementar'\n      };\n    } catch (error) {\n      console.error('Error adding rating:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const value = {\n    // Estado\n    user,\n    transactions,\n    buyerTransactions,\n    sellerTransactions,\n    loading,\n    unreadNotifications,\n    // Funciones\n    fetchTransactions,\n    createTransaction,\n    acceptTransaction,\n    rejectTransaction,\n    confirmDelivery,\n    confirmPayment,\n    addRating,\n    // Utilidades\n    refreshTransactions: fetchTransactions\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n_s(TransactionProvider, \"OvW0duIX3wFEbAhplMdOh39U5/o=\", false, function () {\n  return [useAuth];\n});\n_c = TransactionProvider;\nexport function useTransactions() {\n  _s2();\n  const context = useContext(TransactionContext);\n  if (context === undefined) {\n    throw new Error('useTransactions must be used within a TransactionProvider');\n  }\n  return context;\n}\n_s2(useTransactions, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default TransactionContext;\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useAuth","backendAPI","jsxDEV","_jsxDEV","TransactionContext","TransactionProvider","children","_s","user","isAuthenticated","transactions","setTransactions","buyerTransactions","setBuyerTransactions","sellerTransactions","setSellerTransactions","loading","setLoading","unreadNotifications","setUnreadNotifications","fetchTransactions","response","getTransactions","success","_response$data","allTransactions","data","map","t","_t$timeline","id","_id","createdAt","Date","timeline","created","type","buyer","userId","filter","seller","error","console","createTransaction","transactionData","transaction","message","acceptTransaction","transactionId","originStore","rejectTransaction","reason","log","confirmDelivery","proofData","confirmPayment","addRating","rating","comment","value","refreshTransactions","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTransactions","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/TransactionContext.js"],"sourcesContent":["// src/contexts/TransactionContext.js\n// Context específico para manejo de transacciones P2P - MIGRADO A BACKEND\n\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport backendAPI from '../services/backendAPI';\n\nconst TransactionContext = createContext();\n\nexport function TransactionProvider({ children }) {\n  const { user, isAuthenticated } = useAuth();\n  const [transactions, setTransactions] = useState([]);\n  const [buyerTransactions, setBuyerTransactions] = useState([]);\n  const [sellerTransactions, setSellerTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [unreadNotifications, setUnreadNotifications] = useState(0);\n\n  // Cargar transacciones cuando el usuario se autentica\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      fetchTransactions();\n    } else {\n      setTransactions([]);\n      setBuyerTransactions([]);\n      setSellerTransactions([]);\n      setUnreadNotifications(0);\n      setLoading(false);\n    }\n  }, [isAuthenticated, user]);\n\n  const fetchTransactions = async () => {\n    try {\n      setLoading(true);\n      const response = await backendAPI.getTransactions();\n      \n      if (response.success) {\n        const allTransactions = (response.data?.transactions || []).map(t => ({\n          ...t,\n          id: t._id,\n          createdAt: new Date(t.timeline?.created || t.createdAt),\n          type: t.buyer.userId === user._id ? 'buyer' : 'seller'\n        }));\n        \n        const buyer = allTransactions.filter(t => t.type === 'buyer');\n        const seller = allTransactions.filter(t => t.type === 'seller');\n        \n        setTransactions(allTransactions);\n        setBuyerTransactions(buyer);\n        setSellerTransactions(seller);\n        \n        // TODO: Implementar conteo de notificaciones no leídas\n        setUnreadNotifications(0);\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n    }\n    setLoading(false);\n  };\n\n  // Función para crear una nueva transacción\n  const createTransaction = async (transactionData) => {\n    try {\n      const response = await backendAPI.createTransaction(transactionData);\n      \n      if (response.success) {\n        await fetchTransactions(); // Refrescar la lista\n        return { success: true, transaction: response.transaction };\n      } else {\n        return { success: false, error: response.message };\n      }\n    } catch (error) {\n      console.error('Error creating transaction:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Función para aceptar una transacción (vendedor)\n  const acceptTransaction = async (transactionId, originStore) => {\n    try {\n      const response = await backendAPI.acceptTransaction(transactionId, originStore);\n      \n      if (response.success) {\n        await fetchTransactions(); // Refrescar la lista\n        return { success: true };\n      } else {\n        return { success: false, error: response.message };\n      }\n    } catch (error) {\n      console.error('Error accepting transaction:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // TODO: Implementar más funciones de transacción según se necesiten\n  const rejectTransaction = async (transactionId, reason) => {\n    try {\n      // TODO: Implementar endpoint en backend\n      console.log('Reject transaction:', transactionId, reason);\n      return { success: false, error: 'Funcionalidad pendiente de implementar' };\n    } catch (error) {\n      console.error('Error rejecting transaction:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const confirmDelivery = async (transactionId, proofData) => {\n    try {\n      // TODO: Implementar endpoint en backend\n      console.log('Confirm delivery:', transactionId, proofData);\n      return { success: false, error: 'Funcionalidad pendiente de implementar' };\n    } catch (error) {\n      console.error('Error confirming delivery:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const confirmPayment = async (transactionId, proofData) => {\n    try {\n      // TODO: Implementar endpoint en backend\n      console.log('Confirm payment:', transactionId, proofData);\n      return { success: false, error: 'Funcionalidad pendiente de implementar' };\n    } catch (error) {\n      console.error('Error confirming payment:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const addRating = async (transactionId, rating, comment) => {\n    try {\n      // TODO: Implementar endpoint en backend\n      console.log('Add rating:', transactionId, rating, comment);\n      return { success: false, error: 'Funcionalidad pendiente de implementar' };\n    } catch (error) {\n      console.error('Error adding rating:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const value = {\n    // Estado\n    user,\n    transactions,\n    buyerTransactions,\n    sellerTransactions,\n    loading,\n    unreadNotifications,\n    \n    // Funciones\n    fetchTransactions,\n    createTransaction,\n    acceptTransaction,\n    rejectTransaction,\n    confirmDelivery,\n    confirmPayment,\n    addRating,\n    \n    // Utilidades\n    refreshTransactions: fetchTransactions\n  };\n\n  return (\n    <TransactionContext.Provider value={value}>\n      {children}\n    </TransactionContext.Provider>\n  );\n}\n\nexport function useTransactions() {\n  const context = useContext(TransactionContext);\n  if (context === undefined) {\n    throw new Error('useTransactions must be used within a TransactionProvider');\n  }\n  return context;\n}\n\nexport default TransactionContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}