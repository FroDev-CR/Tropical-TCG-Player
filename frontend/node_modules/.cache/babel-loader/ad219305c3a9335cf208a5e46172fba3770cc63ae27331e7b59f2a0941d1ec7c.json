{"ast":null,"code":"var _jsxFileName = \"/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/CartContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiClient from '../services/api';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [cart, setCart] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Hooks deben llamarse siempre de manera incondicional\n  const {\n    user,\n    isAuthenticated\n  } = useAuth() || {\n    user: null,\n    isAuthenticated: false\n  };\n\n  // Cargar carrito cuando el usuario cambie\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadUserCart();\n    } else {\n      // Usuario no autenticado, carrito vac√≠o\n      setCart([]);\n      setLoading(false);\n    }\n  }, [isAuthenticated, user]);\n  const loadUserCart = async () => {\n    setLoading(true);\n    try {\n      // Por ahora usamos localStorage, luego se puede implementar endpoint de carrito\n      const savedCart = localStorage.getItem(`cart_${user.id}`);\n      if (savedCart) {\n        setCart(JSON.parse(savedCart));\n      } else {\n        setCart([]);\n      }\n    } catch (error) {\n      console.error('Error cargando carrito:', error);\n      setCart([]);\n    }\n    setLoading(false);\n  };\n  const saveCart = newCart => {\n    if (user) {\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(newCart));\n    }\n  };\n\n  // Funci√≥n para agregar al carrito\n  const addToCart = async (listing, requestedQuantity = 1) => {\n    try {\n      console.log('üõí Intentando agregar al carrito:', listing === null || listing === void 0 ? void 0 : listing.cardName, 'ID:', (listing === null || listing === void 0 ? void 0 : listing.id) || (listing === null || listing === void 0 ? void 0 : listing.listingId), 'Cantidad:', requestedQuantity);\n\n      // Normalizar el ID del listing\n      const listingId = listing.id || listing.listingId;\n      if (!listing || !listingId) {\n        console.error('‚ùå Listing inv√°lido:', listing);\n        alert('No se puede agregar al carrito: Datos de carta inv√°lidos');\n        return false;\n      }\n\n      // Verificar disponibilidad\n      const availability = await checkListingAvailability(listingId, requestedQuantity);\n      if (!availability.available) {\n        console.log('‚ùå No disponible:', availability.reason);\n        alert(`No se puede agregar al carrito: ${availability.reason}`);\n        return false;\n      }\n\n      // Verificar si ya est√° en el carrito\n      let existingItemIndex = -1;\n      if (!Array.isArray(cart)) {\n        console.error('‚ùå Carrito no es un array:', cart);\n        setCart([]);\n      } else {\n        existingItemIndex = cart.findIndex(item => item && (item.id === listingId || item.listingId === listingId));\n      }\n      let newCart;\n      if (existingItemIndex >= 0) {\n        // Si ya existe, verificar si la nueva cantidad total no excede la disponible\n        const currentQuantityInCart = cart[existingItemIndex].quantity || 1;\n        const totalQuantity = currentQuantityInCart + requestedQuantity;\n        if (totalQuantity > availability.availableQuantity) {\n          alert(`Solo puedes agregar ${availability.availableQuantity - currentQuantityInCart} unidades m√°s de esta carta`);\n          return false;\n        }\n        newCart = [...cart];\n        newCart[existingItemIndex].quantity = totalQuantity;\n      } else {\n        var _listing$images, _listing$sellerId, _listing$sellerId2, _listing$sellerId3;\n        // Agregar nuevo item\n        const cartItem = {\n          id: listingId,\n          listingId: listingId,\n          cardId: listing.cardId || listing.id,\n          cardName: listing.cardName || listing.name,\n          cardImage: listing.cardImage || ((_listing$images = listing.images) === null || _listing$images === void 0 ? void 0 : _listing$images.small),\n          price: listing.price,\n          condition: listing.condition,\n          quantity: requestedQuantity,\n          sellerId: ((_listing$sellerId = listing.sellerId) === null || _listing$sellerId === void 0 ? void 0 : _listing$sellerId._id) || listing.sellerId,\n          sellerName: ((_listing$sellerId2 = listing.sellerId) === null || _listing$sellerId2 === void 0 ? void 0 : _listing$sellerId2.username) || listing.sellerName,\n          userPhone: ((_listing$sellerId3 = listing.sellerId) === null || _listing$sellerId3 === void 0 ? void 0 : _listing$sellerId3.phone) || listing.userPhone,\n          setName: listing.setName,\n          rarity: listing.rarity,\n          tcgType: listing.tcgType,\n          maxQuantity: availability.availableQuantity\n        };\n        newCart = [...cart, cartItem];\n      }\n      setCart(newCart);\n      saveCart(newCart);\n      console.log('‚úÖ Agregado al carrito exitosamente');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error agregando al carrito:', error);\n      alert('Error agregando al carrito. Int√©ntalo de nuevo.');\n      return false;\n    }\n  };\n\n  // Funci√≥n para remover del carrito\n  const removeFromCart = async listingId => {\n    try {\n      const newCart = cart.filter(item => item.id !== listingId && item.listingId !== listingId);\n      setCart(newCart);\n      saveCart(newCart);\n      return true;\n    } catch (error) {\n      console.error('Error removiendo del carrito:', error);\n      return false;\n    }\n  };\n\n  // Funci√≥n para limpiar carrito\n  const clearCart = async () => {\n    try {\n      setCart([]);\n      saveCart([]);\n      return true;\n    } catch (error) {\n      console.error('Error limpiando carrito:', error);\n      return false;\n    }\n  };\n\n  // Funci√≥n para actualizar cantidad\n  const updateCartItemQuantity = async (listingId, newQuantity) => {\n    try {\n      if (newQuantity <= 0) {\n        return await removeFromCart(listingId);\n      }\n      const newCart = cart.map(item => {\n        if (item.id === listingId || item.listingId === listingId) {\n          return {\n            ...item,\n            quantity: newQuantity\n          };\n        }\n        return item;\n      });\n      setCart(newCart);\n      saveCart(newCart);\n      return true;\n    } catch (error) {\n      console.error('Error actualizando cantidad:', error);\n      return false;\n    }\n  };\n\n  // Funci√≥n para verificar disponibilidad\n  const checkListingAvailability = async (listingId, requestedQuantity = 1) => {\n    try {\n      console.log('üîç Verificando disponibilidad para listing:', listingId, 'cantidad:', requestedQuantity);\n      const response = await apiClient.get(`/api/v1/listings/${listingId}`);\n      if (!response.data.success) {\n        console.log('‚ùå Listing no existe:', listingId);\n        return {\n          available: false,\n          reason: 'El listado no existe'\n        };\n      }\n      const listingData = response.data.listing;\n      console.log('üì¶ Datos del listing:', listingData);\n      const availableQuantity = listingData.availableQuantity || listingData.quantity || 0;\n      const status = listingData.status || 'active';\n      console.log('üìä Estado:', status, 'Disponible:', availableQuantity, 'Solicitado:', requestedQuantity);\n      if (status === 'inactive') {\n        return {\n          available: false,\n          reason: 'El listado est√° inactivo'\n        };\n      }\n      if (status === 'sold_out' || availableQuantity === 0) {\n        return {\n          available: false,\n          reason: 'Producto agotado'\n        };\n      }\n      if (availableQuantity < requestedQuantity) {\n        return {\n          available: false,\n          reason: `Solo hay ${availableQuantity} unidad${availableQuantity > 1 ? 'es' : ''} disponible${availableQuantity > 1 ? 's' : ''}`,\n          availableQuantity\n        };\n      }\n      return {\n        available: true,\n        availableQuantity,\n        listing: listingData\n      };\n    } catch (error) {\n      console.error('‚ùå Error verificando disponibilidad:', error);\n      return {\n        available: false,\n        reason: 'Error verificando disponibilidad'\n      };\n    }\n  };\n\n  // Funciones de c√°lculo\n  const getTotalItems = () => {\n    return cart.reduce((total, item) => total + (item.quantity || 1), 0);\n  };\n  const getTotalPrice = () => {\n    return cart.reduce((total, item) => total + item.price * (item.quantity || 1), 0);\n  };\n\n  // Obtener items del carrito agrupados por vendedor\n  const getCartByVendor = () => {\n    const vendors = {};\n    cart.forEach(item => {\n      const vendorId = item.sellerId;\n      if (!vendors[vendorId]) {\n        vendors[vendorId] = {\n          vendorId,\n          vendorName: item.sellerName,\n          items: [],\n          totalAmount: 0\n        };\n      }\n      vendors[vendorId].items.push(item);\n      vendors[vendorId].totalAmount += item.price * (item.quantity || 1);\n    });\n    return vendors;\n  };\n  const value = {\n    cart,\n    loading,\n    user,\n    addToCart,\n    removeFromCart,\n    clearCart,\n    updateCartItemQuantity,\n    checkListingAvailability,\n    getTotalItems,\n    getTotalPrice,\n    getCartByVendor\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 10\n  }, this);\n}\n_s(CartProvider, \"zvUsbdwysSLEKrVRDkBy/Obx5xQ=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default CartContext;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiClient","useAuth","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","loading","setLoading","user","isAuthenticated","loadUserCart","savedCart","localStorage","getItem","id","JSON","parse","error","console","saveCart","newCart","setItem","stringify","addToCart","listing","requestedQuantity","log","cardName","listingId","alert","availability","checkListingAvailability","available","reason","existingItemIndex","Array","isArray","findIndex","item","currentQuantityInCart","quantity","totalQuantity","availableQuantity","_listing$images","_listing$sellerId","_listing$sellerId2","_listing$sellerId3","cartItem","cardId","name","cardImage","images","small","price","condition","sellerId","_id","sellerName","username","userPhone","phone","setName","rarity","tcgType","maxQuantity","removeFromCart","filter","clearCart","updateCartItemQuantity","newQuantity","map","response","get","data","success","listingData","status","getTotalItems","reduce","total","getTotalPrice","getCartByVendor","vendors","forEach","vendorId","vendorName","items","totalAmount","push","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/CartContext.js"],"sourcesContent":["// src/contexts/CartContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiClient from '../services/api';\nimport { useAuth } from './AuthContext';\n\nconst CartContext = createContext();\n\nexport function CartProvider({ children }) {\n  const [cart, setCart] = useState([]);\n  const [loading, setLoading] = useState(true);\n  \n  // Hooks deben llamarse siempre de manera incondicional\n  const { user, isAuthenticated } = useAuth() || { user: null, isAuthenticated: false };\n\n  // Cargar carrito cuando el usuario cambie\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadUserCart();\n    } else {\n      // Usuario no autenticado, carrito vac√≠o\n      setCart([]);\n      setLoading(false);\n    }\n  }, [isAuthenticated, user]);\n\n  const loadUserCart = async () => {\n    setLoading(true);\n    try {\n      // Por ahora usamos localStorage, luego se puede implementar endpoint de carrito\n      const savedCart = localStorage.getItem(`cart_${user.id}`);\n      if (savedCart) {\n        setCart(JSON.parse(savedCart));\n      } else {\n        setCart([]);\n      }\n    } catch (error) {\n      console.error('Error cargando carrito:', error);\n      setCart([]);\n    }\n    setLoading(false);\n  };\n\n  const saveCart = (newCart) => {\n    if (user) {\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(newCart));\n    }\n  };\n\n  // Funci√≥n para agregar al carrito\n  const addToCart = async (listing, requestedQuantity = 1) => {\n    try {\n      console.log('üõí Intentando agregar al carrito:', listing?.cardName, 'ID:', listing?.id || listing?.listingId, 'Cantidad:', requestedQuantity);\n      \n      // Normalizar el ID del listing\n      const listingId = listing.id || listing.listingId;\n      \n      if (!listing || !listingId) {\n        console.error('‚ùå Listing inv√°lido:', listing);\n        alert('No se puede agregar al carrito: Datos de carta inv√°lidos');\n        return false;\n      }\n      \n      // Verificar disponibilidad\n      const availability = await checkListingAvailability(listingId, requestedQuantity);\n      \n      if (!availability.available) {\n        console.log('‚ùå No disponible:', availability.reason);\n        alert(`No se puede agregar al carrito: ${availability.reason}`);\n        return false;\n      }\n\n      // Verificar si ya est√° en el carrito\n      let existingItemIndex = -1;\n      if (!Array.isArray(cart)) {\n        console.error('‚ùå Carrito no es un array:', cart);\n        setCart([]);\n      } else {\n        existingItemIndex = cart.findIndex(item => item && (item.id === listingId || item.listingId === listingId));\n      }\n      \n      let newCart;\n      \n      if (existingItemIndex >= 0) {\n        // Si ya existe, verificar si la nueva cantidad total no excede la disponible\n        const currentQuantityInCart = cart[existingItemIndex].quantity || 1;\n        const totalQuantity = currentQuantityInCart + requestedQuantity;\n        \n        if (totalQuantity > availability.availableQuantity) {\n          alert(`Solo puedes agregar ${availability.availableQuantity - currentQuantityInCart} unidades m√°s de esta carta`);\n          return false;\n        }\n        \n        newCart = [...cart];\n        newCart[existingItemIndex].quantity = totalQuantity;\n      } else {\n        // Agregar nuevo item\n        const cartItem = {\n          id: listingId,\n          listingId: listingId,\n          cardId: listing.cardId || listing.id,\n          cardName: listing.cardName || listing.name,\n          cardImage: listing.cardImage || listing.images?.small,\n          price: listing.price,\n          condition: listing.condition,\n          quantity: requestedQuantity,\n          sellerId: listing.sellerId?._id || listing.sellerId,\n          sellerName: listing.sellerId?.username || listing.sellerName,\n          userPhone: listing.sellerId?.phone || listing.userPhone,\n          setName: listing.setName,\n          rarity: listing.rarity,\n          tcgType: listing.tcgType,\n          maxQuantity: availability.availableQuantity\n        };\n        \n        newCart = [...cart, cartItem];\n      }\n      \n      setCart(newCart);\n      saveCart(newCart);\n      \n      console.log('‚úÖ Agregado al carrito exitosamente');\n      return true;\n      \n    } catch (error) {\n      console.error('‚ùå Error agregando al carrito:', error);\n      alert('Error agregando al carrito. Int√©ntalo de nuevo.');\n      return false;\n    }\n  };\n\n  // Funci√≥n para remover del carrito\n  const removeFromCart = async (listingId) => {\n    try {\n      const newCart = cart.filter(item => \n        item.id !== listingId && item.listingId !== listingId\n      );\n      setCart(newCart);\n      saveCart(newCart);\n      return true;\n    } catch (error) {\n      console.error('Error removiendo del carrito:', error);\n      return false;\n    }\n  };\n\n  // Funci√≥n para limpiar carrito\n  const clearCart = async () => {\n    try {\n      setCart([]);\n      saveCart([]);\n      return true;\n    } catch (error) {\n      console.error('Error limpiando carrito:', error);\n      return false;\n    }\n  };\n\n  // Funci√≥n para actualizar cantidad\n  const updateCartItemQuantity = async (listingId, newQuantity) => {\n    try {\n      if (newQuantity <= 0) {\n        return await removeFromCart(listingId);\n      }\n      \n      const newCart = cart.map(item => {\n        if (item.id === listingId || item.listingId === listingId) {\n          return { ...item, quantity: newQuantity };\n        }\n        return item;\n      });\n      \n      setCart(newCart);\n      saveCart(newCart);\n      return true;\n    } catch (error) {\n      console.error('Error actualizando cantidad:', error);\n      return false;\n    }\n  };\n\n  // Funci√≥n para verificar disponibilidad\n  const checkListingAvailability = async (listingId, requestedQuantity = 1) => {\n    try {\n      console.log('üîç Verificando disponibilidad para listing:', listingId, 'cantidad:', requestedQuantity);\n      \n      const response = await apiClient.get(`/api/v1/listings/${listingId}`);\n      \n      if (!response.data.success) {\n        console.log('‚ùå Listing no existe:', listingId);\n        return { available: false, reason: 'El listado no existe' };\n      }\n\n      const listingData = response.data.listing;\n      console.log('üì¶ Datos del listing:', listingData);\n      \n      const availableQuantity = listingData.availableQuantity || listingData.quantity || 0;\n      const status = listingData.status || 'active';\n      \n      console.log('üìä Estado:', status, 'Disponible:', availableQuantity, 'Solicitado:', requestedQuantity);\n      \n      if (status === 'inactive') {\n        return { available: false, reason: 'El listado est√° inactivo' };\n      }\n      \n      if (status === 'sold_out' || availableQuantity === 0) {\n        return { available: false, reason: 'Producto agotado' };\n      }\n      \n      if (availableQuantity < requestedQuantity) {\n        return { \n          available: false, \n          reason: `Solo hay ${availableQuantity} unidad${availableQuantity > 1 ? 'es' : ''} disponible${availableQuantity > 1 ? 's' : ''}`,\n          availableQuantity \n        };\n      }\n      \n      return { \n        available: true, \n        availableQuantity,\n        listing: listingData \n      };\n      \n    } catch (error) {\n      console.error('‚ùå Error verificando disponibilidad:', error);\n      return { \n        available: false, \n        reason: 'Error verificando disponibilidad' \n      };\n    }\n  };\n\n  // Funciones de c√°lculo\n  const getTotalItems = () => {\n    return cart.reduce((total, item) => total + (item.quantity || 1), 0);\n  };\n\n  const getTotalPrice = () => {\n    return cart.reduce((total, item) => total + (item.price * (item.quantity || 1)), 0);\n  };\n\n  // Obtener items del carrito agrupados por vendedor\n  const getCartByVendor = () => {\n    const vendors = {};\n    \n    cart.forEach(item => {\n      const vendorId = item.sellerId;\n      if (!vendors[vendorId]) {\n        vendors[vendorId] = {\n          vendorId,\n          vendorName: item.sellerName,\n          items: [],\n          totalAmount: 0\n        };\n      }\n      vendors[vendorId].items.push(item);\n      vendors[vendorId].totalAmount += item.price * (item.quantity || 1);\n    });\n    \n    return vendors;\n  };\n\n  const value = {\n    cart,\n    loading,\n    user,\n    addToCart,\n    removeFromCart,\n    clearCart,\n    updateCartItemQuantity,\n    checkListingAvailability,\n    getTotalItems,\n    getTotalPrice,\n    getCartByVendor\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n\nexport default CartContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}