{"ast":null,"code":"// Backend API Service\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass BackendAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.token = localStorage.getItem('accessToken');\n    this.refreshToken = localStorage.getItem('refreshToken');\n  }\n\n  // Set tokens after login\n  setTokens(accessToken, refreshToken) {\n    this.token = accessToken;\n    this.refreshToken = refreshToken;\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n\n  // Clear tokens on logout\n  clearTokens() {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n\n  // Get auth headers\n  getAuthHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n\n  // Refresh access token using refresh token\n  async refreshAccessToken() {\n    if (!this.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n    try {\n      const response = await fetch(`${this.baseURL}/api/v1/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken: this.refreshToken\n        })\n      });\n      let data;\n      try {\n        data = await response.json();\n      } catch (jsonError) {\n        // Server offline or returned non-JSON\n        this.clearTokens();\n        throw new Error('Server connection failed during token refresh');\n      }\n      if (response.ok && data.success) {\n        // Update tokens\n        this.setTokens(data.tokens.accessToken, data.tokens.refreshToken);\n        return data.tokens.accessToken;\n      } else {\n        // Refresh token is invalid, clear all tokens\n        this.clearTokens();\n        throw new Error('Refresh token invalid');\n      }\n    } catch (error) {\n      this.clearTokens();\n      throw error;\n    }\n  }\n\n  // Generic API request method with automatic token refresh\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    let config = {\n      headers: this.getAuthHeaders(),\n      ...options\n    };\n    try {\n      let response = await fetch(url, config);\n\n      // Parse JSON safely\n      let data;\n      try {\n        data = await response.json();\n      } catch (jsonError) {\n        // If response is not JSON (server offline, HTML error page, etc.)\n        throw new Error(`Server connection failed or invalid response`);\n      }\n\n      // If unauthorized and we have a refresh token, try to refresh\n      if (response.status === 401 && this.refreshToken && !endpoint.includes('/auth/refresh')) {\n        try {\n          // Try to refresh the token\n          await this.refreshAccessToken();\n\n          // Retry the original request with new token\n          config.headers = this.getAuthHeaders();\n          response = await fetch(url, config);\n\n          // Parse JSON safely on retry\n          try {\n            data = await response.json();\n          } catch (jsonError) {\n            throw new Error(`Server connection failed on retry`);\n          }\n        } catch (refreshError) {\n          var _data;\n          console.error('Token refresh failed:', refreshError);\n          // If refresh fails, throw the original 401 error\n          throw new Error(((_data = data) === null || _data === void 0 ? void 0 : _data.message) || 'Authentication failed');\n        }\n      }\n      if (!response.ok) {\n        var _data2;\n        throw new Error(((_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.message) || 'API request failed');\n      }\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // GET request\n  async get(endpoint) {\n    return this.request(endpoint, {\n      method: 'GET'\n    });\n  }\n\n  // POST request\n  async post(endpoint, body) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(body)\n    });\n  }\n\n  // PUT request\n  async put(endpoint, body) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(body)\n    });\n  }\n\n  // DELETE request\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    });\n  }\n\n  // ========== AUTHENTICATION ENDPOINTS ==========\n\n  async register(userData) {\n    const response = await this.post('/api/v1/auth/register', userData);\n    if (response.success && response.tokens) {\n      this.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n    }\n    return response;\n  }\n  async login(email, password) {\n    const response = await this.post('/api/v1/auth/login', {\n      email,\n      password\n    });\n    if (response.success && response.tokens) {\n      this.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n    }\n    return response;\n  }\n  async verifyToken() {\n    return this.get('/api/v1/auth/verify');\n  }\n  async logout() {\n    try {\n      // Intentar hacer logout en el servidor, pero no es crítico\n      await this.post('/api/v1/auth/logout');\n    } catch (error) {\n      // Si el servidor no está disponible, solo limpiar tokens localmente\n      console.warn('Server logout failed (server may be offline):', error.message);\n    } finally {\n      // Siempre limpiar tokens localmente, independientemente del servidor\n      this.clearTokens();\n    }\n  }\n  async refresh() {\n    return this.refreshAccessToken();\n  }\n\n  // ========== USER ENDPOINTS ==========\n\n  async getProfile() {\n    return this.get('/api/v1/users/profile');\n  }\n  async updateProfile(userData) {\n    return this.put('/api/v1/users/profile', userData);\n  }\n  async getUserListings() {\n    return this.get('/api/v1/users/listings');\n  }\n\n  // ========== LISTING ENDPOINTS ==========\n\n  async getListings(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const endpoint = `/api/v1/listings${queryString ? `?${queryString}` : ''}`;\n    return this.get(endpoint);\n  }\n  async getListing(id) {\n    return this.get(`/api/v1/listings/${id}`);\n  }\n  async createListing(listingData) {\n    return this.post('/api/v1/listings', listingData);\n  }\n  async updateListing(id, listingData) {\n    return this.put(`/api/v1/listings/${id}`, listingData);\n  }\n\n  // ========== BINDER ENDPOINTS ==========\n\n  async getBinders() {\n    return this.get('/api/v1/binders');\n  }\n  async getBinder(id) {\n    return this.get(`/api/v1/binders/${id}`);\n  }\n  async createBinder(binderData) {\n    return this.post('/api/v1/binders', binderData);\n  }\n  async updateBinder(id, binderData) {\n    return this.put(`/api/v1/binders/${id}`, binderData);\n  }\n  async addCardToBinder(binderId, cardData) {\n    return this.post(`/api/v1/binders/${binderId}/cards`, cardData);\n  }\n\n  // ========== TRANSACTION ENDPOINTS ==========\n\n  async getTransactions() {\n    return this.get('/api/v1/transactions');\n  }\n  async createTransaction(transactionData) {\n    return this.post('/api/v1/transactions', transactionData);\n  }\n  async acceptTransaction(id, originStore) {\n    return this.put(`/api/v1/transactions/${id}/accept`, {\n      originStore\n    });\n  }\n\n  // ========== DASHBOARD ENDPOINTS ==========\n\n  async getDashboardStats() {\n    return this.get('/api/v1/stats/dashboard');\n  }\n\n  // ========== HEALTH CHECK ==========\n\n  async healthCheck() {\n    return this.get('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst backendAPI = new BackendAPI();\nexport default backendAPI;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","BackendAPI","constructor","baseURL","token","localStorage","getItem","refreshToken","setTokens","accessToken","setItem","clearTokens","removeItem","getAuthHeaders","headers","refreshAccessToken","Error","response","fetch","method","body","JSON","stringify","data","json","jsonError","ok","success","tokens","error","request","endpoint","options","url","config","status","includes","refreshError","_data","console","message","_data2","get","post","put","delete","register","userData","login","email","password","verifyToken","logout","warn","refresh","getProfile","updateProfile","getUserListings","getListings","params","queryString","URLSearchParams","toString","getListing","id","createListing","listingData","updateListing","getBinders","getBinder","createBinder","binderData","updateBinder","addCardToBinder","binderId","cardData","getTransactions","createTransaction","transactionData","acceptTransaction","originStore","getDashboardStats","healthCheck","backendAPI"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/services/backendAPI.js"],"sourcesContent":["// Backend API Service\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nclass BackendAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.token = localStorage.getItem('accessToken');\n    this.refreshToken = localStorage.getItem('refreshToken');\n  }\n\n  // Set tokens after login\n  setTokens(accessToken, refreshToken) {\n    this.token = accessToken;\n    this.refreshToken = refreshToken;\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n\n  // Clear tokens on logout\n  clearTokens() {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n\n  // Get auth headers\n  getAuthHeaders() {\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n    \n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    \n    return headers;\n  }\n\n  // Refresh access token using refresh token\n  async refreshAccessToken() {\n    if (!this.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    try {\n      const response = await fetch(`${this.baseURL}/api/v1/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          refreshToken: this.refreshToken\n        })\n      });\n\n      let data;\n      try {\n        data = await response.json();\n      } catch (jsonError) {\n        // Server offline or returned non-JSON\n        this.clearTokens();\n        throw new Error('Server connection failed during token refresh');\n      }\n\n      if (response.ok && data.success) {\n        // Update tokens\n        this.setTokens(data.tokens.accessToken, data.tokens.refreshToken);\n        return data.tokens.accessToken;\n      } else {\n        // Refresh token is invalid, clear all tokens\n        this.clearTokens();\n        throw new Error('Refresh token invalid');\n      }\n    } catch (error) {\n      this.clearTokens();\n      throw error;\n    }\n  }\n\n  // Generic API request method with automatic token refresh\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    let config = {\n      headers: this.getAuthHeaders(),\n      ...options,\n    };\n\n    try {\n      let response = await fetch(url, config);\n      \n      // Parse JSON safely\n      let data;\n      try {\n        data = await response.json();\n      } catch (jsonError) {\n        // If response is not JSON (server offline, HTML error page, etc.)\n        throw new Error(`Server connection failed or invalid response`);\n      }\n\n      // If unauthorized and we have a refresh token, try to refresh\n      if (response.status === 401 && this.refreshToken && !endpoint.includes('/auth/refresh')) {\n        try {\n          // Try to refresh the token\n          await this.refreshAccessToken();\n          \n          // Retry the original request with new token\n          config.headers = this.getAuthHeaders();\n          response = await fetch(url, config);\n          \n          // Parse JSON safely on retry\n          try {\n            data = await response.json();\n          } catch (jsonError) {\n            throw new Error(`Server connection failed on retry`);\n          }\n        } catch (refreshError) {\n          console.error('Token refresh failed:', refreshError);\n          // If refresh fails, throw the original 401 error\n          throw new Error(data?.message || 'Authentication failed');\n        }\n      }\n\n      if (!response.ok) {\n        throw new Error(data?.message || 'API request failed');\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // GET request\n  async get(endpoint) {\n    return this.request(endpoint, { method: 'GET' });\n  }\n\n  // POST request\n  async post(endpoint, body) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n  }\n\n  // PUT request\n  async put(endpoint, body) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(body),\n    });\n  }\n\n  // DELETE request\n  async delete(endpoint) {\n    return this.request(endpoint, { method: 'DELETE' });\n  }\n\n  // ========== AUTHENTICATION ENDPOINTS ==========\n\n  async register(userData) {\n    const response = await this.post('/api/v1/auth/register', userData);\n    if (response.success && response.tokens) {\n      this.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n    }\n    return response;\n  }\n\n  async login(email, password) {\n    const response = await this.post('/api/v1/auth/login', { email, password });\n    if (response.success && response.tokens) {\n      this.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n    }\n    return response;\n  }\n\n  async verifyToken() {\n    return this.get('/api/v1/auth/verify');\n  }\n\n  async logout() {\n    try {\n      // Intentar hacer logout en el servidor, pero no es crítico\n      await this.post('/api/v1/auth/logout');\n    } catch (error) {\n      // Si el servidor no está disponible, solo limpiar tokens localmente\n      console.warn('Server logout failed (server may be offline):', error.message);\n    } finally {\n      // Siempre limpiar tokens localmente, independientemente del servidor\n      this.clearTokens();\n    }\n  }\n\n  async refresh() {\n    return this.refreshAccessToken();\n  }\n\n  // ========== USER ENDPOINTS ==========\n\n  async getProfile() {\n    return this.get('/api/v1/users/profile');\n  }\n\n  async updateProfile(userData) {\n    return this.put('/api/v1/users/profile', userData);\n  }\n\n  async getUserListings() {\n    return this.get('/api/v1/users/listings');\n  }\n\n  // ========== LISTING ENDPOINTS ==========\n\n  async getListings(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const endpoint = `/api/v1/listings${queryString ? `?${queryString}` : ''}`;\n    return this.get(endpoint);\n  }\n\n  async getListing(id) {\n    return this.get(`/api/v1/listings/${id}`);\n  }\n\n  async createListing(listingData) {\n    return this.post('/api/v1/listings', listingData);\n  }\n\n  async updateListing(id, listingData) {\n    return this.put(`/api/v1/listings/${id}`, listingData);\n  }\n\n  // ========== BINDER ENDPOINTS ==========\n\n  async getBinders() {\n    return this.get('/api/v1/binders');\n  }\n\n  async getBinder(id) {\n    return this.get(`/api/v1/binders/${id}`);\n  }\n\n  async createBinder(binderData) {\n    return this.post('/api/v1/binders', binderData);\n  }\n\n  async updateBinder(id, binderData) {\n    return this.put(`/api/v1/binders/${id}`, binderData);\n  }\n\n  async addCardToBinder(binderId, cardData) {\n    return this.post(`/api/v1/binders/${binderId}/cards`, cardData);\n  }\n\n  // ========== TRANSACTION ENDPOINTS ==========\n\n  async getTransactions() {\n    return this.get('/api/v1/transactions');\n  }\n\n  async createTransaction(transactionData) {\n    return this.post('/api/v1/transactions', transactionData);\n  }\n\n  async acceptTransaction(id, originStore) {\n    return this.put(`/api/v1/transactions/${id}/accept`, { originStore });\n  }\n\n  // ========== DASHBOARD ENDPOINTS ==========\n\n  async getDashboardStats() {\n    return this.get('/api/v1/stats/dashboard');\n  }\n\n  // ========== HEALTH CHECK ==========\n\n  async healthCheck() {\n    return this.get('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst backendAPI = new BackendAPI();\nexport default backendAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}