{"ast":null,"code":"// Backend API Service\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass BackendAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.token = localStorage.getItem('accessToken');\n    this.refreshToken = localStorage.getItem('refreshToken');\n  }\n\n  // Set tokens after login\n  setTokens(accessToken, refreshToken) {\n    this.token = accessToken;\n    this.refreshToken = refreshToken;\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n\n  // Clear tokens on logout\n  clearTokens() {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n\n  // Get auth headers\n  getAuthHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n\n  // Generic API request method\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: this.getAuthHeaders(),\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'API request failed');\n      }\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // GET request\n  async get(endpoint) {\n    return this.request(endpoint, {\n      method: 'GET'\n    });\n  }\n\n  // POST request\n  async post(endpoint, body) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(body)\n    });\n  }\n\n  // PUT request\n  async put(endpoint, body) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(body)\n    });\n  }\n\n  // DELETE request\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    });\n  }\n\n  // ========== AUTHENTICATION ENDPOINTS ==========\n\n  async register(userData) {\n    const response = await this.post('/api/v1/auth/register', userData);\n    if (response.success && response.tokens) {\n      this.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n    }\n    return response;\n  }\n  async login(email, password) {\n    const response = await this.post('/api/v1/auth/login', {\n      email,\n      password\n    });\n    if (response.success && response.tokens) {\n      this.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n    }\n    return response;\n  }\n  async verifyToken() {\n    return this.get('/api/v1/auth/verify');\n  }\n  async logout() {\n    this.clearTokens();\n  }\n\n  // ========== USER ENDPOINTS ==========\n\n  async getProfile() {\n    return this.get('/api/v1/users/profile');\n  }\n  async updateProfile(userData) {\n    return this.put('/api/v1/users/profile', userData);\n  }\n  async getUserListings() {\n    return this.get('/api/v1/users/listings');\n  }\n\n  // ========== LISTING ENDPOINTS ==========\n\n  async getListings(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const endpoint = `/api/v1/listings${queryString ? `?${queryString}` : ''}`;\n    return this.get(endpoint);\n  }\n  async getListing(id) {\n    return this.get(`/api/v1/listings/${id}`);\n  }\n  async createListing(listingData) {\n    return this.post('/api/v1/listings', listingData);\n  }\n  async updateListing(id, listingData) {\n    return this.put(`/api/v1/listings/${id}`, listingData);\n  }\n\n  // ========== BINDER ENDPOINTS ==========\n\n  async getBinders() {\n    return this.get('/api/v1/binders');\n  }\n  async getBinder(id) {\n    return this.get(`/api/v1/binders/${id}`);\n  }\n  async createBinder(binderData) {\n    return this.post('/api/v1/binders', binderData);\n  }\n  async updateBinder(id, binderData) {\n    return this.put(`/api/v1/binders/${id}`, binderData);\n  }\n  async addCardToBinder(binderId, cardData) {\n    return this.post(`/api/v1/binders/${binderId}/cards`, cardData);\n  }\n\n  // ========== TRANSACTION ENDPOINTS ==========\n\n  async getTransactions() {\n    return this.get('/api/v1/transactions');\n  }\n  async createTransaction(transactionData) {\n    return this.post('/api/v1/transactions', transactionData);\n  }\n  async acceptTransaction(id, originStore) {\n    return this.put(`/api/v1/transactions/${id}/accept`, {\n      originStore\n    });\n  }\n\n  // ========== DASHBOARD ENDPOINTS ==========\n\n  async getDashboardStats() {\n    return this.get('/api/v1/stats/dashboard');\n  }\n\n  // ========== HEALTH CHECK ==========\n\n  async healthCheck() {\n    return this.get('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst backendAPI = new BackendAPI();\nexport default backendAPI;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","BackendAPI","constructor","baseURL","token","localStorage","getItem","refreshToken","setTokens","accessToken","setItem","clearTokens","removeItem","getAuthHeaders","headers","request","endpoint","options","url","config","response","fetch","data","json","ok","Error","message","error","console","get","method","post","body","JSON","stringify","put","delete","register","userData","success","tokens","login","email","password","verifyToken","logout","getProfile","updateProfile","getUserListings","getListings","params","queryString","URLSearchParams","toString","getListing","id","createListing","listingData","updateListing","getBinders","getBinder","createBinder","binderData","updateBinder","addCardToBinder","binderId","cardData","getTransactions","createTransaction","transactionData","acceptTransaction","originStore","getDashboardStats","healthCheck","backendAPI"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/services/backendAPI.js"],"sourcesContent":["// Backend API Service\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nclass BackendAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.token = localStorage.getItem('accessToken');\n    this.refreshToken = localStorage.getItem('refreshToken');\n  }\n\n  // Set tokens after login\n  setTokens(accessToken, refreshToken) {\n    this.token = accessToken;\n    this.refreshToken = refreshToken;\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n\n  // Clear tokens on logout\n  clearTokens() {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n\n  // Get auth headers\n  getAuthHeaders() {\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n    \n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    \n    return headers;\n  }\n\n  // Generic API request method\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: this.getAuthHeaders(),\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'API request failed');\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // GET request\n  async get(endpoint) {\n    return this.request(endpoint, { method: 'GET' });\n  }\n\n  // POST request\n  async post(endpoint, body) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n  }\n\n  // PUT request\n  async put(endpoint, body) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(body),\n    });\n  }\n\n  // DELETE request\n  async delete(endpoint) {\n    return this.request(endpoint, { method: 'DELETE' });\n  }\n\n  // ========== AUTHENTICATION ENDPOINTS ==========\n\n  async register(userData) {\n    const response = await this.post('/api/v1/auth/register', userData);\n    if (response.success && response.tokens) {\n      this.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n    }\n    return response;\n  }\n\n  async login(email, password) {\n    const response = await this.post('/api/v1/auth/login', { email, password });\n    if (response.success && response.tokens) {\n      this.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n    }\n    return response;\n  }\n\n  async verifyToken() {\n    return this.get('/api/v1/auth/verify');\n  }\n\n  async logout() {\n    this.clearTokens();\n  }\n\n  // ========== USER ENDPOINTS ==========\n\n  async getProfile() {\n    return this.get('/api/v1/users/profile');\n  }\n\n  async updateProfile(userData) {\n    return this.put('/api/v1/users/profile', userData);\n  }\n\n  async getUserListings() {\n    return this.get('/api/v1/users/listings');\n  }\n\n  // ========== LISTING ENDPOINTS ==========\n\n  async getListings(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const endpoint = `/api/v1/listings${queryString ? `?${queryString}` : ''}`;\n    return this.get(endpoint);\n  }\n\n  async getListing(id) {\n    return this.get(`/api/v1/listings/${id}`);\n  }\n\n  async createListing(listingData) {\n    return this.post('/api/v1/listings', listingData);\n  }\n\n  async updateListing(id, listingData) {\n    return this.put(`/api/v1/listings/${id}`, listingData);\n  }\n\n  // ========== BINDER ENDPOINTS ==========\n\n  async getBinders() {\n    return this.get('/api/v1/binders');\n  }\n\n  async getBinder(id) {\n    return this.get(`/api/v1/binders/${id}`);\n  }\n\n  async createBinder(binderData) {\n    return this.post('/api/v1/binders', binderData);\n  }\n\n  async updateBinder(id, binderData) {\n    return this.put(`/api/v1/binders/${id}`, binderData);\n  }\n\n  async addCardToBinder(binderId, cardData) {\n    return this.post(`/api/v1/binders/${binderId}/cards`, cardData);\n  }\n\n  // ========== TRANSACTION ENDPOINTS ==========\n\n  async getTransactions() {\n    return this.get('/api/v1/transactions');\n  }\n\n  async createTransaction(transactionData) {\n    return this.post('/api/v1/transactions', transactionData);\n  }\n\n  async acceptTransaction(id, originStore) {\n    return this.put(`/api/v1/transactions/${id}/accept`, { originStore });\n  }\n\n  // ========== DASHBOARD ENDPOINTS ==========\n\n  async getDashboardStats() {\n    return this.get('/api/v1/stats/dashboard');\n  }\n\n  // ========== HEALTH CHECK ==========\n\n  async healthCheck() {\n    return this.get('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst backendAPI = new BackendAPI();\nexport default backendAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}