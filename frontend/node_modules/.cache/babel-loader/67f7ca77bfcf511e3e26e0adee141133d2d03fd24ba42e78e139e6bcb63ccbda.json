{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useP2PTransactions.js\n// Hook personalizado para manejar transacciones P2P\n\nimport { useState, useEffect } from 'react';\nimport { useTransactions } from '../contexts/TransactionContext';\nimport { useCart } from '../contexts/CartContext';\nexport function useP2PTransactions() {\n  _s();\n  const {\n    transactions,\n    buyerTransactions,\n    sellerTransactions,\n    loading,\n    unreadNotifications,\n    getTransactionDetails,\n    acceptTransaction,\n    rejectTransaction,\n    confirmDelivery,\n    requestPayment,\n    confirmPaymentReceived,\n    confirmReceipt,\n    submitRating,\n    createDispute,\n    markAsRead,\n    getTransactionStatusText,\n    getAvailableActions,\n    requiresUrgentAttention,\n    getTimeRemaining\n  } = useTransactions();\n  const {\n    checkAtomicAvailability,\n    createPendingTransaction,\n    getCartByVendor\n  } = useCart();\n  const [actionLoading, setActionLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // ===============================================\n  // FUNCIONES DE TRANSACCIONES\n  // ===============================================\n\n  // Crear transacciones P2P para múltiples vendedores\n  const createP2PTransactions = async (contactMethod = 'whatsapp', buyerNotes = '') => {\n    setActionLoading(true);\n    setError(null);\n    try {\n      const vendors = getCartByVendor();\n      const results = [];\n      for (const vendor of vendors) {\n        try {\n          const result = await createPendingTransaction(vendor.items, contactMethod, buyerNotes);\n          results.push({\n            vendorId: vendor.vendorId,\n            vendorName: vendor.vendorName,\n            success: true,\n            transactionId: result.transactionId,\n            data: result\n          });\n        } catch (error) {\n          results.push({\n            vendorId: vendor.vendorId,\n            vendorName: vendor.vendorName,\n            success: false,\n            error: error.message\n          });\n        }\n      }\n      return results;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Responder a una transacción como vendedor\n  const handleSellerResponse = async (transactionId, action, responseData = {}) => {\n    setActionLoading(true);\n    setError(null);\n    try {\n      let result;\n      if (action === 'accept') {\n        result = await acceptTransaction(transactionId, responseData);\n      } else if (action === 'reject') {\n        result = await rejectTransaction(transactionId, responseData.reason || '');\n      } else {\n        throw new Error('Acción no válida');\n      }\n      await markAsRead(transactionId);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Confirmar entrega como vendedor\n  const handleDeliveryConfirmation = async (transactionId, deliveryData) => {\n    setActionLoading(true);\n    setError(null);\n    try {\n      const result = await confirmDelivery(transactionId, deliveryData);\n      await markAsRead(transactionId);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Confirmar pago recibido como vendedor\n  const handlePaymentConfirmation = async (transactionId, paymentProof) => {\n    setActionLoading(true);\n    setError(null);\n    try {\n      const result = await confirmPaymentReceived(transactionId, paymentProof);\n      await markAsRead(transactionId);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Confirmar recibo como comprador\n  const handleReceiptConfirmation = async (transactionId, receiptData) => {\n    setActionLoading(true);\n    setError(null);\n    try {\n      const result = await confirmReceipt(transactionId, receiptData);\n      await markAsRead(transactionId);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Enviar calificación\n  const handleRatingSubmission = async (transactionId, ratingData) => {\n    setActionLoading(true);\n    setError(null);\n    try {\n      const result = await submitRating(transactionId, ratingData);\n      await markAsRead(transactionId);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Crear disputa\n  const handleDisputeCreation = async (transactionId, disputeData) => {\n    setActionLoading(true);\n    setError(null);\n    try {\n      const result = await createDispute(transactionId, disputeData);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // ===============================================\n  // FUNCIONES DE UTILIDAD\n  // ===============================================\n\n  // Obtener transacciones filtradas\n  const getFilteredTransactions = (filters = {}) => {\n    let filtered = [...transactions];\n    if (filters.role) {\n      filtered = filtered.filter(tx => tx.role === filters.role);\n    }\n    if (filters.status) {\n      filtered = filtered.filter(tx => tx.status === filters.status);\n    }\n    if (filters.urgent) {\n      filtered = filtered.filter(tx => requiresUrgentAttention(tx));\n    }\n    if (filters.dateRange) {\n      const {\n        start,\n        end\n      } = filters.dateRange;\n      filtered = filtered.filter(tx => {\n        var _tx$createdAt, _tx$createdAt$toDate;\n        const date = ((_tx$createdAt = tx.createdAt) === null || _tx$createdAt === void 0 ? void 0 : (_tx$createdAt$toDate = _tx$createdAt.toDate) === null || _tx$createdAt$toDate === void 0 ? void 0 : _tx$createdAt$toDate.call(_tx$createdAt)) || tx.createdAt;\n        return date >= start && date <= end;\n      });\n    }\n    return filtered;\n  };\n\n  // Obtener estadísticas del usuario\n  const getUserStats = () => {\n    const stats = {\n      total: transactions.length,\n      asBuyer: buyerTransactions.length,\n      asSeller: sellerTransactions.length,\n      completed: transactions.filter(tx => tx.status === 'completed').length,\n      pending: transactions.filter(tx => !['completed', 'cancelled_by_seller', 'timeout_cancelled', 'disputed'].includes(tx.status)).length,\n      urgent: transactions.filter(tx => requiresUrgentAttention(tx)).length\n    };\n    stats.completionRate = stats.total > 0 ? (stats.completed / stats.total * 100).toFixed(1) : 0;\n    return stats;\n  };\n\n  // Obtener próximas acciones requeridas\n  const getUpcomingActions = () => {\n    return transactions.filter(tx => getAvailableActions(tx).length > 0).map(tx => {\n      var _tx$items, _tx$items$;\n      return {\n        transactionId: tx.id,\n        cardName: ((_tx$items = tx.items) === null || _tx$items === void 0 ? void 0 : (_tx$items$ = _tx$items[0]) === null || _tx$items$ === void 0 ? void 0 : _tx$items$.cardName) || 'Producto',\n        status: tx.status,\n        statusText: getTransactionStatusText(tx),\n        actions: getAvailableActions(tx),\n        timeRemaining: getTimeRemaining(tx),\n        urgent: requiresUrgentAttention(tx),\n        role: tx.role,\n        otherParty: tx.role === 'buyer' ? tx.sellerName : tx.buyerName\n      };\n    }).sort((a, b) => {\n      // Ordenar por urgencia y luego por tiempo restante\n      if (a.urgent && !b.urgent) return -1;\n      if (!a.urgent && b.urgent) return 1;\n      return a.timeRemaining - b.timeRemaining;\n    });\n  };\n\n  // Formatear tiempo restante\n  const formatTimeRemaining = milliseconds => {\n    if (milliseconds <= 0) return 'Vencido';\n    const days = Math.floor(milliseconds / (1000 * 60 * 60 * 24));\n    const hours = Math.floor(milliseconds % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n    const minutes = Math.floor(milliseconds % (1000 * 60 * 60) / (1000 * 60));\n    if (days > 0) {\n      return `${days}d ${hours}h`;\n    } else if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else {\n      return `${minutes}m`;\n    }\n  };\n\n  // Validar datos de transacción\n  const validateTransactionData = (type, data) => {\n    const validations = {\n      delivery: {\n        required: ['originStore', 'proofImage'],\n        optional: ['deliveryNotes']\n      },\n      payment: {\n        required: ['method', 'amount'],\n        optional: ['proofImage', 'notes']\n      },\n      receipt: {\n        required: ['destinationStore'],\n        optional: ['satisfactionLevel', 'receiptNotes']\n      },\n      rating: {\n        required: ['rating'],\n        optional: ['comment', 'categories']\n      },\n      dispute: {\n        required: ['type', 'description'],\n        optional: ['evidence', 'severity']\n      }\n    };\n    const validation = validations[type];\n    if (!validation) {\n      throw new Error('Tipo de validación no soportado');\n    }\n    const missing = validation.required.filter(field => !data[field]);\n    if (missing.length > 0) {\n      throw new Error(`Campos requeridos faltantes: ${missing.join(', ')}`);\n    }\n    return true;\n  };\n\n  // Limpiar errores\n  const clearError = () => {\n    setError(null);\n  };\n  return {\n    // Estado\n    transactions,\n    buyerTransactions,\n    sellerTransactions,\n    loading,\n    actionLoading,\n    error,\n    unreadNotifications,\n    // Acciones principales\n    createP2PTransactions,\n    handleSellerResponse,\n    handleDeliveryConfirmation,\n    handlePaymentConfirmation,\n    handleReceiptConfirmation,\n    handleRatingSubmission,\n    handleDisputeCreation,\n    // Funciones de datos\n    getTransactionDetails,\n    getFilteredTransactions,\n    getUserStats,\n    getUpcomingActions,\n    // Funciones de utilidad\n    getTransactionStatusText,\n    getAvailableActions,\n    requiresUrgentAttention,\n    getTimeRemaining,\n    formatTimeRemaining,\n    validateTransactionData,\n    markAsRead,\n    clearError,\n    // Funciones del carrito P2P\n    checkAtomicAvailability,\n    getCartByVendor\n  };\n}\n_s(useP2PTransactions, \"KiYoJFoVW+g3Rxj6clHwMDapl+M=\", false, function () {\n  return [useTransactions, useCart];\n});","map":{"version":3,"names":["useState","useEffect","useTransactions","useCart","useP2PTransactions","_s","transactions","buyerTransactions","sellerTransactions","loading","unreadNotifications","getTransactionDetails","acceptTransaction","rejectTransaction","confirmDelivery","requestPayment","confirmPaymentReceived","confirmReceipt","submitRating","createDispute","markAsRead","getTransactionStatusText","getAvailableActions","requiresUrgentAttention","getTimeRemaining","checkAtomicAvailability","createPendingTransaction","getCartByVendor","actionLoading","setActionLoading","error","setError","createP2PTransactions","contactMethod","buyerNotes","vendors","results","vendor","result","items","push","vendorId","vendorName","success","transactionId","data","message","handleSellerResponse","action","responseData","reason","Error","handleDeliveryConfirmation","deliveryData","handlePaymentConfirmation","paymentProof","handleReceiptConfirmation","receiptData","handleRatingSubmission","ratingData","handleDisputeCreation","disputeData","getFilteredTransactions","filters","filtered","role","filter","tx","status","urgent","dateRange","start","end","_tx$createdAt","_tx$createdAt$toDate","date","createdAt","toDate","call","getUserStats","stats","total","length","asBuyer","asSeller","completed","pending","includes","completionRate","toFixed","getUpcomingActions","map","_tx$items","_tx$items$","id","cardName","statusText","actions","timeRemaining","otherParty","sellerName","buyerName","sort","a","b","formatTimeRemaining","milliseconds","days","Math","floor","hours","minutes","validateTransactionData","type","validations","delivery","required","optional","payment","receipt","rating","dispute","validation","missing","field","join","clearError"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/hooks/useP2PTransactions.js"],"sourcesContent":["// src/hooks/useP2PTransactions.js\n// Hook personalizado para manejar transacciones P2P\n\nimport { useState, useEffect } from 'react';\nimport { useTransactions } from '../contexts/TransactionContext';\nimport { useCart } from '../contexts/CartContext';\n\nexport function useP2PTransactions() {\n  const {\n    transactions,\n    buyerTransactions,\n    sellerTransactions,\n    loading,\n    unreadNotifications,\n    getTransactionDetails,\n    acceptTransaction,\n    rejectTransaction,\n    confirmDelivery,\n    requestPayment,\n    confirmPaymentReceived,\n    confirmReceipt,\n    submitRating,\n    createDispute,\n    markAsRead,\n    getTransactionStatusText,\n    getAvailableActions,\n    requiresUrgentAttention,\n    getTimeRemaining\n  } = useTransactions();\n\n  const {\n    checkAtomicAvailability,\n    createPendingTransaction,\n    getCartByVendor\n  } = useCart();\n\n  const [actionLoading, setActionLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // ===============================================\n  // FUNCIONES DE TRANSACCIONES\n  // ===============================================\n\n  // Crear transacciones P2P para múltiples vendedores\n  const createP2PTransactions = async (contactMethod = 'whatsapp', buyerNotes = '') => {\n    setActionLoading(true);\n    setError(null);\n\n    try {\n      const vendors = getCartByVendor();\n      const results = [];\n\n      for (const vendor of vendors) {\n        try {\n          const result = await createPendingTransaction(\n            vendor.items,\n            contactMethod,\n            buyerNotes\n          );\n          results.push({\n            vendorId: vendor.vendorId,\n            vendorName: vendor.vendorName,\n            success: true,\n            transactionId: result.transactionId,\n            data: result\n          });\n        } catch (error) {\n          results.push({\n            vendorId: vendor.vendorId,\n            vendorName: vendor.vendorName,\n            success: false,\n            error: error.message\n          });\n        }\n      }\n\n      return results;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Responder a una transacción como vendedor\n  const handleSellerResponse = async (transactionId, action, responseData = {}) => {\n    setActionLoading(true);\n    setError(null);\n\n    try {\n      let result;\n      if (action === 'accept') {\n        result = await acceptTransaction(transactionId, responseData);\n      } else if (action === 'reject') {\n        result = await rejectTransaction(transactionId, responseData.reason || '');\n      } else {\n        throw new Error('Acción no válida');\n      }\n\n      await markAsRead(transactionId);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Confirmar entrega como vendedor\n  const handleDeliveryConfirmation = async (transactionId, deliveryData) => {\n    setActionLoading(true);\n    setError(null);\n\n    try {\n      const result = await confirmDelivery(transactionId, deliveryData);\n      await markAsRead(transactionId);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Confirmar pago recibido como vendedor\n  const handlePaymentConfirmation = async (transactionId, paymentProof) => {\n    setActionLoading(true);\n    setError(null);\n\n    try {\n      const result = await confirmPaymentReceived(transactionId, paymentProof);\n      await markAsRead(transactionId);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Confirmar recibo como comprador\n  const handleReceiptConfirmation = async (transactionId, receiptData) => {\n    setActionLoading(true);\n    setError(null);\n\n    try {\n      const result = await confirmReceipt(transactionId, receiptData);\n      await markAsRead(transactionId);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Enviar calificación\n  const handleRatingSubmission = async (transactionId, ratingData) => {\n    setActionLoading(true);\n    setError(null);\n\n    try {\n      const result = await submitRating(transactionId, ratingData);\n      await markAsRead(transactionId);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // Crear disputa\n  const handleDisputeCreation = async (transactionId, disputeData) => {\n    setActionLoading(true);\n    setError(null);\n\n    try {\n      const result = await createDispute(transactionId, disputeData);\n      return result;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setActionLoading(false);\n    }\n  };\n\n  // ===============================================\n  // FUNCIONES DE UTILIDAD\n  // ===============================================\n\n  // Obtener transacciones filtradas\n  const getFilteredTransactions = (filters = {}) => {\n    let filtered = [...transactions];\n\n    if (filters.role) {\n      filtered = filtered.filter(tx => tx.role === filters.role);\n    }\n\n    if (filters.status) {\n      filtered = filtered.filter(tx => tx.status === filters.status);\n    }\n\n    if (filters.urgent) {\n      filtered = filtered.filter(tx => requiresUrgentAttention(tx));\n    }\n\n    if (filters.dateRange) {\n      const { start, end } = filters.dateRange;\n      filtered = filtered.filter(tx => {\n        const date = tx.createdAt?.toDate?.() || tx.createdAt;\n        return date >= start && date <= end;\n      });\n    }\n\n    return filtered;\n  };\n\n  // Obtener estadísticas del usuario\n  const getUserStats = () => {\n    const stats = {\n      total: transactions.length,\n      asBuyer: buyerTransactions.length,\n      asSeller: sellerTransactions.length,\n      completed: transactions.filter(tx => tx.status === 'completed').length,\n      pending: transactions.filter(tx => !['completed', 'cancelled_by_seller', 'timeout_cancelled', 'disputed'].includes(tx.status)).length,\n      urgent: transactions.filter(tx => requiresUrgentAttention(tx)).length\n    };\n\n    stats.completionRate = stats.total > 0 ? (stats.completed / stats.total * 100).toFixed(1) : 0;\n\n    return stats;\n  };\n\n  // Obtener próximas acciones requeridas\n  const getUpcomingActions = () => {\n    return transactions\n      .filter(tx => getAvailableActions(tx).length > 0)\n      .map(tx => ({\n        transactionId: tx.id,\n        cardName: tx.items?.[0]?.cardName || 'Producto',\n        status: tx.status,\n        statusText: getTransactionStatusText(tx),\n        actions: getAvailableActions(tx),\n        timeRemaining: getTimeRemaining(tx),\n        urgent: requiresUrgentAttention(tx),\n        role: tx.role,\n        otherParty: tx.role === 'buyer' ? tx.sellerName : tx.buyerName\n      }))\n      .sort((a, b) => {\n        // Ordenar por urgencia y luego por tiempo restante\n        if (a.urgent && !b.urgent) return -1;\n        if (!a.urgent && b.urgent) return 1;\n        return a.timeRemaining - b.timeRemaining;\n      });\n  };\n\n  // Formatear tiempo restante\n  const formatTimeRemaining = (milliseconds) => {\n    if (milliseconds <= 0) return 'Vencido';\n    \n    const days = Math.floor(milliseconds / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((milliseconds % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));\n    \n    if (days > 0) {\n      return `${days}d ${hours}h`;\n    } else if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else {\n      return `${minutes}m`;\n    }\n  };\n\n  // Validar datos de transacción\n  const validateTransactionData = (type, data) => {\n    const validations = {\n      delivery: {\n        required: ['originStore', 'proofImage'],\n        optional: ['deliveryNotes']\n      },\n      payment: {\n        required: ['method', 'amount'],\n        optional: ['proofImage', 'notes']\n      },\n      receipt: {\n        required: ['destinationStore'],\n        optional: ['satisfactionLevel', 'receiptNotes']\n      },\n      rating: {\n        required: ['rating'],\n        optional: ['comment', 'categories']\n      },\n      dispute: {\n        required: ['type', 'description'],\n        optional: ['evidence', 'severity']\n      }\n    };\n\n    const validation = validations[type];\n    if (!validation) {\n      throw new Error('Tipo de validación no soportado');\n    }\n\n    const missing = validation.required.filter(field => !data[field]);\n    if (missing.length > 0) {\n      throw new Error(`Campos requeridos faltantes: ${missing.join(', ')}`);\n    }\n\n    return true;\n  };\n\n  // Limpiar errores\n  const clearError = () => {\n    setError(null);\n  };\n\n  return {\n    // Estado\n    transactions,\n    buyerTransactions,\n    sellerTransactions,\n    loading,\n    actionLoading,\n    error,\n    unreadNotifications,\n\n    // Acciones principales\n    createP2PTransactions,\n    handleSellerResponse,\n    handleDeliveryConfirmation,\n    handlePaymentConfirmation,\n    handleReceiptConfirmation,\n    handleRatingSubmission,\n    handleDisputeCreation,\n\n    // Funciones de datos\n    getTransactionDetails,\n    getFilteredTransactions,\n    getUserStats,\n    getUpcomingActions,\n\n    // Funciones de utilidad\n    getTransactionStatusText,\n    getAvailableActions,\n    requiresUrgentAttention,\n    getTimeRemaining,\n    formatTimeRemaining,\n    validateTransactionData,\n    markAsRead,\n    clearError,\n\n    // Funciones del carrito P2P\n    checkAtomicAvailability,\n    getCartByVendor\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}