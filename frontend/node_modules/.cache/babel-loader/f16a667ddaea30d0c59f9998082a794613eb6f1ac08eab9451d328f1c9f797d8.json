{"ast":null,"code":"var _jsxFileName = \"/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/TransactionContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/TransactionContext.js\n// Context específico para manejo de transacciones P2P\n\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { auth, db, functions } from '../firebase';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { collection, query, where, orderBy, onSnapshot, doc, getDoc } from 'firebase/firestore';\nimport { httpsCallable } from 'firebase/functions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionContext = /*#__PURE__*/createContext();\nexport function TransactionProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n  const [buyerTransactions, setBuyerTransactions] = useState([]);\n  const [sellerTransactions, setSellerTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [unreadNotifications, setUnreadNotifications] = useState(0);\n\n  // Escuchar cambios en la autenticación\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, firebaseUser => {\n      setUser(firebaseUser);\n      if (!firebaseUser) {\n        setTransactions([]);\n        setBuyerTransactions([]);\n        setSellerTransactions([]);\n        setUnreadNotifications(0);\n      }\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // Escuchar transacciones en tiempo real\n  useEffect(() => {\n    if (!user) return;\n\n    // Query para transacciones como comprador\n    const buyerQuery = query(collection(db, 'transactions'), where('buyerId', '==', user.uid), orderBy('createdAt', 'desc'));\n\n    // Query para transacciones como vendedor\n    const sellerQuery = query(collection(db, 'transactions'), where('sellerId', '==', user.uid), orderBy('createdAt', 'desc'));\n    const unsubscribeBuyer = onSnapshot(buyerQuery, snapshot => {\n      const buyerTxs = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        role: 'buyer'\n      }));\n      setBuyerTransactions(buyerTxs);\n    });\n    const unsubscribeSeller = onSnapshot(sellerQuery, snapshot => {\n      const sellerTxs = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        role: 'seller'\n      }));\n      setSellerTransactions(sellerTxs);\n    });\n    return () => {\n      unsubscribeBuyer();\n      unsubscribeSeller();\n    };\n  }, [user]);\n\n  // Combinar y ordenar todas las transacciones\n  useEffect(() => {\n    const allTransactions = [...buyerTransactions, ...sellerTransactions].sort((a, b) => {\n      var _a$createdAt, _a$createdAt$toDate, _b$createdAt, _b$createdAt$toDate;\n      const dateA = ((_a$createdAt = a.createdAt) === null || _a$createdAt === void 0 ? void 0 : (_a$createdAt$toDate = _a$createdAt.toDate) === null || _a$createdAt$toDate === void 0 ? void 0 : _a$createdAt$toDate.call(_a$createdAt)) || a.createdAt;\n      const dateB = ((_b$createdAt = b.createdAt) === null || _b$createdAt === void 0 ? void 0 : (_b$createdAt$toDate = _b$createdAt.toDate) === null || _b$createdAt$toDate === void 0 ? void 0 : _b$createdAt$toDate.call(_b$createdAt)) || b.createdAt;\n      return dateB - dateA;\n    });\n    setTransactions(allTransactions);\n\n    // Calcular notificaciones no leídas\n    const unread = allTransactions.filter(tx => {\n      const userRole = tx.role;\n      const status = tx.status;\n\n      // Lógica para determinar si requiere atención del usuario\n      if (userRole === 'buyer') {\n        return ['delivered_pending_payment', 'payment_confirmed', 'completed_pending_rating'].includes(status);\n      } else if (userRole === 'seller') {\n        return ['pending_seller_response', 'accepted_pending_delivery', 'completed_pending_rating'].includes(status);\n      }\n      return false;\n    }).length;\n    setUnreadNotifications(unread);\n  }, [buyerTransactions, sellerTransactions]);\n\n  // ===============================================\n  // FUNCIONES DE TRANSACCIONES P2P\n  // ===============================================\n\n  // Obtener detalles completos de una transacción\n  const getTransactionDetails = async transactionId => {\n    try {\n      const transactionRef = doc(db, 'transactions', transactionId);\n      const transactionSnap = await getDoc(transactionRef);\n      if (!transactionSnap.exists()) {\n        throw new Error('Transacción no encontrada');\n      }\n      return {\n        id: transactionSnap.id,\n        ...transactionSnap.data()\n      };\n    } catch (error) {\n      console.error('Error obteniendo detalles de transacción:', error);\n      throw error;\n    }\n  };\n\n  // Aceptar transacción como vendedor\n  const acceptTransaction = async (transactionId, acceptanceData = {}) => {\n    if (!user) throw new Error('Usuario no autenticado');\n    try {\n      const acceptTransaction = httpsCallable(functions, 'acceptTransaction');\n      const result = await acceptTransaction({\n        transactionId,\n        sellerId: user.uid,\n        originStore: acceptanceData.originStore,\n        estimatedDeliveryDays: acceptanceData.estimatedDeliveryDays || 3,\n        sellerNotes: acceptanceData.sellerNotes || ''\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error aceptando transacción:', error);\n      throw error;\n    }\n  };\n\n  // Rechazar transacción como vendedor\n  const rejectTransaction = async (transactionId, reason = '') => {\n    if (!user) throw new Error('Usuario no autenticado');\n    try {\n      const rejectTransaction = httpsCallable(functions, 'rejectTransaction');\n      const result = await rejectTransaction({\n        transactionId,\n        sellerId: user.uid,\n        reason\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error rechazando transacción:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar entrega como vendedor (con foto de prueba)\n  const confirmDelivery = async (transactionId, deliveryData) => {\n    if (!user) throw new Error('Usuario no autenticado');\n    try {\n      const confirmDelivery = httpsCallable(functions, 'confirmDelivery');\n      const result = await confirmDelivery({\n        transactionId,\n        sellerId: user.uid,\n        originStore: deliveryData.originStore,\n        proofImage: deliveryData.proofImage,\n        deliveryNotes: deliveryData.deliveryNotes || ''\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando entrega:', error);\n      throw error;\n    }\n  };\n\n  // Solicitar pago como vendedor\n  const requestPayment = async (transactionId, paymentMethod = 'whatsapp') => {\n    if (!user) throw new Error('Usuario no autenticado');\n    try {\n      const requestPayment = httpsCallable(functions, 'requestPayment');\n      const result = await requestPayment({\n        transactionId,\n        sellerId: user.uid,\n        method: paymentMethod\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error solicitando pago:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar pago recibido como vendedor\n  const confirmPaymentReceived = async (transactionId, paymentProof) => {\n    if (!user) throw new Error('Usuario no autenticado');\n    try {\n      const confirmPayment = httpsCallable(functions, 'confirmPaymentReceived');\n      const result = await confirmPayment({\n        transactionId,\n        sellerId: user.uid,\n        paymentMethod: paymentProof.method,\n        proofImage: paymentProof.proofImage,\n        amount: paymentProof.amount,\n        paymentNotes: paymentProof.notes || ''\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando pago recibido:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar recibo como comprador\n  const confirmReceipt = async (transactionId, receiptData) => {\n    if (!user) throw new Error('Usuario no autenticado');\n    try {\n      const confirmReceipt = httpsCallable(functions, 'confirmReceipt');\n      const result = await confirmReceipt({\n        transactionId,\n        buyerId: user.uid,\n        destinationStore: receiptData.destinationStore,\n        satisfactionLevel: receiptData.satisfactionLevel,\n        receiptNotes: receiptData.receiptNotes || ''\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando recibo:', error);\n      throw error;\n    }\n  };\n\n  // Enviar calificación (comprador o vendedor)\n  const submitRating = async (transactionId, ratingData) => {\n    if (!user) throw new Error('Usuario no autenticado');\n    try {\n      const submitRating = httpsCallable(functions, 'submitRating');\n      const result = await submitRating({\n        transactionId,\n        userId: user.uid,\n        rating: ratingData.rating,\n        // 1-5 estrellas\n        comment: ratingData.comment || '',\n        categories: ratingData.categories || {} // { communication: 5, delivery: 4, product: 5 }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error enviando calificación:', error);\n      throw error;\n    }\n  };\n\n  // Crear disputa/reporte\n  const createDispute = async (transactionId, disputeData) => {\n    if (!user) throw new Error('Usuario no autenticado');\n    try {\n      const createDispute = httpsCallable(functions, 'createDispute');\n      const result = await createDispute({\n        transactionId,\n        reporterId: user.uid,\n        disputeType: disputeData.type,\n        // 'not_received', 'wrong_item', 'payment_issue', 'communication'\n        description: disputeData.description,\n        evidence: disputeData.evidence || [],\n        // Array de URLs de imágenes\n        severity: disputeData.severity || 'medium' // 'low', 'medium', 'high'\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error creando disputa:', error);\n      throw error;\n    }\n  };\n\n  // Marcar transacción como leída\n  const markAsRead = async transactionId => {\n    try {\n      const markAsRead = httpsCallable(functions, 'markTransactionAsRead');\n      await markAsRead({\n        transactionId,\n        userId: user.uid\n      });\n    } catch (error) {\n      console.error('Error marcando transacción como leída:', error);\n    }\n  };\n\n  // ===============================================\n  // FUNCIONES DE UTILIDAD\n  // ===============================================\n\n  // Obtener estado legible de una transacción\n  const getTransactionStatusText = transaction => {\n    var _statusTexts$userRole;\n    const status = transaction.status;\n    const userRole = transaction.role;\n    const statusTexts = {\n      buyer: {\n        'pending_seller_response': 'Esperando respuesta del vendedor',\n        'accepted_pending_delivery': 'Vendedor preparando envío',\n        'delivered_pending_payment': 'Realizar pago al vendedor',\n        'payment_confirmed': 'Recoger producto en tienda',\n        'completed_pending_rating': 'Calificar al vendedor',\n        'completed': 'Transacción completada',\n        'cancelled_by_seller': 'Cancelada por vendedor',\n        'timeout_cancelled': 'Cancelada por tiempo agotado',\n        'disputed': 'En proceso de disputa'\n      },\n      seller: {\n        'pending_seller_response': 'Responder a la compra',\n        'accepted_pending_delivery': 'Entregar en tienda de origen',\n        'delivered_pending_payment': 'Solicitar pago al comprador',\n        'payment_confirmed': 'Esperando confirmación del comprador',\n        'completed_pending_rating': 'Calificar al comprador',\n        'completed': 'Transacción completada',\n        'cancelled_by_seller': 'Cancelada por ti',\n        'timeout_cancelled': 'Cancelada por tiempo agotado',\n        'disputed': 'En proceso de disputa'\n      }\n    };\n    return ((_statusTexts$userRole = statusTexts[userRole]) === null || _statusTexts$userRole === void 0 ? void 0 : _statusTexts$userRole[status]) || `Estado: ${status}`;\n  };\n\n  // Obtener acciones disponibles para el usuario actual\n  const getAvailableActions = transaction => {\n    const status = transaction.status;\n    const userRole = transaction.role;\n    const actions = [];\n    if (userRole === 'seller') {\n      switch (status) {\n        case 'pending_seller_response':\n          actions.push('accept', 'reject');\n          break;\n        case 'accepted_pending_delivery':\n          actions.push('confirm_delivery');\n          break;\n        case 'delivered_pending_payment':\n          actions.push('request_payment', 'confirm_payment');\n          break;\n        case 'completed_pending_rating':\n          actions.push('submit_rating');\n          break;\n      }\n    } else if (userRole === 'buyer') {\n      switch (status) {\n        case 'delivered_pending_payment':\n          actions.push('make_payment');\n          break;\n        case 'payment_confirmed':\n          actions.push('confirm_receipt');\n          break;\n        case 'completed_pending_rating':\n          actions.push('submit_rating');\n          break;\n      }\n    }\n\n    // Siempre permitir crear disputa si la transacción no está completada\n    if (!['completed', 'cancelled_by_seller', 'timeout_cancelled'].includes(status)) {\n      actions.push('create_dispute');\n    }\n    return actions;\n  };\n\n  // Verificar si una transacción requiere atención urgente\n  const requiresUrgentAttention = transaction => {\n    var _transaction$createdA, _transaction$createdA2;\n    const now = new Date();\n    const createdAt = ((_transaction$createdA = transaction.createdAt) === null || _transaction$createdA === void 0 ? void 0 : (_transaction$createdA2 = _transaction$createdA.toDate) === null || _transaction$createdA2 === void 0 ? void 0 : _transaction$createdA2.call(_transaction$createdA)) || transaction.createdAt;\n    const timeline = transaction.timeline || {};\n\n    // Verificar timeouts próximos\n    if (transaction.status === 'pending_seller_response') {\n      const hoursLeft = 24 - (now - createdAt) / (1000 * 60 * 60);\n      return hoursLeft <= 2; // Urgente si quedan menos de 2 horas\n    }\n    if (transaction.status === 'accepted_pending_delivery') {\n      var _timeline$accepted, _timeline$accepted$to;\n      const acceptedAt = ((_timeline$accepted = timeline.accepted) === null || _timeline$accepted === void 0 ? void 0 : (_timeline$accepted$to = _timeline$accepted.toDate) === null || _timeline$accepted$to === void 0 ? void 0 : _timeline$accepted$to.call(_timeline$accepted)) || timeline.accepted;\n      if (acceptedAt) {\n        const hoursLeft = 144 - (now - acceptedAt) / (1000 * 60 * 60); // 6 días = 144 horas\n        return hoursLeft <= 24; // Urgente si queda menos de 1 día\n      }\n    }\n    return false;\n  };\n\n  // Calcular tiempo restante para una acción\n  const getTimeRemaining = transaction => {\n    var _transaction$createdA3, _transaction$createdA4, _timeline$accepted2, _timeline$accepted2$t, _timeline$paymentConf, _timeline$paymentConf2, _timeline$completed, _timeline$completed$t;\n    const now = new Date();\n    const createdAt = ((_transaction$createdA3 = transaction.createdAt) === null || _transaction$createdA3 === void 0 ? void 0 : (_transaction$createdA4 = _transaction$createdA3.toDate) === null || _transaction$createdA4 === void 0 ? void 0 : _transaction$createdA4.call(_transaction$createdA3)) || transaction.createdAt;\n    const timeline = transaction.timeline || {};\n    switch (transaction.status) {\n      case 'pending_seller_response':\n        const responseDeadline = new Date(createdAt.getTime() + 24 * 60 * 60 * 1000);\n        return Math.max(0, responseDeadline - now);\n      case 'accepted_pending_delivery':\n        const acceptedAt = ((_timeline$accepted2 = timeline.accepted) === null || _timeline$accepted2 === void 0 ? void 0 : (_timeline$accepted2$t = _timeline$accepted2.toDate) === null || _timeline$accepted2$t === void 0 ? void 0 : _timeline$accepted2$t.call(_timeline$accepted2)) || timeline.accepted;\n        if (acceptedAt) {\n          const deliveryDeadline = new Date(acceptedAt.getTime() + 6 * 24 * 60 * 60 * 1000);\n          return Math.max(0, deliveryDeadline - now);\n        }\n        break;\n      case 'payment_confirmed':\n        const confirmedAt = ((_timeline$paymentConf = timeline.paymentConfirmed) === null || _timeline$paymentConf === void 0 ? void 0 : (_timeline$paymentConf2 = _timeline$paymentConf.toDate) === null || _timeline$paymentConf2 === void 0 ? void 0 : _timeline$paymentConf2.call(_timeline$paymentConf)) || timeline.paymentConfirmed;\n        if (confirmedAt) {\n          const receiptDeadline = new Date(confirmedAt.getTime() + 10 * 24 * 60 * 60 * 1000);\n          return Math.max(0, receiptDeadline - now);\n        }\n        break;\n      case 'completed_pending_rating':\n        const completedAt = ((_timeline$completed = timeline.completed) === null || _timeline$completed === void 0 ? void 0 : (_timeline$completed$t = _timeline$completed.toDate) === null || _timeline$completed$t === void 0 ? void 0 : _timeline$completed$t.call(_timeline$completed)) || timeline.completed;\n        if (completedAt) {\n          const ratingDeadline = new Date(completedAt.getTime() + 7 * 24 * 60 * 60 * 1000);\n          return Math.max(0, ratingDeadline - now);\n        }\n        break;\n    }\n    return 0;\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      // Estado\n      user,\n      transactions,\n      buyerTransactions,\n      sellerTransactions,\n      loading,\n      unreadNotifications,\n      // Funciones principales\n      getTransactionDetails,\n      acceptTransaction,\n      rejectTransaction,\n      confirmDelivery,\n      requestPayment,\n      confirmPaymentReceived,\n      confirmReceipt,\n      submitRating,\n      createDispute,\n      markAsRead,\n      // Funciones de utilidad\n      getTransactionStatusText,\n      getAvailableActions,\n      requiresUrgentAttention,\n      getTimeRemaining\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 454,\n    columnNumber: 5\n  }, this);\n}\n_s(TransactionProvider, \"Hh/hG+DglertvwQ2pGg0/07sj74=\");\n_c = TransactionProvider;\nexport function useTransactions() {\n  _s2();\n  const context = useContext(TransactionContext);\n  if (context === undefined) {\n    throw new Error('useTransactions must be used within a TransactionProvider');\n  }\n  return context;\n}\n_s2(useTransactions, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","auth","db","functions","onAuthStateChanged","collection","query","where","orderBy","onSnapshot","doc","getDoc","httpsCallable","jsxDEV","_jsxDEV","TransactionContext","TransactionProvider","children","_s","user","setUser","transactions","setTransactions","buyerTransactions","setBuyerTransactions","sellerTransactions","setSellerTransactions","loading","setLoading","unreadNotifications","setUnreadNotifications","unsubscribe","firebaseUser","buyerQuery","uid","sellerQuery","unsubscribeBuyer","snapshot","buyerTxs","docs","map","id","data","role","unsubscribeSeller","sellerTxs","allTransactions","sort","a","b","_a$createdAt","_a$createdAt$toDate","_b$createdAt","_b$createdAt$toDate","dateA","createdAt","toDate","call","dateB","unread","filter","tx","userRole","status","includes","length","getTransactionDetails","transactionId","transactionRef","transactionSnap","exists","Error","error","console","acceptTransaction","acceptanceData","result","sellerId","originStore","estimatedDeliveryDays","sellerNotes","rejectTransaction","reason","confirmDelivery","deliveryData","proofImage","deliveryNotes","requestPayment","paymentMethod","method","confirmPaymentReceived","paymentProof","confirmPayment","amount","paymentNotes","notes","confirmReceipt","receiptData","buyerId","destinationStore","satisfactionLevel","receiptNotes","submitRating","ratingData","userId","rating","comment","categories","createDispute","disputeData","reporterId","disputeType","type","description","evidence","severity","markAsRead","getTransactionStatusText","transaction","_statusTexts$userRole","statusTexts","buyer","seller","getAvailableActions","actions","push","requiresUrgentAttention","_transaction$createdA","_transaction$createdA2","now","Date","timeline","hoursLeft","_timeline$accepted","_timeline$accepted$to","acceptedAt","accepted","getTimeRemaining","_transaction$createdA3","_transaction$createdA4","_timeline$accepted2","_timeline$accepted2$t","_timeline$paymentConf","_timeline$paymentConf2","_timeline$completed","_timeline$completed$t","responseDeadline","getTime","Math","max","deliveryDeadline","confirmedAt","paymentConfirmed","receiptDeadline","completedAt","completed","ratingDeadline","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTransactions","_s2","context","undefined","$RefreshReg$"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/TransactionContext.js"],"sourcesContent":["// src/contexts/TransactionContext.js\n// Context específico para manejo de transacciones P2P\n\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { auth, db, functions } from '../firebase';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { collection, query, where, orderBy, onSnapshot, doc, getDoc } from 'firebase/firestore';\nimport { httpsCallable } from 'firebase/functions';\n\nconst TransactionContext = createContext();\n\nexport function TransactionProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [transactions, setTransactions] = useState([]);\n  const [buyerTransactions, setBuyerTransactions] = useState([]);\n  const [sellerTransactions, setSellerTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [unreadNotifications, setUnreadNotifications] = useState(0);\n\n  // Escuchar cambios en la autenticación\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (firebaseUser) => {\n      setUser(firebaseUser);\n      if (!firebaseUser) {\n        setTransactions([]);\n        setBuyerTransactions([]);\n        setSellerTransactions([]);\n        setUnreadNotifications(0);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  // Escuchar transacciones en tiempo real\n  useEffect(() => {\n    if (!user) return;\n\n    // Query para transacciones como comprador\n    const buyerQuery = query(\n      collection(db, 'transactions'),\n      where('buyerId', '==', user.uid),\n      orderBy('createdAt', 'desc')\n    );\n\n    // Query para transacciones como vendedor\n    const sellerQuery = query(\n      collection(db, 'transactions'),\n      where('sellerId', '==', user.uid),\n      orderBy('createdAt', 'desc')\n    );\n\n    const unsubscribeBuyer = onSnapshot(buyerQuery, (snapshot) => {\n      const buyerTxs = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        role: 'buyer'\n      }));\n      setBuyerTransactions(buyerTxs);\n    });\n\n    const unsubscribeSeller = onSnapshot(sellerQuery, (snapshot) => {\n      const sellerTxs = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        role: 'seller'\n      }));\n      setSellerTransactions(sellerTxs);\n    });\n\n    return () => {\n      unsubscribeBuyer();\n      unsubscribeSeller();\n    };\n  }, [user]);\n\n  // Combinar y ordenar todas las transacciones\n  useEffect(() => {\n    const allTransactions = [\n      ...buyerTransactions,\n      ...sellerTransactions\n    ].sort((a, b) => {\n      const dateA = a.createdAt?.toDate?.() || a.createdAt;\n      const dateB = b.createdAt?.toDate?.() || b.createdAt;\n      return dateB - dateA;\n    });\n\n    setTransactions(allTransactions);\n\n    // Calcular notificaciones no leídas\n    const unread = allTransactions.filter(tx => {\n      const userRole = tx.role;\n      const status = tx.status;\n      \n      // Lógica para determinar si requiere atención del usuario\n      if (userRole === 'buyer') {\n        return ['delivered_pending_payment', 'payment_confirmed', 'completed_pending_rating'].includes(status);\n      } else if (userRole === 'seller') {\n        return ['pending_seller_response', 'accepted_pending_delivery', 'completed_pending_rating'].includes(status);\n      }\n      return false;\n    }).length;\n\n    setUnreadNotifications(unread);\n  }, [buyerTransactions, sellerTransactions]);\n\n  // ===============================================\n  // FUNCIONES DE TRANSACCIONES P2P\n  // ===============================================\n\n  // Obtener detalles completos de una transacción\n  const getTransactionDetails = async (transactionId) => {\n    try {\n      const transactionRef = doc(db, 'transactions', transactionId);\n      const transactionSnap = await getDoc(transactionRef);\n      \n      if (!transactionSnap.exists()) {\n        throw new Error('Transacción no encontrada');\n      }\n\n      return {\n        id: transactionSnap.id,\n        ...transactionSnap.data()\n      };\n    } catch (error) {\n      console.error('Error obteniendo detalles de transacción:', error);\n      throw error;\n    }\n  };\n\n  // Aceptar transacción como vendedor\n  const acceptTransaction = async (transactionId, acceptanceData = {}) => {\n    if (!user) throw new Error('Usuario no autenticado');\n\n    try {\n      const acceptTransaction = httpsCallable(functions, 'acceptTransaction');\n      const result = await acceptTransaction({\n        transactionId,\n        sellerId: user.uid,\n        originStore: acceptanceData.originStore,\n        estimatedDeliveryDays: acceptanceData.estimatedDeliveryDays || 3,\n        sellerNotes: acceptanceData.sellerNotes || ''\n      });\n\n      return result.data;\n    } catch (error) {\n      console.error('Error aceptando transacción:', error);\n      throw error;\n    }\n  };\n\n  // Rechazar transacción como vendedor\n  const rejectTransaction = async (transactionId, reason = '') => {\n    if (!user) throw new Error('Usuario no autenticado');\n\n    try {\n      const rejectTransaction = httpsCallable(functions, 'rejectTransaction');\n      const result = await rejectTransaction({\n        transactionId,\n        sellerId: user.uid,\n        reason\n      });\n\n      return result.data;\n    } catch (error) {\n      console.error('Error rechazando transacción:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar entrega como vendedor (con foto de prueba)\n  const confirmDelivery = async (transactionId, deliveryData) => {\n    if (!user) throw new Error('Usuario no autenticado');\n\n    try {\n      const confirmDelivery = httpsCallable(functions, 'confirmDelivery');\n      const result = await confirmDelivery({\n        transactionId,\n        sellerId: user.uid,\n        originStore: deliveryData.originStore,\n        proofImage: deliveryData.proofImage,\n        deliveryNotes: deliveryData.deliveryNotes || ''\n      });\n\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando entrega:', error);\n      throw error;\n    }\n  };\n\n  // Solicitar pago como vendedor\n  const requestPayment = async (transactionId, paymentMethod = 'whatsapp') => {\n    if (!user) throw new Error('Usuario no autenticado');\n\n    try {\n      const requestPayment = httpsCallable(functions, 'requestPayment');\n      const result = await requestPayment({\n        transactionId,\n        sellerId: user.uid,\n        method: paymentMethod\n      });\n\n      return result.data;\n    } catch (error) {\n      console.error('Error solicitando pago:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar pago recibido como vendedor\n  const confirmPaymentReceived = async (transactionId, paymentProof) => {\n    if (!user) throw new Error('Usuario no autenticado');\n\n    try {\n      const confirmPayment = httpsCallable(functions, 'confirmPaymentReceived');\n      const result = await confirmPayment({\n        transactionId,\n        sellerId: user.uid,\n        paymentMethod: paymentProof.method,\n        proofImage: paymentProof.proofImage,\n        amount: paymentProof.amount,\n        paymentNotes: paymentProof.notes || ''\n      });\n\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando pago recibido:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar recibo como comprador\n  const confirmReceipt = async (transactionId, receiptData) => {\n    if (!user) throw new Error('Usuario no autenticado');\n\n    try {\n      const confirmReceipt = httpsCallable(functions, 'confirmReceipt');\n      const result = await confirmReceipt({\n        transactionId,\n        buyerId: user.uid,\n        destinationStore: receiptData.destinationStore,\n        satisfactionLevel: receiptData.satisfactionLevel,\n        receiptNotes: receiptData.receiptNotes || ''\n      });\n\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando recibo:', error);\n      throw error;\n    }\n  };\n\n  // Enviar calificación (comprador o vendedor)\n  const submitRating = async (transactionId, ratingData) => {\n    if (!user) throw new Error('Usuario no autenticado');\n\n    try {\n      const submitRating = httpsCallable(functions, 'submitRating');\n      const result = await submitRating({\n        transactionId,\n        userId: user.uid,\n        rating: ratingData.rating, // 1-5 estrellas\n        comment: ratingData.comment || '',\n        categories: ratingData.categories || {} // { communication: 5, delivery: 4, product: 5 }\n      });\n\n      return result.data;\n    } catch (error) {\n      console.error('Error enviando calificación:', error);\n      throw error;\n    }\n  };\n\n  // Crear disputa/reporte\n  const createDispute = async (transactionId, disputeData) => {\n    if (!user) throw new Error('Usuario no autenticado');\n\n    try {\n      const createDispute = httpsCallable(functions, 'createDispute');\n      const result = await createDispute({\n        transactionId,\n        reporterId: user.uid,\n        disputeType: disputeData.type, // 'not_received', 'wrong_item', 'payment_issue', 'communication'\n        description: disputeData.description,\n        evidence: disputeData.evidence || [], // Array de URLs de imágenes\n        severity: disputeData.severity || 'medium' // 'low', 'medium', 'high'\n      });\n\n      return result.data;\n    } catch (error) {\n      console.error('Error creando disputa:', error);\n      throw error;\n    }\n  };\n\n  // Marcar transacción como leída\n  const markAsRead = async (transactionId) => {\n    try {\n      const markAsRead = httpsCallable(functions, 'markTransactionAsRead');\n      await markAsRead({\n        transactionId,\n        userId: user.uid\n      });\n    } catch (error) {\n      console.error('Error marcando transacción como leída:', error);\n    }\n  };\n\n  // ===============================================\n  // FUNCIONES DE UTILIDAD\n  // ===============================================\n\n  // Obtener estado legible de una transacción\n  const getTransactionStatusText = (transaction) => {\n    const status = transaction.status;\n    const userRole = transaction.role;\n\n    const statusTexts = {\n      buyer: {\n        'pending_seller_response': 'Esperando respuesta del vendedor',\n        'accepted_pending_delivery': 'Vendedor preparando envío',\n        'delivered_pending_payment': 'Realizar pago al vendedor',\n        'payment_confirmed': 'Recoger producto en tienda',\n        'completed_pending_rating': 'Calificar al vendedor',\n        'completed': 'Transacción completada',\n        'cancelled_by_seller': 'Cancelada por vendedor',\n        'timeout_cancelled': 'Cancelada por tiempo agotado',\n        'disputed': 'En proceso de disputa'\n      },\n      seller: {\n        'pending_seller_response': 'Responder a la compra',\n        'accepted_pending_delivery': 'Entregar en tienda de origen',\n        'delivered_pending_payment': 'Solicitar pago al comprador',\n        'payment_confirmed': 'Esperando confirmación del comprador',\n        'completed_pending_rating': 'Calificar al comprador',\n        'completed': 'Transacción completada',\n        'cancelled_by_seller': 'Cancelada por ti',\n        'timeout_cancelled': 'Cancelada por tiempo agotado',\n        'disputed': 'En proceso de disputa'\n      }\n    };\n\n    return statusTexts[userRole]?.[status] || `Estado: ${status}`;\n  };\n\n  // Obtener acciones disponibles para el usuario actual\n  const getAvailableActions = (transaction) => {\n    const status = transaction.status;\n    const userRole = transaction.role;\n    const actions = [];\n\n    if (userRole === 'seller') {\n      switch (status) {\n        case 'pending_seller_response':\n          actions.push('accept', 'reject');\n          break;\n        case 'accepted_pending_delivery':\n          actions.push('confirm_delivery');\n          break;\n        case 'delivered_pending_payment':\n          actions.push('request_payment', 'confirm_payment');\n          break;\n        case 'completed_pending_rating':\n          actions.push('submit_rating');\n          break;\n      }\n    } else if (userRole === 'buyer') {\n      switch (status) {\n        case 'delivered_pending_payment':\n          actions.push('make_payment');\n          break;\n        case 'payment_confirmed':\n          actions.push('confirm_receipt');\n          break;\n        case 'completed_pending_rating':\n          actions.push('submit_rating');\n          break;\n      }\n    }\n\n    // Siempre permitir crear disputa si la transacción no está completada\n    if (!['completed', 'cancelled_by_seller', 'timeout_cancelled'].includes(status)) {\n      actions.push('create_dispute');\n    }\n\n    return actions;\n  };\n\n  // Verificar si una transacción requiere atención urgente\n  const requiresUrgentAttention = (transaction) => {\n    const now = new Date();\n    const createdAt = transaction.createdAt?.toDate?.() || transaction.createdAt;\n    const timeline = transaction.timeline || {};\n    \n    // Verificar timeouts próximos\n    if (transaction.status === 'pending_seller_response') {\n      const hoursLeft = 24 - ((now - createdAt) / (1000 * 60 * 60));\n      return hoursLeft <= 2; // Urgente si quedan menos de 2 horas\n    }\n    \n    if (transaction.status === 'accepted_pending_delivery') {\n      const acceptedAt = timeline.accepted?.toDate?.() || timeline.accepted;\n      if (acceptedAt) {\n        const hoursLeft = 144 - ((now - acceptedAt) / (1000 * 60 * 60)); // 6 días = 144 horas\n        return hoursLeft <= 24; // Urgente si queda menos de 1 día\n      }\n    }\n    \n    return false;\n  };\n\n  // Calcular tiempo restante para una acción\n  const getTimeRemaining = (transaction) => {\n    const now = new Date();\n    const createdAt = transaction.createdAt?.toDate?.() || transaction.createdAt;\n    const timeline = transaction.timeline || {};\n    \n    switch (transaction.status) {\n      case 'pending_seller_response':\n        const responseDeadline = new Date(createdAt.getTime() + 24 * 60 * 60 * 1000);\n        return Math.max(0, responseDeadline - now);\n        \n      case 'accepted_pending_delivery':\n        const acceptedAt = timeline.accepted?.toDate?.() || timeline.accepted;\n        if (acceptedAt) {\n          const deliveryDeadline = new Date(acceptedAt.getTime() + 6 * 24 * 60 * 60 * 1000);\n          return Math.max(0, deliveryDeadline - now);\n        }\n        break;\n        \n      case 'payment_confirmed':\n        const confirmedAt = timeline.paymentConfirmed?.toDate?.() || timeline.paymentConfirmed;\n        if (confirmedAt) {\n          const receiptDeadline = new Date(confirmedAt.getTime() + 10 * 24 * 60 * 60 * 1000);\n          return Math.max(0, receiptDeadline - now);\n        }\n        break;\n        \n      case 'completed_pending_rating':\n        const completedAt = timeline.completed?.toDate?.() || timeline.completed;\n        if (completedAt) {\n          const ratingDeadline = new Date(completedAt.getTime() + 7 * 24 * 60 * 60 * 1000);\n          return Math.max(0, ratingDeadline - now);\n        }\n        break;\n    }\n    \n    return 0;\n  };\n\n  return (\n    <TransactionContext.Provider value={{\n      // Estado\n      user,\n      transactions,\n      buyerTransactions,\n      sellerTransactions,\n      loading,\n      unreadNotifications,\n      \n      // Funciones principales\n      getTransactionDetails,\n      acceptTransaction,\n      rejectTransaction,\n      confirmDelivery,\n      requestPayment,\n      confirmPaymentReceived,\n      confirmReceipt,\n      submitRating,\n      createDispute,\n      markAsRead,\n      \n      // Funciones de utilidad\n      getTransactionStatusText,\n      getAvailableActions,\n      requiresUrgentAttention,\n      getTimeRemaining\n    }}>\n      {children}\n    </TransactionContext.Provider>\n  );\n}\n\nexport function useTransactions() {\n  const context = useContext(TransactionContext);\n  if (context === undefined) {\n    throw new Error('useTransactions must be used within a TransactionProvider');\n  }\n  return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}