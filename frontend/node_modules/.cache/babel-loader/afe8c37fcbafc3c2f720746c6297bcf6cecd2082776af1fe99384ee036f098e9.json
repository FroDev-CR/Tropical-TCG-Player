{"ast":null,"code":"var _jsxFileName = \"/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// src/contexts/AuthContext.js\n// Contexto de autenticación que usa el backend Node.js\n\nimport { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport backendAPI from '../services/backendAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Verificar token al cargar la aplicación\n  useEffect(() => {\n    const initializeAuth = async () => {\n      setLoading(true);\n      try {\n        if (backendAPI.token) {\n          // Verificar si el token es válido\n          const response = await backendAPI.verifyToken();\n          if (response.success) {\n            setUser(response.user);\n          } else {\n            // Token inválido, limpiar\n            backendAPI.clearTokens();\n            setUser(null);\n          }\n        } else {\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        // Si hay error verificando token, limpiar todo\n        backendAPI.clearTokens();\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Función para registrar nuevo usuario\n  const register = useCallback(async userData => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await backendAPI.register(userData);\n      if (response.success) {\n        // Guardar tokens y usuario\n        backendAPI.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n        setUser(response.user);\n        setError(null);\n        return {\n          success: true,\n          user: response.user\n        };\n      } else {\n        setError(response.message || 'Error en el registro');\n        return {\n          success: false,\n          error: response.message\n        };\n      }\n    } catch (error) {\n      console.error('Error registering:', error);\n      const errorMessage = error.message || 'Error registrando usuario';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Función para iniciar sesión\n  const login = useCallback(async (email, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await backendAPI.login(email, password);\n      if (response.success) {\n        // Guardar tokens y usuario\n        backendAPI.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n        setUser(response.user);\n        setError(null);\n        return {\n          success: true,\n          user: response.user\n        };\n      } else {\n        setError(response.message || 'Credenciales inválidas');\n        return {\n          success: false,\n          error: response.message\n        };\n      }\n    } catch (error) {\n      console.error('Error logging in:', error);\n      const errorMessage = error.message || 'Error iniciando sesión';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Función para cerrar sesión\n  const logout = useCallback(async () => {\n    try {\n      // Opcional: llamar al endpoint de logout del backend\n      await backendAPI.logout();\n    } catch (error) {\n      console.error('Error logging out:', error);\n    } finally {\n      // Limpiar estado local siempre\n      backendAPI.clearTokens();\n      setUser(null);\n      setError(null);\n    }\n  }, []);\n  const value = {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user && !loading,\n    register,\n    login,\n    logout,\n    setError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 10\n  }, this);\n}\n_s(AuthProvider, \"CvibLZbtH5YDfNOvge9gI3/ZyL0=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function useAuthState() {\n  _s3();\n  const {\n    user,\n    loading\n  } = useAuth();\n  return {\n    user,\n    loading,\n    isAuthenticated: !!user && !loading\n  };\n}\n_s3(useAuthState, \"EmJkapf7qiLC5Br5eCoEq4veZes=\", false, function () {\n  return [useAuth];\n});\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useCallback","backendAPI","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","initializeAuth","token","response","verifyToken","success","clearTokens","console","register","userData","setTokens","tokens","accessToken","refreshToken","message","errorMessage","login","email","password","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","useAuthState","_s3","$RefreshReg$"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\n// Contexto de autenticación que usa el backend Node.js\n\nimport { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport backendAPI from '../services/backendAPI';\n\nconst AuthContext = createContext(undefined);\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Verificar token al cargar la aplicación\n  useEffect(() => {\n    const initializeAuth = async () => {\n      setLoading(true);\n      try {\n        if (backendAPI.token) {\n          // Verificar si el token es válido\n          const response = await backendAPI.verifyToken();\n          if (response.success) {\n            setUser(response.user);\n          } else {\n            // Token inválido, limpiar\n            backendAPI.clearTokens();\n            setUser(null);\n          }\n        } else {\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        // Si hay error verificando token, limpiar todo\n        backendAPI.clearTokens();\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Función para registrar nuevo usuario\n  const register = useCallback(async (userData) => {\n    try {\n      setError(null);\n      setLoading(true);\n\n      const response = await backendAPI.register(userData);\n      \n      if (response.success) {\n        // Guardar tokens y usuario\n        backendAPI.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n        setUser(response.user);\n        setError(null);\n        return { success: true, user: response.user };\n      } else {\n        setError(response.message || 'Error en el registro');\n        return { success: false, error: response.message };\n      }\n    } catch (error) {\n      console.error('Error registering:', error);\n      const errorMessage = error.message || 'Error registrando usuario';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Función para iniciar sesión\n  const login = useCallback(async (email, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n\n      const response = await backendAPI.login(email, password);\n      \n      if (response.success) {\n        // Guardar tokens y usuario\n        backendAPI.setTokens(response.tokens.accessToken, response.tokens.refreshToken);\n        setUser(response.user);\n        setError(null);\n        return { success: true, user: response.user };\n      } else {\n        setError(response.message || 'Credenciales inválidas');\n        return { success: false, error: response.message };\n      }\n    } catch (error) {\n      console.error('Error logging in:', error);\n      const errorMessage = error.message || 'Error iniciando sesión';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Función para cerrar sesión\n  const logout = useCallback(async () => {\n    try {\n      // Opcional: llamar al endpoint de logout del backend\n      await backendAPI.logout();\n    } catch (error) {\n      console.error('Error logging out:', error);\n    } finally {\n      // Limpiar estado local siempre\n      backendAPI.clearTokens();\n      setUser(null);\n      setError(null);\n    }\n  }, []);\n\n  const value = {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user && !loading,\n    register,\n    login,\n    logout,\n    setError\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport function useAuthState() {\n  const { user, loading } = useAuth();\n  return { user, loading, isAuthenticated: !!user && !loading };\n}\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}