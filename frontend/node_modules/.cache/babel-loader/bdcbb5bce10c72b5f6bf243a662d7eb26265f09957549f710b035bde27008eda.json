{"ast":null,"code":"// src/services/apiSearchService.js\nclass APISearchService{constructor(){this.cache=new Map();this.cacheTimeout=5*60*1000;// 5 minutos\nthis.tcgApiKey=process.env.REACT_APP_TCG_API_KEY;this.useMockData=false;// Desactivado - usando proxy para evitar CORS\n}// Mock data para cuando las APIs fallen\ngetMockCards(searchTerm){let tcgType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'all';const mockCards=[{id:'mock-charizard-1',name:'Charizard',images:{small:'https://images.pokemontcg.io/base1/4.png',large:'https://images.pokemontcg.io/base1/4_hires.png'},set:{name:'Base Set'},rarity:'Rare Holo',tcgType:'pokemon',apiSource:'mock',hp:120,types:['Fire'],attacks:[{name:'Fire Spin',damage:'100',cost:['Fire','Fire','Fire','Fire']}],flavorText:'Spits fire that is hot enough to melt boulders.',artist:'Mitsuhiro Arita'},{id:'mock-pikachu-1',name:'Pikachu',images:{small:'https://images.pokemontcg.io/base1/58.png',large:'https://images.pokemontcg.io/base1/58_hires.png'},set:{name:'Base Set'},rarity:'Common',tcgType:'pokemon',apiSource:'mock',hp:60,types:['Lightning'],attacks:[{name:'Thunder Jolt',damage:'30',cost:['Lightning','Colorless']}],flavorText:'When several of these Pok√©mon gather, their electricity could build and cause lightning storms.',artist:'Atsuko Nishida'},{id:'mock-luffy-1',name:'Monkey D. Luffy',images:{small:'https://images.pokemontcg.io/base1/25.png',large:'https://images.pokemontcg.io/base1/25_hires.png'},set:{name:'Romance Dawn'},rarity:'Leader',tcgType:'onepiece',apiSource:'mock',cost:'1',power:'5000',color:'Red',ability:'[Activate: Main] You may rest this Leader: Add up to 1 DON!! card from your DON!! deck and set it as active.'},{id:'mock-goku-1',name:'Son Goku',images:{small:'https://images.pokemontcg.io/base1/6.png',large:'https://images.pokemontcg.io/base1/6_hires.png'},set:{name:'Dragon Ball Super'},rarity:'Super Rare',tcgType:'dragonball',apiSource:'mock',cost:'4',power:'20000',color:'Orange',ability:'[Auto] When you play this card, draw 1 card.'},{id:'mock-black-lotus',name:'Black Lotus',images:{small:'https://images.pokemontcg.io/base1/2.png',large:'https://images.pokemontcg.io/base1/2_hires.png'},set:{name:'Alpha'},rarity:'Rare',tcgType:'magic',apiSource:'mock',cost:'0',type:'Artifact',ability:'{T}, Sacrifice Black Lotus: Add three mana of any one color.'},{id:'mock-agumon-1',name:'Agumon',images:{small:'https://images.pokemontcg.io/base1/32.png',large:'https://images.pokemontcg.io/base1/32_hires.png'},set:{name:'BT01 New Evolution'},rarity:'Common',tcgType:'digimon',apiSource:'mock',cost:'3',power:'2000',type:'Rookie',attribute:'Vaccine'},{id:'mock-naruto-1',name:'Naruto Uzumaki',images:{small:'https://images.pokemontcg.io/base1/44.png',large:'https://images.pokemontcg.io/base1/44_hires.png'},set:{name:'Union Arena'},rarity:'Rare',tcgType:'unionarena',apiSource:'mock',cost:'2',power:'3000',color:'Orange',ability:'Shadow Clone Jutsu: Create multiple copies to confuse enemies.'},{id:'mock-gundam-1',name:'RX-78-2 Gundam',images:{small:'https://images.pokemontcg.io/base1/7.png',large:'https://images.pokemontcg.io/base1/7_hires.png'},set:{name:'Mobile Suit Gundam'},rarity:'Ultra Rare',tcgType:'gundam',apiSource:'mock',cost:'5',power:'8000',type:'Mobile Suit',ability:'Beam Rifle: Deal 2000 damage to target enemy unit.'}];// Filtrar por t√©rmino de b√∫squeda\nreturn mockCards.filter(card=>{const matchesName=card.name.toLowerCase().includes(searchTerm.toLowerCase())||searchTerm.toLowerCase().includes(card.name.toLowerCase().substring(0,3));const matchesType=tcgType==='all'||card.tcgType===tcgType;return matchesName&&matchesType;});}// M√©todo para buscar en una API espec√≠fica usando nuestro proxy\nasync searchSpecificAPI(tcgType,searchTerm){let page=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;let pageSize=arguments.length>3&&arguments[3]!==undefined?arguments[3]:24;if(!searchTerm.trim()){return{cards:[],totalResults:0,errors:[]};}console.log(`üîç Buscando \"${searchTerm}\" en ${tcgType} via proxy`);try{// Construir URL de nuestro proxy\nconst proxyUrl=`/api/search?tcgType=${encodeURIComponent(tcgType)}&searchTerm=${encodeURIComponent(searchTerm)}&page=${page}&limit=${pageSize}`;console.log(`üì° Llamando a proxy: ${proxyUrl}`);const response=await fetch(proxyUrl);if(!response.ok){throw new Error(`Proxy error: ${response.status}`);}const data=await response.json();if(!data.success){throw new Error(data.error||'API proxy failed');}// Normalizar las cartas recibidas\nconst normalizedCards=this.normalizeCards(data.cards);const uniqueCards=this.removeDuplicates(normalizedCards);const sortedCards=this.sortByRelevance(uniqueCards,searchTerm);// Paginaci√≥n local (las APIs pueden devolver m√°s de lo que necesitamos)\nconst startIndex=(page-1)*pageSize;const paginatedCards=sortedCards.slice(startIndex,startIndex+pageSize);const result={cards:paginatedCards,totalResults:sortedCards.length,errors:[],page:page,totalPages:Math.ceil(sortedCards.length/pageSize),usingMockData:false};console.log(`‚úÖ B√∫squeda en ${tcgType} completada: ${sortedCards.length} cartas encontradas`);return result;}catch(error){console.error(`Error en b√∫squeda de ${tcgType}:`,error);// Fallback: usar datos de demostraci√≥n\nconsole.log('üìù Error en proxy - usando datos de demostraci√≥n como fallback');const mockCards=this.getMockCards(searchTerm,tcgType);const normalizedMockCards=this.normalizeCards(mockCards);const sortedCards=this.sortByRelevance(normalizedMockCards,searchTerm);const startIndex=(page-1)*pageSize;const paginatedCards=sortedCards.slice(startIndex,startIndex+pageSize);return{cards:paginatedCards,totalResults:sortedCards.length,errors:[{api:'Proxy',error:'Proxy no disponible - mostrando datos de demostraci√≥n'}],page:page,totalPages:Math.ceil(sortedCards.length/pageSize),usingMockData:true};}}// M√©todo principal para buscar en todas las APIs\nasync searchAllAPIs(searchTerm){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;let pageSize=arguments.length>2&&arguments[2]!==undefined?arguments[2]:24;let tcgFilter=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'all';if(!searchTerm.trim()){return{cards:[],totalResults:0,errors:[]};}const cacheKey=`${searchTerm}-${page}-${pageSize}-${tcgFilter}`;// Verificar cache\nif(this.cache.has(cacheKey)){const cached=this.cache.get(cacheKey);if(Date.now()-cached.timestamp<this.cacheTimeout){console.log('üöÄ Resultado obtenido desde cache');return cached.data;}this.cache.delete(cacheKey);}console.log(`üîç Buscando \"${searchTerm}\" en APIs externas (filtro: ${tcgFilter})`);// Usar datos de demostraci√≥n (activado por defecto para evitar CORS)\nif(this.useMockData){console.log('üìù Usando datos de demostraci√≥n');const mockCards=this.getMockCards(searchTerm,tcgFilter);const normalizedMockCards=this.normalizeCards(mockCards);const sortedCards=this.sortByRelevance(normalizedMockCards,searchTerm);const startIndex=(page-1)*pageSize;const paginatedCards=sortedCards.slice(startIndex,startIndex+pageSize);return{cards:paginatedCards,totalResults:sortedCards.length,errors:[{api:'Demo',error:'Modo demostraci√≥n activado - configura las API keys y cambia useMockData a false'}],page:page,totalPages:Math.ceil(sortedCards.length/pageSize),usingMockData:true};}let allCards=[];let errors=[];let successfulAPIs=0;try{var _allCards$;// Buscar en TCGS APIs - ahora incluye Pokemon tambi√©n\nconst tcgGames=['pokemon','onepiece','dragonball','digimon','magic','unionarena','gundam'];for(const game of tcgGames){if((tcgFilter==='all'||tcgFilter===game)&&this.tcgApiKey){try{const tcgResult=await this.searchTCGSAPI(game,searchTerm,1,30);if(tcgResult.cards&&tcgResult.cards.length>0){allCards=allCards.concat(tcgResult.cards);successfulAPIs++;console.log(`‚úÖ ${game} API: ${tcgResult.cards.length} cartas encontradas`);}}catch(error){console.warn(`‚ö†Ô∏è ${game} API fall√≥:`,error.message);errors.push({api:game,error:'Error de CORS o conectividad'});}}}// Si todas las APIs fallaron, usar datos de demostraci√≥n\nif(allCards.length===0&&successfulAPIs===0){console.log('üìù Todas las APIs fallaron - usando datos de demostraci√≥n');const mockCards=this.getMockCards(searchTerm,tcgFilter);allCards=mockCards;errors.push({api:'Fallback',error:'APIs no disponibles - mostrando datos de demostraci√≥n'});}// Normalizar y eliminar duplicados\nconst normalizedCards=this.normalizeCards(allCards);const uniqueCards=this.removeDuplicates(normalizedCards);// Ordenar por relevancia\nconst sortedCards=this.sortByRelevance(uniqueCards,searchTerm);// Paginaci√≥n\nconst startIndex=(page-1)*pageSize;const paginatedCards=sortedCards.slice(startIndex,startIndex+pageSize);const result={cards:paginatedCards,totalResults:sortedCards.length,errors:errors,page:page,totalPages:Math.ceil(sortedCards.length/pageSize),usingMockData:allCards.length>0&&((_allCards$=allCards[0])===null||_allCards$===void 0?void 0:_allCards$.apiSource)==='mock'};// Guardar en cache solo si obtuvimos resultados reales\nif(!result.usingMockData){this.cache.set(cacheKey,{data:result,timestamp:Date.now()});}console.log(`‚úÖ B√∫squeda completada: ${sortedCards.length} cartas encontradas (${successfulAPIs} APIs exitosas)`);return result;}catch(error){console.error('Error general en b√∫squeda de APIs:',error);// Fallback final: usar datos de demostraci√≥n\nconsole.log('üìù Error general - usando datos de demostraci√≥n como fallback');const mockCards=this.getMockCards(searchTerm,tcgFilter);const normalizedMockCards=this.normalizeCards(mockCards);const sortedCards=this.sortByRelevance(normalizedMockCards,searchTerm);const startIndex=(page-1)*pageSize;const paginatedCards=sortedCards.slice(startIndex,startIndex+pageSize);return{cards:paginatedCards,totalResults:sortedCards.length,errors:[{api:'Error',error:'Error de conectividad - mostrando datos de demostraci√≥n'}],page:page,totalPages:Math.ceil(sortedCards.length/pageSize),usingMockData:true};}}// Buscar en TCGS API\nasync searchTCGSAPI(tcgType,searchTerm){let page=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;let limit=arguments.length>3&&arguments[3]!==undefined?arguments[3]:30;if(!this.tcgApiKey){console.warn('‚ö†Ô∏è TCGS API key no configurada');return{cards:[]};}const apiEndpoints={onepiece:'/one-piece/cards',dragonball:'/dragon-ball-fusion/cards',digimon:'/digimon/cards',magic:'/magic/cards',unionarena:'/union-arena/cards',gundam:'/gundam/cards'};const endpoint=apiEndpoints[tcgType];if(!endpoint){console.warn(`‚ö†Ô∏è TCG tipo desconocido: ${tcgType}`);return{cards:[]};}try{const response=await fetch(`https://apitcg.com/api${endpoint}?name=${encodeURIComponent(searchTerm)}&limit=${limit}&page=${page}`,{headers:{'x-api-key':this.tcgApiKey}});if(!response.ok){throw new Error(`TCGS API error: ${response.status}`);}const data=await response.json();// Agregar tcgType a cada carta\nconst cards=(data.data||data.cards||[]).map(card=>({...card,tcgType:tcgType,apiSource:'tcgapis'}));return{cards};}catch(error){console.error(`Error en ${tcgType} API:`,error);throw error;}}// Obtener detalles de una carta espec√≠fica\nasync getCardDetails(cardId,tcgType){return this.getTCGSCardDetails(cardId,tcgType);}async getTCGSCardDetails(cardId,tcgType){const apiEndpoints={pokemon:'/pokemon/cards',onepiece:'/one-piece/cards',dragonball:'/dragon-ball-fusion/cards',digimon:'/digimon/cards',magic:'/magic/cards',unionarena:'/union-arena/cards',gundam:'/gundam/cards'};const endpoint=apiEndpoints[tcgType];if(!endpoint){return null;}try{const response=await fetch(`https://apitcg.com/api${endpoint}/${cardId}`,{headers:{'x-api-key':this.tcgApiKey}});if(!response.ok){throw new Error(`TCGS API error: ${response.status}`);}const data=await response.json();return this.normalizeTCGSCard(data.data||data,tcgType);}catch(error){console.error(`Error obteniendo detalles de carta ${tcgType}:`,error);return null;}}// Normalizar cartas usando solo formato TCGS API\nnormalizeCards(cards){return cards.map(card=>{return this.normalizeTCGSCard(card,card.tcgType);});}normalizeTCGSCard(card,tcgType){// Mapear nombres de TCG\nconst tcgNames={pokemon:'Pok√©mon TCG',onepiece:'One Piece',dragonball:'Dragon Ball',digimon:'Digimon',magic:'Magic: The Gathering',unionarena:'Union Arena',gundam:'Gundam'};// Funci√≥n helper para convertir valores a string seguro\nconst safeString=value=>{if(value===null||value===undefined)return'';if(typeof value==='object'){// Para objetos set, extraer name y series\nif(value.name){const name=value.name||'';const series=value.series||'';if(name&&series)return`${name}, ${series}`;else if(name)return name;else return'Desconocido';}// Para otros objetos, convertir a JSON como fallback\nreturn JSON.stringify(value);}return String(value);};// Funci√≥n helper para obtener imagen\nconst getImageUrl=card=>{var _card$images;if(card.image)return safeString(card.image);if((_card$images=card.images)!==null&&_card$images!==void 0&&_card$images.small)return safeString(card.images.small);if(card.card_image)return safeString(card.card_image);return'';};// Funci√≥n para procesar arrays de forma segura\nconst safeArray=value=>{if(!Array.isArray(value))return[];return value.map(item=>{if(typeof item==='object'){// Para objetos como attacks/abilities, mantener estructura pero convertir valores\nconst safeItem={};for(const[key,val]of Object.entries(item)){safeItem[key]=safeString(val);}return safeItem;}return safeString(item);});};return{id:safeString(card.id||card._id||`${tcgType}-${Date.now()}`),name:safeString(card.name||card.card_name||'Sin nombre'),images:{small:getImageUrl(card),large:getImageUrl(card)},set:{name:safeString(card.set||card.set_name||card.expansion||'Desconocido')},rarity:safeString(card.rarity||'Com√∫n'),tcgType:tcgType,tcgName:tcgNames[tcgType]||tcgType,apiSource:safeString(card.apiSource||'tcgapis'),// Campos espec√≠ficos por TCG - todos convertidos a string\ncost:safeString(card.cost||card.play_cost||''),power:safeString(card.power||card.battle_power||''),color:safeString(card.color||card.colours||''),type:safeString(card.type||card.card_type||''),attribute:safeString(card.attribute||''),ability:safeString(card.ability||card.card_text||''),effect:safeString(card.effect||card.effect_text||''),flavorText:safeString(card.flavor_text||card.flavour_text||''),// Campos espec√≠ficos de Pokemon (si est√°n disponibles)\nhp:safeString(card.hp||''),types:safeArray(card.types||[]),attacks:safeArray(card.attacks||[]),abilities:safeArray(card.abilities||[]),artist:safeString(card.artist||''),// Precios y legalidades (mantener objetos para el modal)\ntcgplayer:card.tcgplayer||null,legalities:card.legalities||null};}// Eliminar cartas duplicadas bas√°ndose en el ID\nremoveDuplicates(cards){const seen=new Set();return cards.filter(card=>{const key=`${card.id}-${card.tcgType}`;if(seen.has(key)){return false;}seen.add(key);return true;});}// Ordenar por relevancia (nombre m√°s similar primero)\nsortByRelevance(cards,searchTerm){const term=searchTerm.toLowerCase().trim();return cards.sort((a,b)=>{const aName=a.name.toLowerCase();const bName=b.name.toLowerCase();// Coincidencia exacta\nif(aName===term&&bName!==term)return-1;if(bName===term&&aName!==term)return 1;// Comienza con el t√©rmino\nconst aStarts=aName.startsWith(term);const bStarts=bName.startsWith(term);if(aStarts&&!bStarts)return-1;if(bStarts&&!aStarts)return 1;// Contiene el t√©rmino\nconst aContains=aName.includes(term);const bContains=bName.includes(term);if(aContains&&!bContains)return-1;if(bContains&&!aContains)return 1;// Por longitud del nombre (m√°s corto primero)\nreturn aName.length-bName.length;});}// Limpiar cache manualmente\nclearCache(){this.cache.clear();console.log('üßπ Cache de API limpiado');}// Obtener estad√≠sticas del cache\ngetCacheStats(){return{size:this.cache.size,entries:Array.from(this.cache.keys())};}// M√©todo para activar/desactivar datos de demostraci√≥n\nsetUseMockData(useMock){this.useMockData=useMock;console.log(`üìù Modo demostraci√≥n: ${useMock?'ACTIVADO':'DESACTIVADO'}`);}}// Exportar como singleton\nconst apiSearchService=new APISearchService();export default apiSearchService;","map":{"version":3,"names":["APISearchService","constructor","cache","Map","cacheTimeout","tcgApiKey","process","env","REACT_APP_TCG_API_KEY","useMockData","getMockCards","searchTerm","tcgType","arguments","length","undefined","mockCards","id","name","images","small","large","set","rarity","apiSource","hp","types","attacks","damage","cost","flavorText","artist","power","color","ability","type","attribute","filter","card","matchesName","toLowerCase","includes","substring","matchesType","searchSpecificAPI","page","pageSize","trim","cards","totalResults","errors","console","log","proxyUrl","encodeURIComponent","response","fetch","ok","Error","status","data","json","success","error","normalizedCards","normalizeCards","uniqueCards","removeDuplicates","sortedCards","sortByRelevance","startIndex","paginatedCards","slice","result","totalPages","Math","ceil","usingMockData","normalizedMockCards","api","searchAllAPIs","tcgFilter","cacheKey","has","cached","get","Date","now","timestamp","delete","allCards","successfulAPIs","_allCards$","tcgGames","game","tcgResult","searchTCGSAPI","concat","warn","message","push","limit","apiEndpoints","onepiece","dragonball","digimon","magic","unionarena","gundam","endpoint","headers","map","getCardDetails","cardId","getTCGSCardDetails","pokemon","normalizeTCGSCard","tcgNames","safeString","value","series","JSON","stringify","String","getImageUrl","_card$images","image","card_image","safeArray","Array","isArray","item","safeItem","key","val","Object","entries","_id","card_name","set_name","expansion","tcgName","play_cost","battle_power","colours","card_type","card_text","effect","effect_text","flavor_text","flavour_text","abilities","tcgplayer","legalities","seen","Set","add","term","sort","a","b","aName","bName","aStarts","startsWith","bStarts","aContains","bContains","clearCache","clear","getCacheStats","size","from","keys","setUseMockData","useMock","apiSearchService"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/services/apiSearchService.js"],"sourcesContent":["// src/services/apiSearchService.js\nclass APISearchService {\n  constructor() {\n    this.cache = new Map();\n    this.cacheTimeout = 5 * 60 * 1000; // 5 minutos\n    this.tcgApiKey = process.env.REACT_APP_TCG_API_KEY;\n    this.useMockData = false; // Desactivado - usando proxy para evitar CORS\n  }\n\n  // Mock data para cuando las APIs fallen\n  getMockCards(searchTerm, tcgType = 'all') {\n    const mockCards = [\n      {\n        id: 'mock-charizard-1',\n        name: 'Charizard',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/4.png',\n          large: 'https://images.pokemontcg.io/base1/4_hires.png'\n        },\n        set: { name: 'Base Set' },\n        rarity: 'Rare Holo',\n        tcgType: 'pokemon',\n        apiSource: 'mock',\n        hp: 120,\n        types: ['Fire'],\n        attacks: [\n          { name: 'Fire Spin', damage: '100', cost: ['Fire', 'Fire', 'Fire', 'Fire'] }\n        ],\n        flavorText: 'Spits fire that is hot enough to melt boulders.',\n        artist: 'Mitsuhiro Arita'\n      },\n      {\n        id: 'mock-pikachu-1',\n        name: 'Pikachu',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/58.png',\n          large: 'https://images.pokemontcg.io/base1/58_hires.png'\n        },\n        set: { name: 'Base Set' },\n        rarity: 'Common',\n        tcgType: 'pokemon',\n        apiSource: 'mock',\n        hp: 60,\n        types: ['Lightning'],\n        attacks: [\n          { name: 'Thunder Jolt', damage: '30', cost: ['Lightning', 'Colorless'] }\n        ],\n        flavorText: 'When several of these Pok√©mon gather, their electricity could build and cause lightning storms.',\n        artist: 'Atsuko Nishida'\n      },\n      {\n        id: 'mock-luffy-1',\n        name: 'Monkey D. Luffy',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/25.png',\n          large: 'https://images.pokemontcg.io/base1/25_hires.png'\n        },\n        set: { name: 'Romance Dawn' },\n        rarity: 'Leader',\n        tcgType: 'onepiece',\n        apiSource: 'mock',\n        cost: '1',\n        power: '5000',\n        color: 'Red',\n        ability: '[Activate: Main] You may rest this Leader: Add up to 1 DON!! card from your DON!! deck and set it as active.'\n      },\n      {\n        id: 'mock-goku-1',\n        name: 'Son Goku',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/6.png',\n          large: 'https://images.pokemontcg.io/base1/6_hires.png'\n        },\n        set: { name: 'Dragon Ball Super' },\n        rarity: 'Super Rare',\n        tcgType: 'dragonball',\n        apiSource: 'mock',\n        cost: '4',\n        power: '20000',\n        color: 'Orange',\n        ability: '[Auto] When you play this card, draw 1 card.'\n      },\n      {\n        id: 'mock-black-lotus',\n        name: 'Black Lotus',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/2.png',\n          large: 'https://images.pokemontcg.io/base1/2_hires.png'\n        },\n        set: { name: 'Alpha' },\n        rarity: 'Rare',\n        tcgType: 'magic',\n        apiSource: 'mock',\n        cost: '0',\n        type: 'Artifact',\n        ability: '{T}, Sacrifice Black Lotus: Add three mana of any one color.'\n      },\n      {\n        id: 'mock-agumon-1',\n        name: 'Agumon',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/32.png',\n          large: 'https://images.pokemontcg.io/base1/32_hires.png'\n        },\n        set: { name: 'BT01 New Evolution' },\n        rarity: 'Common',\n        tcgType: 'digimon',\n        apiSource: 'mock',\n        cost: '3',\n        power: '2000',\n        type: 'Rookie',\n        attribute: 'Vaccine'\n      },\n      {\n        id: 'mock-naruto-1',\n        name: 'Naruto Uzumaki',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/44.png',\n          large: 'https://images.pokemontcg.io/base1/44_hires.png'\n        },\n        set: { name: 'Union Arena' },\n        rarity: 'Rare',\n        tcgType: 'unionarena',\n        apiSource: 'mock',\n        cost: '2',\n        power: '3000',\n        color: 'Orange',\n        ability: 'Shadow Clone Jutsu: Create multiple copies to confuse enemies.'\n      },\n      {\n        id: 'mock-gundam-1',\n        name: 'RX-78-2 Gundam',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/7.png',\n          large: 'https://images.pokemontcg.io/base1/7_hires.png'\n        },\n        set: { name: 'Mobile Suit Gundam' },\n        rarity: 'Ultra Rare',\n        tcgType: 'gundam',\n        apiSource: 'mock',\n        cost: '5',\n        power: '8000',\n        type: 'Mobile Suit',\n        ability: 'Beam Rifle: Deal 2000 damage to target enemy unit.'\n      }\n    ];\n\n    // Filtrar por t√©rmino de b√∫squeda\n    return mockCards.filter(card => {\n      const matchesName = card.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         searchTerm.toLowerCase().includes(card.name.toLowerCase().substring(0, 3));\n      const matchesType = tcgType === 'all' || card.tcgType === tcgType;\n      return matchesName && matchesType;\n    });\n  }\n\n  // M√©todo para buscar en una API espec√≠fica usando nuestro proxy\n  async searchSpecificAPI(tcgType, searchTerm, page = 1, pageSize = 24) {\n    if (!searchTerm.trim()) {\n      return { cards: [], totalResults: 0, errors: [] };\n    }\n\n    console.log(`üîç Buscando \"${searchTerm}\" en ${tcgType} via proxy`);\n\n    try {\n      // Construir URL de nuestro proxy\n      const proxyUrl = `/api/search?tcgType=${encodeURIComponent(tcgType)}&searchTerm=${encodeURIComponent(searchTerm)}&page=${page}&limit=${pageSize}`;\n      \n      console.log(`üì° Llamando a proxy: ${proxyUrl}`);\n\n      const response = await fetch(proxyUrl);\n      \n      if (!response.ok) {\n        throw new Error(`Proxy error: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'API proxy failed');\n      }\n\n      // Normalizar las cartas recibidas\n      const normalizedCards = this.normalizeCards(data.cards);\n      const uniqueCards = this.removeDuplicates(normalizedCards);\n      const sortedCards = this.sortByRelevance(uniqueCards, searchTerm);\n\n      // Paginaci√≥n local (las APIs pueden devolver m√°s de lo que necesitamos)\n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n\n      const result = {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: false\n      };\n\n      console.log(`‚úÖ B√∫squeda en ${tcgType} completada: ${sortedCards.length} cartas encontradas`);\n      return result;\n\n    } catch (error) {\n      console.error(`Error en b√∫squeda de ${tcgType}:`, error);\n      \n      // Fallback: usar datos de demostraci√≥n\n      console.log('üìù Error en proxy - usando datos de demostraci√≥n como fallback');\n      const mockCards = this.getMockCards(searchTerm, tcgType);\n      const normalizedMockCards = this.normalizeCards(mockCards);\n      const sortedCards = this.sortByRelevance(normalizedMockCards, searchTerm);\n      \n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n\n      return {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [{ api: 'Proxy', error: 'Proxy no disponible - mostrando datos de demostraci√≥n' }],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: true\n      };\n    }\n  }\n\n  // M√©todo principal para buscar en todas las APIs\n  async searchAllAPIs(searchTerm, page = 1, pageSize = 24, tcgFilter = 'all') {\n    if (!searchTerm.trim()) {\n      return { cards: [], totalResults: 0, errors: [] };\n    }\n\n    const cacheKey = `${searchTerm}-${page}-${pageSize}-${tcgFilter}`;\n    \n    // Verificar cache\n    if (this.cache.has(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      if (Date.now() - cached.timestamp < this.cacheTimeout) {\n        console.log('üöÄ Resultado obtenido desde cache');\n        return cached.data;\n      }\n      this.cache.delete(cacheKey);\n    }\n\n    console.log(`üîç Buscando \"${searchTerm}\" en APIs externas (filtro: ${tcgFilter})`);\n\n    // Usar datos de demostraci√≥n (activado por defecto para evitar CORS)\n    if (this.useMockData) {\n      console.log('üìù Usando datos de demostraci√≥n');\n      const mockCards = this.getMockCards(searchTerm, tcgFilter);\n      const normalizedMockCards = this.normalizeCards(mockCards);\n      const sortedCards = this.sortByRelevance(normalizedMockCards, searchTerm);\n      \n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n\n      return {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [{ api: 'Demo', error: 'Modo demostraci√≥n activado - configura las API keys y cambia useMockData a false' }],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: true\n      };\n    }\n\n    let allCards = [];\n    let errors = [];\n    let successfulAPIs = 0;\n\n    try {\n      // Buscar en TCGS APIs - ahora incluye Pokemon tambi√©n\n      const tcgGames = ['pokemon', 'onepiece', 'dragonball', 'digimon', 'magic', 'unionarena', 'gundam'];\n      for (const game of tcgGames) {\n        if ((tcgFilter === 'all' || tcgFilter === game) && this.tcgApiKey) {\n          try {\n            const tcgResult = await this.searchTCGSAPI(game, searchTerm, 1, 30);\n            if (tcgResult.cards && tcgResult.cards.length > 0) {\n              allCards = allCards.concat(tcgResult.cards);\n              successfulAPIs++;\n              console.log(`‚úÖ ${game} API: ${tcgResult.cards.length} cartas encontradas`);\n            }\n          } catch (error) {\n            console.warn(`‚ö†Ô∏è ${game} API fall√≥:`, error.message);\n            errors.push({ api: game, error: 'Error de CORS o conectividad' });\n          }\n        }\n      }\n\n      // Si todas las APIs fallaron, usar datos de demostraci√≥n\n      if (allCards.length === 0 && successfulAPIs === 0) {\n        console.log('üìù Todas las APIs fallaron - usando datos de demostraci√≥n');\n        const mockCards = this.getMockCards(searchTerm, tcgFilter);\n        allCards = mockCards;\n        errors.push({ api: 'Fallback', error: 'APIs no disponibles - mostrando datos de demostraci√≥n' });\n      }\n\n      // Normalizar y eliminar duplicados\n      const normalizedCards = this.normalizeCards(allCards);\n      const uniqueCards = this.removeDuplicates(normalizedCards);\n\n      // Ordenar por relevancia\n      const sortedCards = this.sortByRelevance(uniqueCards, searchTerm);\n\n      // Paginaci√≥n\n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n\n      const result = {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: errors,\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: allCards.length > 0 && allCards[0]?.apiSource === 'mock'\n      };\n\n      // Guardar en cache solo si obtuvimos resultados reales\n      if (!result.usingMockData) {\n        this.cache.set(cacheKey, {\n          data: result,\n          timestamp: Date.now()\n        });\n      }\n\n      console.log(`‚úÖ B√∫squeda completada: ${sortedCards.length} cartas encontradas (${successfulAPIs} APIs exitosas)`);\n      return result;\n\n    } catch (error) {\n      console.error('Error general en b√∫squeda de APIs:', error);\n      \n      // Fallback final: usar datos de demostraci√≥n\n      console.log('üìù Error general - usando datos de demostraci√≥n como fallback');\n      const mockCards = this.getMockCards(searchTerm, tcgFilter);\n      const normalizedMockCards = this.normalizeCards(mockCards);\n      const sortedCards = this.sortByRelevance(normalizedMockCards, searchTerm);\n      \n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n\n      return {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [{ api: 'Error', error: 'Error de conectividad - mostrando datos de demostraci√≥n' }],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: true\n      };\n    }\n  }\n\n\n  // Buscar en TCGS API\n  async searchTCGSAPI(tcgType, searchTerm, page = 1, limit = 30) {\n    if (!this.tcgApiKey) {\n      console.warn('‚ö†Ô∏è TCGS API key no configurada');\n      return { cards: [] };\n    }\n\n    const apiEndpoints = {\n      onepiece: '/one-piece/cards',\n      dragonball: '/dragon-ball-fusion/cards', \n      digimon: '/digimon/cards',\n      magic: '/magic/cards',\n      unionarena: '/union-arena/cards',\n      gundam: '/gundam/cards'\n    };\n\n    const endpoint = apiEndpoints[tcgType];\n    if (!endpoint) {\n      console.warn(`‚ö†Ô∏è TCG tipo desconocido: ${tcgType}`);\n      return { cards: [] };\n    }\n\n    try {\n      const response = await fetch(\n        `https://apitcg.com/api${endpoint}?name=${encodeURIComponent(searchTerm)}&limit=${limit}&page=${page}`,\n        {\n          headers: {\n            'x-api-key': this.tcgApiKey\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`TCGS API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Agregar tcgType a cada carta\n      const cards = (data.data || data.cards || []).map(card => ({\n        ...card,\n        tcgType: tcgType,\n        apiSource: 'tcgapis'\n      }));\n\n      return { cards };\n\n    } catch (error) {\n      console.error(`Error en ${tcgType} API:`, error);\n      throw error;\n    }\n  }\n\n  // Obtener detalles de una carta espec√≠fica\n  async getCardDetails(cardId, tcgType) {\n    return this.getTCGSCardDetails(cardId, tcgType);\n  }\n\n  async getTCGSCardDetails(cardId, tcgType) {\n    const apiEndpoints = {\n      pokemon: '/pokemon/cards',\n      onepiece: '/one-piece/cards',\n      dragonball: '/dragon-ball-fusion/cards',\n      digimon: '/digimon/cards', \n      magic: '/magic/cards',\n      unionarena: '/union-arena/cards',\n      gundam: '/gundam/cards'\n    };\n\n    const endpoint = apiEndpoints[tcgType];\n    if (!endpoint) {\n      return null;\n    }\n\n    try {\n      const response = await fetch(\n        `https://apitcg.com/api${endpoint}/${cardId}`,\n        {\n          headers: {\n            'x-api-key': this.tcgApiKey\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`TCGS API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return this.normalizeTCGSCard(data.data || data, tcgType);\n\n    } catch (error) {\n      console.error(`Error obteniendo detalles de carta ${tcgType}:`, error);\n      return null;\n    }\n  }\n\n  // Normalizar cartas usando solo formato TCGS API\n  normalizeCards(cards) {\n    return cards.map(card => {\n      return this.normalizeTCGSCard(card, card.tcgType);\n    });\n  }\n\n\n  normalizeTCGSCard(card, tcgType) {\n    // Mapear nombres de TCG\n    const tcgNames = {\n      pokemon: 'Pok√©mon TCG',\n      onepiece: 'One Piece',\n      dragonball: 'Dragon Ball',\n      digimon: 'Digimon',\n      magic: 'Magic: The Gathering',\n      unionarena: 'Union Arena',\n      gundam: 'Gundam'\n    };\n\n    // Funci√≥n helper para convertir valores a string seguro\n    const safeString = (value) => {\n      if (value === null || value === undefined) return '';\n      if (typeof value === 'object') {\n        // Para objetos set, extraer name y series\n        if (value.name) {\n          const name = value.name || '';\n          const series = value.series || '';\n          if (name && series) return `${name}, ${series}`;\n          else if (name) return name;\n          else return 'Desconocido';\n        }\n        // Para otros objetos, convertir a JSON como fallback\n        return JSON.stringify(value);\n      }\n      return String(value);\n    };\n\n    // Funci√≥n helper para obtener imagen\n    const getImageUrl = (card) => {\n      if (card.image) return safeString(card.image);\n      if (card.images?.small) return safeString(card.images.small);\n      if (card.card_image) return safeString(card.card_image);\n      return '';\n    };\n\n    // Funci√≥n para procesar arrays de forma segura\n    const safeArray = (value) => {\n      if (!Array.isArray(value)) return [];\n      return value.map(item => {\n        if (typeof item === 'object') {\n          // Para objetos como attacks/abilities, mantener estructura pero convertir valores\n          const safeItem = {};\n          for (const [key, val] of Object.entries(item)) {\n            safeItem[key] = safeString(val);\n          }\n          return safeItem;\n        }\n        return safeString(item);\n      });\n    };\n\n    return {\n      id: safeString(card.id || card._id || `${tcgType}-${Date.now()}`),\n      name: safeString(card.name || card.card_name || 'Sin nombre'),\n      images: {\n        small: getImageUrl(card),\n        large: getImageUrl(card)\n      },\n      set: {\n        name: safeString(card.set || card.set_name || card.expansion || 'Desconocido')\n      },\n      rarity: safeString(card.rarity || 'Com√∫n'),\n      tcgType: tcgType,\n      tcgName: tcgNames[tcgType] || tcgType,\n      apiSource: safeString(card.apiSource || 'tcgapis'),\n      \n      // Campos espec√≠ficos por TCG - todos convertidos a string\n      cost: safeString(card.cost || card.play_cost || ''),\n      power: safeString(card.power || card.battle_power || ''),\n      color: safeString(card.color || card.colours || ''),\n      type: safeString(card.type || card.card_type || ''),\n      attribute: safeString(card.attribute || ''),\n      ability: safeString(card.ability || card.card_text || ''),\n      effect: safeString(card.effect || card.effect_text || ''),\n      flavorText: safeString(card.flavor_text || card.flavour_text || ''),\n      \n      // Campos espec√≠ficos de Pokemon (si est√°n disponibles)\n      hp: safeString(card.hp || ''),\n      types: safeArray(card.types || []),\n      attacks: safeArray(card.attacks || []),\n      abilities: safeArray(card.abilities || []),\n      artist: safeString(card.artist || ''),\n      \n      // Precios y legalidades (mantener objetos para el modal)\n      tcgplayer: card.tcgplayer || null,\n      legalities: card.legalities || null\n    };\n  }\n\n  // Eliminar cartas duplicadas bas√°ndose en el ID\n  removeDuplicates(cards) {\n    const seen = new Set();\n    return cards.filter(card => {\n      const key = `${card.id}-${card.tcgType}`;\n      if (seen.has(key)) {\n        return false;\n      }\n      seen.add(key);\n      return true;\n    });\n  }\n\n  // Ordenar por relevancia (nombre m√°s similar primero)\n  sortByRelevance(cards, searchTerm) {\n    const term = searchTerm.toLowerCase().trim();\n    \n    return cards.sort((a, b) => {\n      const aName = a.name.toLowerCase();\n      const bName = b.name.toLowerCase();\n      \n      // Coincidencia exacta\n      if (aName === term && bName !== term) return -1;\n      if (bName === term && aName !== term) return 1;\n      \n      // Comienza con el t√©rmino\n      const aStarts = aName.startsWith(term);\n      const bStarts = bName.startsWith(term);\n      if (aStarts && !bStarts) return -1;\n      if (bStarts && !aStarts) return 1;\n      \n      // Contiene el t√©rmino\n      const aContains = aName.includes(term);\n      const bContains = bName.includes(term);\n      if (aContains && !bContains) return -1;\n      if (bContains && !aContains) return 1;\n      \n      // Por longitud del nombre (m√°s corto primero)\n      return aName.length - bName.length;\n    });\n  }\n\n  // Limpiar cache manualmente\n  clearCache() {\n    this.cache.clear();\n    console.log('üßπ Cache de API limpiado');\n  }\n\n  // Obtener estad√≠sticas del cache\n  getCacheStats() {\n    return {\n      size: this.cache.size,\n      entries: Array.from(this.cache.keys())\n    };\n  }\n\n  // M√©todo para activar/desactivar datos de demostraci√≥n\n  setUseMockData(useMock) {\n    this.useMockData = useMock;\n    console.log(`üìù Modo demostraci√≥n: ${useMock ? 'ACTIVADO' : 'DESACTIVADO'}`);\n  }\n}\n\n// Exportar como singleton\nconst apiSearchService = new APISearchService();\nexport default apiSearchService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}