{"ast":null,"code":"// src/services/verificationService.js\n// Servicio para verificación de identidad y datos de usuario\n// FIREBASE REMOVED - TODO: Replace with backend API\n// FIREBASE REMOVED - TODO: Replace with backend API\nimport{validateCedulaFormat,validatePhoneFormat}from'../utils/validation';class VerificationService{/**\n   * Verifica la cédula de un usuario\n   * En un sistema real, esto haría una consulta a la TSE (Tribunal Supremo de Elecciones)\n   * Por ahora, solo validamos el formato\n   */async verifyCedula(userId,cedula,fullName){try{// TODO: Replace with backend API calls\nconsole.log('🚧 VerificationService: Firebase code commented out - using mock verification');// Validar formato\nconst validation=validateCedulaFormat(cedula);if(!validation.valid){return{success:false,error:validation.error};}// En un sistema real, aquí haríamos la consulta a la TSE\n// Por ahora, simulamos una verificación exitosa si el formato es válido\nconst isValid=await this.simulateTSEVerification(validation.cleanCedula,fullName);if(isValid){// FIREBASE CODE COMMENTED OUT - REPLACE WITH BACKEND API\n/*\n        await updateDoc(doc(db, 'users', userId), {\n          'verification.identity': true,\n          'verification.cedulaVerifiedAt': new Date(),\n          'verification.cedulaNumber': validation.formatted,\n          'verificationStatus.cedula': true,\n          'fullName': fullName,\n          'updatedAt': new Date()\n        });\n        */// Mock verification update for development\nconsole.log('Mock cedula verification completed for user:',userId);return{success:true,message:'🚧 Funcionalidad en desarrollo - Cédula verificada exitosamente (simulado)'};}else{return{success:false,error:'No se pudo verificar la cédula. Verifica que los datos sean correctos.'};}}catch(error){console.error('Error verificando cédula:',error);return{success:false,error:'Error interno del servidor'};}}/**\n   * Verifica el número de teléfono\n   * En un sistema real, enviaría un SMS con código de verificación\n   */async verifyPhone(userId,phone){try{// Validar formato\nconst validation=validatePhoneFormat(phone);if(!validation.valid){return{success:false,error:validation.error};}// Generar código de verificación\nconst verificationCode=this.generateVerificationCode();// FIREBASE CODE COMMENTED OUT - REPLACE WITH BACKEND API\n/*\n      const expiresAt = new Date(Date.now() + 5 * 60 * 1000);\n      \n      await updateDoc(doc(db, 'users', userId), {\n        'phoneVerification.code': verificationCode,\n        'phoneVerification.expiresAt': expiresAt,\n        'phoneVerification.phone': validation.formatted,\n        'phoneVerification.attempts': 0,\n        'updatedAt': new Date()\n      });\n      */// Mock phone verification for development\nconsole.log('Mock phone verification code generated for user:',userId);// En un sistema real, aquí enviaríamos el SMS\nconsole.log(`Código de verificación para ${validation.formatted}: ${verificationCode}`);return{success:true,message:`🚧 Funcionalidad en desarrollo - Código enviado a ${validation.formatted} (simulado)`,// En desarrollo, devolvemos el código para testing\ndevelopmentCode:process.env.NODE_ENV==='development'?verificationCode:undefined};}catch(error){console.error('Error enviando código de verificación:',error);return{success:false,error:'Error enviando código de verificación'};}}/**\n   * Confirma el código de verificación de teléfono\n   */async confirmPhoneVerification(userId,code){try{// TODO: Replace with backend API calls\nconsole.log('🚧 VerificationService: Firebase phone confirmation commented out - using mock confirmation');// FIREBASE CODE COMMENTED OUT - REPLACE WITH BACKEND API\n/*\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      if (!userDoc.exists()) {\n        return { success: false, error: 'Usuario no encontrado' };\n      }\n\n      const userData = userDoc.data();\n      const phoneVerification = userData.phoneVerification;\n\n      if (!phoneVerification || !phoneVerification.code) {\n        return { success: false, error: 'No hay verificación pendiente' };\n      }\n\n      // Verificar si el código expiró\n      const now = new Date();\n      if (now > phoneVerification.expiresAt.toDate()) {\n        return { success: false, error: 'El código ha expirado' };\n      }\n\n      // Verificar intentos\n      if (phoneVerification.attempts >= 3) {\n        return { success: false, error: 'Demasiados intentos. Solicita un nuevo código' };\n      }\n\n      // Verificar código\n      if (code !== phoneVerification.code) {\n        // Incrementar intentos\n        await updateDoc(doc(db, 'users', userId), {\n          'phoneVerification.attempts': (phoneVerification.attempts || 0) + 1,\n          'updatedAt': new Date()\n        });\n\n        return { success: false, error: 'Código incorrecto' };\n      }\n\n      // Código correcto - marcar como verificado\n      await updateDoc(doc(db, 'users', userId), {\n        'verification.phone': true,\n        'verification.phoneVerifiedAt': new Date(),\n        'verificationStatus.phone': true,\n        'phone': phoneVerification.phone,\n        // Limpiar datos temporales\n        'phoneVerification': null,\n        'updatedAt': new Date()\n      });\n      */// Mock phone confirmation for development\nconsole.log('Mock phone confirmation for user:',userId,'with code:',code);return{success:true,message:'🚧 Funcionalidad en desarrollo - Teléfono verificado exitosamente (simulado)'};}catch(error){console.error('Error confirmando verificación:',error);return{success:false,error:'Error interno del servidor'};}}/**\n   * Obtiene el estado de verificación de un usuario\n   */async getVerificationStatus(userId){try{// TODO: Replace with backend API calls\nconsole.log('🚧 VerificationService: Firebase status check commented out - using mock status');// FIREBASE CODE COMMENTED OUT - REPLACE WITH BACKEND API\n/*\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      if (!userDoc.exists()) {\n        return null;\n      }\n\n      const userData = userDoc.data();\n      return {\n        email: userData.verification?.email || false,\n        phone: userData.verification?.phone || false,\n        identity: userData.verification?.identity || false,\n        isFullyVerified: (userData.verification?.email && userData.verification?.phone && userData.verification?.identity) || false\n      };\n      */// Mock verification status for development\nreturn{email:true,// Mock as verified\nphone:false,identity:false,isFullyVerified:false};}catch(error){console.error('Error obteniendo estado de verificación:',error);return null;}}/**\n   * Verifica si un usuario puede realizar transacciones P2P\n   * Requiere teléfono y cédula verificados\n   */async canUseP2P(userId){const status=await this.getVerificationStatus(userId);return status&&status.phone&&status.identity;}// Utilidades privadas\n/**\n   * Simula verificación con TSE\n   * En un sistema real, esto haría una consulta a la API del TSE\n   */async simulateTSEVerification(cedula,fullName){// Simular delay de API\nawait new Promise(resolve=>setTimeout(resolve,1000));// En desarrollo, aceptamos cualquier cédula con formato válido\nif(process.env.NODE_ENV==='development'){return true;}// En producción, aquí haríamos la consulta real a TSE\n// return await this.queryTSEDatabase(cedula, fullName);\nreturn true;// Por ahora, aceptamos todas\n}/**\n   * Genera código de verificación de 6 dígitos\n   */generateVerificationCode(){return Math.floor(100000+Math.random()*900000).toString();}/**\n   * Envía SMS (simulado)\n   * En producción, usaría un servicio como Twilio o similar\n   */async sendSMS(phone,message){// En desarrollo, solo log\nif(process.env.NODE_ENV==='development'){console.log(`SMS a ${phone}: ${message}`);return{success:true};}// En producción, integración con servicio SMS\n// return await this.smsProvider.send(phone, message);\nreturn{success:true};// Por ahora\n}/**\n   * Limpia códigos de verificación expirados\n   * Esta función debería ejecutarse periódicamente via Cloud Function\n   */async cleanupExpiredCodes(){// Esta lógica estaría en una Cloud Function\nconsole.log('Limpiando códigos expirados...');}}// Instancia singleton\nconst verificationService=new VerificationService();export default verificationService;","map":{"version":3,"names":["validateCedulaFormat","validatePhoneFormat","VerificationService","verifyCedula","userId","cedula","fullName","console","log","validation","valid","success","error","isValid","simulateTSEVerification","cleanCedula","message","verifyPhone","phone","verificationCode","generateVerificationCode","formatted","developmentCode","process","env","NODE_ENV","undefined","confirmPhoneVerification","code","getVerificationStatus","email","identity","isFullyVerified","canUseP2P","status","Promise","resolve","setTimeout","Math","floor","random","toString","sendSMS","cleanupExpiredCodes","verificationService"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/services/verificationService.js"],"sourcesContent":["// src/services/verificationService.js\n// Servicio para verificación de identidad y datos de usuario\n\n// FIREBASE REMOVED - TODO: Replace with backend API\n// FIREBASE REMOVED - TODO: Replace with backend API\nimport { validateCedulaFormat, validatePhoneFormat } from '../utils/validation';\n\nclass VerificationService {\n  \n  /**\n   * Verifica la cédula de un usuario\n   * En un sistema real, esto haría una consulta a la TSE (Tribunal Supremo de Elecciones)\n   * Por ahora, solo validamos el formato\n   */\n  async verifyCedula(userId, cedula, fullName) {\n    try {\n      // TODO: Replace with backend API calls\n      console.log('🚧 VerificationService: Firebase code commented out - using mock verification');\n      \n      // Validar formato\n      const validation = validateCedulaFormat(cedula);\n      if (!validation.valid) {\n        return {\n          success: false,\n          error: validation.error\n        };\n      }\n\n      // En un sistema real, aquí haríamos la consulta a la TSE\n      // Por ahora, simulamos una verificación exitosa si el formato es válido\n      const isValid = await this.simulateTSEVerification(validation.cleanCedula, fullName);\n      \n      if (isValid) {\n        // FIREBASE CODE COMMENTED OUT - REPLACE WITH BACKEND API\n        /*\n        await updateDoc(doc(db, 'users', userId), {\n          'verification.identity': true,\n          'verification.cedulaVerifiedAt': new Date(),\n          'verification.cedulaNumber': validation.formatted,\n          'verificationStatus.cedula': true,\n          'fullName': fullName,\n          'updatedAt': new Date()\n        });\n        */\n\n        // Mock verification update for development\n        console.log('Mock cedula verification completed for user:', userId);\n\n        return {\n          success: true,\n          message: '🚧 Funcionalidad en desarrollo - Cédula verificada exitosamente (simulado)'\n        };\n      } else {\n        return {\n          success: false,\n          error: 'No se pudo verificar la cédula. Verifica que los datos sean correctos.'\n        };\n      }\n\n    } catch (error) {\n      console.error('Error verificando cédula:', error);\n      return {\n        success: false,\n        error: 'Error interno del servidor'\n      };\n    }\n  }\n\n  /**\n   * Verifica el número de teléfono\n   * En un sistema real, enviaría un SMS con código de verificación\n   */\n  async verifyPhone(userId, phone) {\n    try {\n      // Validar formato\n      const validation = validatePhoneFormat(phone);\n      if (!validation.valid) {\n        return {\n          success: false,\n          error: validation.error\n        };\n      }\n\n      // Generar código de verificación\n      const verificationCode = this.generateVerificationCode();\n      \n      // FIREBASE CODE COMMENTED OUT - REPLACE WITH BACKEND API\n      /*\n      const expiresAt = new Date(Date.now() + 5 * 60 * 1000);\n      \n      await updateDoc(doc(db, 'users', userId), {\n        'phoneVerification.code': verificationCode,\n        'phoneVerification.expiresAt': expiresAt,\n        'phoneVerification.phone': validation.formatted,\n        'phoneVerification.attempts': 0,\n        'updatedAt': new Date()\n      });\n      */\n\n      // Mock phone verification for development\n      console.log('Mock phone verification code generated for user:', userId);\n\n      // En un sistema real, aquí enviaríamos el SMS\n      console.log(`Código de verificación para ${validation.formatted}: ${verificationCode}`);\n      \n      return {\n        success: true,\n        message: `🚧 Funcionalidad en desarrollo - Código enviado a ${validation.formatted} (simulado)`,\n        // En desarrollo, devolvemos el código para testing\n        developmentCode: process.env.NODE_ENV === 'development' ? verificationCode : undefined\n      };\n\n    } catch (error) {\n      console.error('Error enviando código de verificación:', error);\n      return {\n        success: false,\n        error: 'Error enviando código de verificación'\n      };\n    }\n  }\n\n  /**\n   * Confirma el código de verificación de teléfono\n   */\n  async confirmPhoneVerification(userId, code) {\n    try {\n      // TODO: Replace with backend API calls\n      console.log('🚧 VerificationService: Firebase phone confirmation commented out - using mock confirmation');\n      \n      // FIREBASE CODE COMMENTED OUT - REPLACE WITH BACKEND API\n      /*\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      if (!userDoc.exists()) {\n        return { success: false, error: 'Usuario no encontrado' };\n      }\n\n      const userData = userDoc.data();\n      const phoneVerification = userData.phoneVerification;\n\n      if (!phoneVerification || !phoneVerification.code) {\n        return { success: false, error: 'No hay verificación pendiente' };\n      }\n\n      // Verificar si el código expiró\n      const now = new Date();\n      if (now > phoneVerification.expiresAt.toDate()) {\n        return { success: false, error: 'El código ha expirado' };\n      }\n\n      // Verificar intentos\n      if (phoneVerification.attempts >= 3) {\n        return { success: false, error: 'Demasiados intentos. Solicita un nuevo código' };\n      }\n\n      // Verificar código\n      if (code !== phoneVerification.code) {\n        // Incrementar intentos\n        await updateDoc(doc(db, 'users', userId), {\n          'phoneVerification.attempts': (phoneVerification.attempts || 0) + 1,\n          'updatedAt': new Date()\n        });\n\n        return { success: false, error: 'Código incorrecto' };\n      }\n\n      // Código correcto - marcar como verificado\n      await updateDoc(doc(db, 'users', userId), {\n        'verification.phone': true,\n        'verification.phoneVerifiedAt': new Date(),\n        'verificationStatus.phone': true,\n        'phone': phoneVerification.phone,\n        // Limpiar datos temporales\n        'phoneVerification': null,\n        'updatedAt': new Date()\n      });\n      */\n\n      // Mock phone confirmation for development\n      console.log('Mock phone confirmation for user:', userId, 'with code:', code);\n\n      return {\n        success: true,\n        message: '🚧 Funcionalidad en desarrollo - Teléfono verificado exitosamente (simulado)'\n      };\n\n    } catch (error) {\n      console.error('Error confirmando verificación:', error);\n      return {\n        success: false,\n        error: 'Error interno del servidor'\n      };\n    }\n  }\n\n  /**\n   * Obtiene el estado de verificación de un usuario\n   */\n  async getVerificationStatus(userId) {\n    try {\n      // TODO: Replace with backend API calls\n      console.log('🚧 VerificationService: Firebase status check commented out - using mock status');\n      \n      // FIREBASE CODE COMMENTED OUT - REPLACE WITH BACKEND API\n      /*\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      if (!userDoc.exists()) {\n        return null;\n      }\n\n      const userData = userDoc.data();\n      return {\n        email: userData.verification?.email || false,\n        phone: userData.verification?.phone || false,\n        identity: userData.verification?.identity || false,\n        isFullyVerified: (userData.verification?.email && userData.verification?.phone && userData.verification?.identity) || false\n      };\n      */\n\n      // Mock verification status for development\n      return {\n        email: true, // Mock as verified\n        phone: false,\n        identity: false,\n        isFullyVerified: false\n      };\n    } catch (error) {\n      console.error('Error obteniendo estado de verificación:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Verifica si un usuario puede realizar transacciones P2P\n   * Requiere teléfono y cédula verificados\n   */\n  async canUseP2P(userId) {\n    const status = await this.getVerificationStatus(userId);\n    return status && status.phone && status.identity;\n  }\n\n  // Utilidades privadas\n\n  /**\n   * Simula verificación con TSE\n   * En un sistema real, esto haría una consulta a la API del TSE\n   */\n  async simulateTSEVerification(cedula, fullName) {\n    // Simular delay de API\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // En desarrollo, aceptamos cualquier cédula con formato válido\n    if (process.env.NODE_ENV === 'development') {\n      return true;\n    }\n\n    // En producción, aquí haríamos la consulta real a TSE\n    // return await this.queryTSEDatabase(cedula, fullName);\n    \n    return true; // Por ahora, aceptamos todas\n  }\n\n  /**\n   * Genera código de verificación de 6 dígitos\n   */\n  generateVerificationCode() {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  /**\n   * Envía SMS (simulado)\n   * En producción, usaría un servicio como Twilio o similar\n   */\n  async sendSMS(phone, message) {\n    // En desarrollo, solo log\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`SMS a ${phone}: ${message}`);\n      return { success: true };\n    }\n\n    // En producción, integración con servicio SMS\n    // return await this.smsProvider.send(phone, message);\n    \n    return { success: true }; // Por ahora\n  }\n\n  /**\n   * Limpia códigos de verificación expirados\n   * Esta función debería ejecutarse periódicamente via Cloud Function\n   */\n  async cleanupExpiredCodes() {\n    // Esta lógica estaría en una Cloud Function\n    console.log('Limpiando códigos expirados...');\n  }\n}\n\n// Instancia singleton\nconst verificationService = new VerificationService();\n\nexport default verificationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}