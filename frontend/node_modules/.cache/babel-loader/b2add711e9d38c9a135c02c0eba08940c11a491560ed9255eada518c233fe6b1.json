{"ast":null,"code":"// src/services/api.js\n// Cliente API REST para comunicarse con el backend Node.js\n// Reemplaza toda la funcionalidad de Firebase\n\nimport axios from 'axios';\nclass APIClient {\n  constructor() {\n    // URL base del backend Node.js\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api/v1';\n\n    // Crear instancia de axios con configuración base\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      timeout: 10000,\n      // 10 segundos timeout\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Interceptor para agregar token automáticamente\n    this.client.interceptors.request.use(config => {\n      const token = this.getStoredToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Interceptor para manejar respuestas y errores globalmente\n    this.client.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      const originalRequest = error.config;\n\n      // Si el token expiró, intentar renovarlo\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n          await this.refreshToken();\n          const newToken = this.getStoredToken();\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\n          return this.client(originalRequest);\n        } catch (refreshError) {\n          // Si el refresh falla, limpiar tokens y redirigir al login\n          this.clearTokens();\n          window.location.href = '/';\n          return Promise.reject(refreshError);\n        }\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // ===================\n  // GESTIÓN DE TOKENS\n  // ===================\n\n  getStoredToken() {\n    return localStorage.getItem('tropical_tcg_token');\n  }\n  getStoredRefreshToken() {\n    return localStorage.getItem('tropical_tcg_refresh_token');\n  }\n  setTokens(accessToken, refreshToken) {\n    localStorage.setItem('tropical_tcg_token', accessToken);\n    if (refreshToken) {\n      localStorage.setItem('tropical_tcg_refresh_token', refreshToken);\n    }\n  }\n  clearTokens() {\n    localStorage.removeItem('tropical_tcg_token');\n    localStorage.removeItem('tropical_tcg_refresh_token');\n  }\n  async refreshToken() {\n    const refreshToken = this.getStoredRefreshToken();\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n    const response = await axios.post(`${this.baseURL}/auth/refresh-token`, {\n      refreshToken\n    });\n    const {\n      accessToken,\n      refreshToken: newRefreshToken\n    } = response.data.tokens;\n    this.setTokens(accessToken, newRefreshToken);\n    return response.data;\n  }\n\n  // ===================\n  // AUTENTICACIÓN\n  // ===================\n\n  async register(userData) {\n    try {\n      const response = await this.client.post('/auth/register', userData);\n      if (response.data.success && response.data.tokens) {\n        this.setTokens(response.data.tokens.accessToken, response.data.tokens.refreshToken);\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async login(email, password) {\n    try {\n      const response = await this.client.post('/auth/login', {\n        email,\n        password\n      });\n      if (response.data.success && response.data.tokens) {\n        this.setTokens(response.data.tokens.accessToken, response.data.tokens.refreshToken);\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async logout() {\n    try {\n      const refreshToken = this.getStoredRefreshToken();\n      if (refreshToken) {\n        await this.client.post('/auth/logout', {\n          refreshToken\n        });\n      }\n    } catch (error) {\n      console.warn('Error during logout:', error);\n    } finally {\n      this.clearTokens();\n    }\n  }\n  async verifyToken() {\n    try {\n      const response = await this.client.get('/auth/verify-token');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await this.client.post('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ===================\n  // USUARIOS\n  // ===================\n\n  async getProfile() {\n    try {\n      const response = await this.client.get('/users/profile');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async updateProfile(profileData) {\n    try {\n      const response = await this.client.put('/users/profile', profileData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async updateSettings(settings) {\n    try {\n      const response = await this.client.put('/users/settings', settings);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async getUserStats() {\n    try {\n      const response = await this.client.get('/users/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async searchUsers(params = {}) {\n    try {\n      const response = await this.client.get('/users/search', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async getPublicProfile(userId) {\n    try {\n      const response = await this.client.get(`/users/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async toggleRecommendation(userId) {\n    try {\n      const response = await this.client.post(`/users/${userId}/recommend`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async uploadProfilePicture(file) {\n    try {\n      const formData = new FormData();\n      formData.append('profilePicture', file);\n      const response = await this.client.post('/users/profile/picture', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async deleteProfilePicture() {\n    try {\n      const response = await this.client.delete('/users/profile/picture');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ===================\n  // LISTINGS\n  // ===================\n\n  async getListings(params = {}) {\n    try {\n      const response = await this.client.get('/listings', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async getListing(listingId) {\n    try {\n      const response = await this.client.get(`/listings/${listingId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async getMyListings(params = {}) {\n    try {\n      const response = await this.client.get('/listings/my/listings', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async createListing(listingData) {\n    try {\n      const response = await this.client.post('/listings', listingData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async updateListing(listingId, updates) {\n    try {\n      const response = await this.client.put(`/listings/${listingId}`, updates);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async deleteListing(listingId) {\n    try {\n      const response = await this.client.delete(`/listings/${listingId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async getTCGStats() {\n    try {\n      const response = await this.client.get('/listings/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ===================\n  // UTILIDADES\n  // ===================\n\n  handleError(error) {\n    console.error('API Error:', error);\n\n    // Si es un error de red\n    if (error.code === 'NETWORK_ERROR' || !error.response) {\n      return {\n        error: 'Error de conexión',\n        message: 'No se pudo conectar al servidor. Verifica tu conexión a internet.',\n        code: 'NETWORK_ERROR'\n      };\n    }\n\n    // Si el servidor respondió con un error\n    if (error.response) {\n      const {\n        status,\n        data\n      } = error.response;\n\n      // Errores HTTP específicos\n      if (status >= 500) {\n        return {\n          error: 'Error del servidor',\n          message: 'Error interno del servidor. Intenta de nuevo más tarde.',\n          code: 'SERVER_ERROR',\n          status\n        };\n      }\n\n      // Errores de cliente (400-499)\n      return {\n        error: data.error || 'Error de solicitud',\n        message: data.message || 'Error procesando la solicitud',\n        details: data.details,\n        code: 'CLIENT_ERROR',\n        status\n      };\n    }\n\n    // Error genérico\n    return {\n      error: 'Error desconocido',\n      message: error.message || 'Ocurrió un error inesperado',\n      code: 'UNKNOWN_ERROR'\n    };\n  }\n\n  // Verificar si el usuario está autenticado\n  isAuthenticated() {\n    return !!this.getStoredToken();\n  }\n\n  // Obtener información del usuario desde el token (decodificado básico)\n  getCurrentUser() {\n    const token = this.getStoredToken();\n    if (!token) return null;\n    try {\n      // Decodificar el payload del JWT (sin verificación de firma)\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n      const payload = JSON.parse(jsonPayload);\n\n      // Verificar si el token no ha expirado\n      if (payload.exp && payload.exp < Date.now() / 1000) {\n        return null;\n      }\n      return {\n        userId: payload.userId,\n        username: payload.username,\n        email: payload.email,\n        role: payload.role,\n        verified: payload.verified\n      };\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n}\n\n// Instancia singleton del cliente API\nconst apiClient = new APIClient();\nexport default apiClient;","map":{"version":3,"names":["axios","APIClient","constructor","baseURL","process","env","REACT_APP_API_URL","client","create","timeout","headers","interceptors","request","use","config","token","getStoredToken","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","newToken","refreshError","clearTokens","window","location","href","localStorage","getItem","getStoredRefreshToken","setTokens","accessToken","setItem","removeItem","Error","post","newRefreshToken","data","tokens","register","userData","success","handleError","login","email","password","logout","console","warn","verifyToken","get","changePassword","currentPassword","newPassword","getProfile","updateProfile","profileData","put","updateSettings","settings","getUserStats","searchUsers","params","getPublicProfile","userId","toggleRecommendation","uploadProfilePicture","file","formData","FormData","append","deleteProfilePicture","delete","getListings","getListing","listingId","getMyListings","createListing","listingData","updateListing","updates","deleteListing","getTCGStats","code","message","details","isAuthenticated","getCurrentUser","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","payload","JSON","parse","exp","Date","now","username","role","verified","apiClient"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/services/api.js"],"sourcesContent":["// src/services/api.js\n// Cliente API REST para comunicarse con el backend Node.js\n// Reemplaza toda la funcionalidad de Firebase\n\nimport axios from 'axios';\n\nclass APIClient {\n  constructor() {\n    // URL base del backend Node.js\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api/v1';\n    \n    // Crear instancia de axios con configuración base\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      timeout: 10000, // 10 segundos timeout\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Interceptor para agregar token automáticamente\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = this.getStoredToken();\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Interceptor para manejar respuestas y errores globalmente\n    this.client.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const originalRequest = error.config;\n\n        // Si el token expiró, intentar renovarlo\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n\n          try {\n            await this.refreshToken();\n            const newToken = this.getStoredToken();\n            originalRequest.headers.Authorization = `Bearer ${newToken}`;\n            return this.client(originalRequest);\n          } catch (refreshError) {\n            // Si el refresh falla, limpiar tokens y redirigir al login\n            this.clearTokens();\n            window.location.href = '/';\n            return Promise.reject(refreshError);\n          }\n        }\n\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // ===================\n  // GESTIÓN DE TOKENS\n  // ===================\n\n  getStoredToken() {\n    return localStorage.getItem('tropical_tcg_token');\n  }\n\n  getStoredRefreshToken() {\n    return localStorage.getItem('tropical_tcg_refresh_token');\n  }\n\n  setTokens(accessToken, refreshToken) {\n    localStorage.setItem('tropical_tcg_token', accessToken);\n    if (refreshToken) {\n      localStorage.setItem('tropical_tcg_refresh_token', refreshToken);\n    }\n  }\n\n  clearTokens() {\n    localStorage.removeItem('tropical_tcg_token');\n    localStorage.removeItem('tropical_tcg_refresh_token');\n  }\n\n  async refreshToken() {\n    const refreshToken = this.getStoredRefreshToken();\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    const response = await axios.post(`${this.baseURL}/auth/refresh-token`, {\n      refreshToken\n    });\n\n    const { accessToken, refreshToken: newRefreshToken } = response.data.tokens;\n    this.setTokens(accessToken, newRefreshToken);\n\n    return response.data;\n  }\n\n  // ===================\n  // AUTENTICACIÓN\n  // ===================\n\n  async register(userData) {\n    try {\n      const response = await this.client.post('/auth/register', userData);\n      \n      if (response.data.success && response.data.tokens) {\n        this.setTokens(response.data.tokens.accessToken, response.data.tokens.refreshToken);\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async login(email, password) {\n    try {\n      const response = await this.client.post('/auth/login', {\n        email,\n        password\n      });\n      \n      if (response.data.success && response.data.tokens) {\n        this.setTokens(response.data.tokens.accessToken, response.data.tokens.refreshToken);\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async logout() {\n    try {\n      const refreshToken = this.getStoredRefreshToken();\n      if (refreshToken) {\n        await this.client.post('/auth/logout', { refreshToken });\n      }\n    } catch (error) {\n      console.warn('Error during logout:', error);\n    } finally {\n      this.clearTokens();\n    }\n  }\n\n  async verifyToken() {\n    try {\n      const response = await this.client.get('/auth/verify-token');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await this.client.post('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ===================\n  // USUARIOS\n  // ===================\n\n  async getProfile() {\n    try {\n      const response = await this.client.get('/users/profile');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async updateProfile(profileData) {\n    try {\n      const response = await this.client.put('/users/profile', profileData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async updateSettings(settings) {\n    try {\n      const response = await this.client.put('/users/settings', settings);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getUserStats() {\n    try {\n      const response = await this.client.get('/users/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async searchUsers(params = {}) {\n    try {\n      const response = await this.client.get('/users/search', { params });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getPublicProfile(userId) {\n    try {\n      const response = await this.client.get(`/users/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async toggleRecommendation(userId) {\n    try {\n      const response = await this.client.post(`/users/${userId}/recommend`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async uploadProfilePicture(file) {\n    try {\n      const formData = new FormData();\n      formData.append('profilePicture', file);\n\n      const response = await this.client.post('/users/profile/picture', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async deleteProfilePicture() {\n    try {\n      const response = await this.client.delete('/users/profile/picture');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ===================\n  // LISTINGS\n  // ===================\n\n  async getListings(params = {}) {\n    try {\n      const response = await this.client.get('/listings', { params });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getListing(listingId) {\n    try {\n      const response = await this.client.get(`/listings/${listingId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getMyListings(params = {}) {\n    try {\n      const response = await this.client.get('/listings/my/listings', { params });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async createListing(listingData) {\n    try {\n      const response = await this.client.post('/listings', listingData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async updateListing(listingId, updates) {\n    try {\n      const response = await this.client.put(`/listings/${listingId}`, updates);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async deleteListing(listingId) {\n    try {\n      const response = await this.client.delete(`/listings/${listingId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getTCGStats() {\n    try {\n      const response = await this.client.get('/listings/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ===================\n  // UTILIDADES\n  // ===================\n\n  handleError(error) {\n    console.error('API Error:', error);\n\n    // Si es un error de red\n    if (error.code === 'NETWORK_ERROR' || !error.response) {\n      return {\n        error: 'Error de conexión',\n        message: 'No se pudo conectar al servidor. Verifica tu conexión a internet.',\n        code: 'NETWORK_ERROR'\n      };\n    }\n\n    // Si el servidor respondió con un error\n    if (error.response) {\n      const { status, data } = error.response;\n      \n      // Errores HTTP específicos\n      if (status >= 500) {\n        return {\n          error: 'Error del servidor',\n          message: 'Error interno del servidor. Intenta de nuevo más tarde.',\n          code: 'SERVER_ERROR',\n          status\n        };\n      }\n\n      // Errores de cliente (400-499)\n      return {\n        error: data.error || 'Error de solicitud',\n        message: data.message || 'Error procesando la solicitud',\n        details: data.details,\n        code: 'CLIENT_ERROR',\n        status\n      };\n    }\n\n    // Error genérico\n    return {\n      error: 'Error desconocido',\n      message: error.message || 'Ocurrió un error inesperado',\n      code: 'UNKNOWN_ERROR'\n    };\n  }\n\n  // Verificar si el usuario está autenticado\n  isAuthenticated() {\n    return !!this.getStoredToken();\n  }\n\n  // Obtener información del usuario desde el token (decodificado básico)\n  getCurrentUser() {\n    const token = this.getStoredToken();\n    if (!token) return null;\n\n    try {\n      // Decodificar el payload del JWT (sin verificación de firma)\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split('')\n          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n\n      const payload = JSON.parse(jsonPayload);\n\n      // Verificar si el token no ha expirado\n      if (payload.exp && payload.exp < Date.now() / 1000) {\n        return null;\n      }\n\n      return {\n        userId: payload.userId,\n        username: payload.username,\n        email: payload.email,\n        role: payload.role,\n        verified: payload.verified\n      };\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n}\n\n// Instancia singleton del cliente API\nconst apiClient = new APIClient();\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}