{"ast":null,"code":"// src/services/verificationService.js\n// Servicio para verificación de identidad y datos de usuario\n\n// FIREBASE REMOVED - TODO: Replace with backend API\n// FIREBASE REMOVED - TODO: Replace with backend API\nimport { validateCedulaFormat, validatePhoneFormat } from '../utils/validation';\nclass VerificationService {\n  /**\n   * Verifica la cédula de un usuario\n   * En un sistema real, esto haría una consulta a la TSE (Tribunal Supremo de Elecciones)\n   * Por ahora, solo validamos el formato\n   */\n  async verifyCedula(userId, cedula, fullName) {\n    try {\n      // TODO: Replace with backend API calls\n      console.log('🚧 VerificationService: Firebase code commented out - using mock verification');\n\n      // Validar formato\n      const validation = validateCedulaFormat(cedula);\n      if (!validation.valid) {\n        return {\n          success: false,\n          error: validation.error\n        };\n      }\n\n      // En un sistema real, aquí haríamos la consulta a la TSE\n      // Por ahora, simulamos una verificación exitosa si el formato es válido\n      const isValid = await this.simulateTSEVerification(validation.cleanCedula, fullName);\n      if (isValid) {\n        // FIREBASE CODE COMMENTED OUT - REPLACE WITH BACKEND API\n        /*\n        await updateDoc(doc(db, 'users', userId), {\n          'verification.identity': true,\n          'verification.cedulaVerifiedAt': new Date(),\n          'verification.cedulaNumber': validation.formatted,\n          'verificationStatus.cedula': true,\n          'fullName': fullName,\n          'updatedAt': new Date()\n        });\n        */\n\n        // Mock verification update for development\n        console.log('Mock cedula verification completed for user:', userId);\n        return {\n          success: true,\n          message: '🚧 Funcionalidad en desarrollo - Cédula verificada exitosamente (simulado)'\n        };\n      } else {\n        return {\n          success: false,\n          error: 'No se pudo verificar la cédula. Verifica que los datos sean correctos.'\n        };\n      }\n    } catch (error) {\n      console.error('Error verificando cédula:', error);\n      return {\n        success: false,\n        error: 'Error interno del servidor'\n      };\n    }\n  }\n\n  /**\n   * Verifica el número de teléfono\n   * En un sistema real, enviaría un SMS con código de verificación\n   */\n  async verifyPhone(userId, phone) {\n    try {\n      // Validar formato\n      const validation = validatePhoneFormat(phone);\n      if (!validation.valid) {\n        return {\n          success: false,\n          error: validation.error\n        };\n      }\n\n      // Generar código de verificación\n      const verificationCode = this.generateVerificationCode();\n\n      // Guardar código temporalmente en Firebase (expira en 5 minutos)\n      const expiresAt = new Date(Date.now() + 5 * 60 * 1000);\n      await updateDoc(doc(/* db */null, 'users', userId), {\n        'phoneVerification.code': verificationCode,\n        'phoneVerification.expiresAt': expiresAt,\n        'phoneVerification.phone': validation.formatted,\n        'phoneVerification.attempts': 0,\n        'updatedAt': new Date()\n      });\n\n      // En un sistema real, aquí enviaríamos el SMS\n      console.log(`Código de verificación para ${validation.formatted}: ${verificationCode}`);\n      return {\n        success: true,\n        message: `Código enviado a ${validation.formatted}`,\n        // En desarrollo, devolvemos el código para testing\n        developmentCode: process.env.NODE_ENV === 'development' ? verificationCode : undefined\n      };\n    } catch (error) {\n      console.error('Error enviando código de verificación:', error);\n      return {\n        success: false,\n        error: 'Error enviando código de verificación'\n      };\n    }\n  }\n\n  /**\n   * Confirma el código de verificación de teléfono\n   */\n  async confirmPhoneVerification(userId, code) {\n    try {\n      const userDoc = await getDoc(doc(/* db */null, 'users', userId));\n      if (!userDoc.exists()) {\n        return {\n          success: false,\n          error: 'Usuario no encontrado'\n        };\n      }\n      const userData = userDoc.data();\n      const phoneVerification = userData.phoneVerification;\n      if (!phoneVerification || !phoneVerification.code) {\n        return {\n          success: false,\n          error: 'No hay verificación pendiente'\n        };\n      }\n\n      // Verificar si el código expiró\n      const now = new Date();\n      if (now > phoneVerification.expiresAt.toDate()) {\n        return {\n          success: false,\n          error: 'El código ha expirado'\n        };\n      }\n\n      // Verificar intentos\n      if (phoneVerification.attempts >= 3) {\n        return {\n          success: false,\n          error: 'Demasiados intentos. Solicita un nuevo código'\n        };\n      }\n\n      // Verificar código\n      if (code !== phoneVerification.code) {\n        // Incrementar intentos\n        await updateDoc(doc(/* db */null, 'users', userId), {\n          'phoneVerification.attempts': (phoneVerification.attempts || 0) + 1,\n          'updatedAt': new Date()\n        });\n        return {\n          success: false,\n          error: 'Código incorrecto'\n        };\n      }\n\n      // Código correcto - marcar como verificado\n      await updateDoc(doc(/* db */null, 'users', userId), {\n        'verification.phone': true,\n        'verification.phoneVerifiedAt': new Date(),\n        'verificationStatus.phone': true,\n        'phone': phoneVerification.phone,\n        // Limpiar datos temporales\n        'phoneVerification': null,\n        'updatedAt': new Date()\n      });\n      return {\n        success: true,\n        message: 'Teléfono verificado exitosamente'\n      };\n    } catch (error) {\n      console.error('Error confirmando verificación:', error);\n      return {\n        success: false,\n        error: 'Error interno del servidor'\n      };\n    }\n  }\n\n  /**\n   * Obtiene el estado de verificación de un usuario\n   */\n  async getVerificationStatus(userId) {\n    try {\n      var _userData$verificatio, _userData$verificatio2, _userData$verificatio3, _userData$verificatio4, _userData$verificatio5, _userData$verificatio6;\n      const userDoc = await getDoc(doc(/* db */null, 'users', userId));\n      if (!userDoc.exists()) {\n        return null;\n      }\n      const userData = userDoc.data();\n      return {\n        email: ((_userData$verificatio = userData.verification) === null || _userData$verificatio === void 0 ? void 0 : _userData$verificatio.email) || false,\n        phone: ((_userData$verificatio2 = userData.verification) === null || _userData$verificatio2 === void 0 ? void 0 : _userData$verificatio2.phone) || false,\n        identity: ((_userData$verificatio3 = userData.verification) === null || _userData$verificatio3 === void 0 ? void 0 : _userData$verificatio3.identity) || false,\n        isFullyVerified: ((_userData$verificatio4 = userData.verification) === null || _userData$verificatio4 === void 0 ? void 0 : _userData$verificatio4.email) && ((_userData$verificatio5 = userData.verification) === null || _userData$verificatio5 === void 0 ? void 0 : _userData$verificatio5.phone) && ((_userData$verificatio6 = userData.verification) === null || _userData$verificatio6 === void 0 ? void 0 : _userData$verificatio6.identity) || false\n      };\n    } catch (error) {\n      console.error('Error obteniendo estado de verificación:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Verifica si un usuario puede realizar transacciones P2P\n   * Requiere teléfono y cédula verificados\n   */\n  async canUseP2P(userId) {\n    const status = await this.getVerificationStatus(userId);\n    return status && status.phone && status.identity;\n  }\n\n  // Utilidades privadas\n\n  /**\n   * Simula verificación con TSE\n   * En un sistema real, esto haría una consulta a la API del TSE\n   */\n  async simulateTSEVerification(cedula, fullName) {\n    // Simular delay de API\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // En desarrollo, aceptamos cualquier cédula con formato válido\n    if (process.env.NODE_ENV === 'development') {\n      return true;\n    }\n\n    // En producción, aquí haríamos la consulta real a TSE\n    // return await this.queryTSEDatabase(cedula, fullName);\n\n    return true; // Por ahora, aceptamos todas\n  }\n\n  /**\n   * Genera código de verificación de 6 dígitos\n   */\n  generateVerificationCode() {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  /**\n   * Envía SMS (simulado)\n   * En producción, usaría un servicio como Twilio o similar\n   */\n  async sendSMS(phone, message) {\n    // En desarrollo, solo log\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`SMS a ${phone}: ${message}`);\n      return {\n        success: true\n      };\n    }\n\n    // En producción, integración con servicio SMS\n    // return await this.smsProvider.send(phone, message);\n\n    return {\n      success: true\n    }; // Por ahora\n  }\n\n  /**\n   * Limpia códigos de verificación expirados\n   * Esta función debería ejecutarse periódicamente via Cloud Function\n   */\n  async cleanupExpiredCodes() {\n    // Esta lógica estaría en una Cloud Function\n    console.log('Limpiando códigos expirados...');\n  }\n}\n\n// Instancia singleton\nconst verificationService = new VerificationService();\nexport default verificationService;","map":{"version":3,"names":["validateCedulaFormat","validatePhoneFormat","VerificationService","verifyCedula","userId","cedula","fullName","console","log","validation","valid","success","error","isValid","simulateTSEVerification","cleanCedula","message","verifyPhone","phone","verificationCode","generateVerificationCode","expiresAt","Date","now","updateDoc","doc","formatted","developmentCode","process","env","NODE_ENV","undefined","confirmPhoneVerification","code","userDoc","getDoc","exists","userData","data","phoneVerification","toDate","attempts","getVerificationStatus","_userData$verificatio","_userData$verificatio2","_userData$verificatio3","_userData$verificatio4","_userData$verificatio5","_userData$verificatio6","email","verification","identity","isFullyVerified","canUseP2P","status","Promise","resolve","setTimeout","Math","floor","random","toString","sendSMS","cleanupExpiredCodes","verificationService"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/services/verificationService.js"],"sourcesContent":["// src/services/verificationService.js\n// Servicio para verificación de identidad y datos de usuario\n\n// FIREBASE REMOVED - TODO: Replace with backend API\n// FIREBASE REMOVED - TODO: Replace with backend API\nimport { validateCedulaFormat, validatePhoneFormat } from '../utils/validation';\n\nclass VerificationService {\n  \n  /**\n   * Verifica la cédula de un usuario\n   * En un sistema real, esto haría una consulta a la TSE (Tribunal Supremo de Elecciones)\n   * Por ahora, solo validamos el formato\n   */\n  async verifyCedula(userId, cedula, fullName) {\n    try {\n      // TODO: Replace with backend API calls\n      console.log('🚧 VerificationService: Firebase code commented out - using mock verification');\n      \n      // Validar formato\n      const validation = validateCedulaFormat(cedula);\n      if (!validation.valid) {\n        return {\n          success: false,\n          error: validation.error\n        };\n      }\n\n      // En un sistema real, aquí haríamos la consulta a la TSE\n      // Por ahora, simulamos una verificación exitosa si el formato es válido\n      const isValid = await this.simulateTSEVerification(validation.cleanCedula, fullName);\n      \n      if (isValid) {\n        // FIREBASE CODE COMMENTED OUT - REPLACE WITH BACKEND API\n        /*\n        await updateDoc(doc(db, 'users', userId), {\n          'verification.identity': true,\n          'verification.cedulaVerifiedAt': new Date(),\n          'verification.cedulaNumber': validation.formatted,\n          'verificationStatus.cedula': true,\n          'fullName': fullName,\n          'updatedAt': new Date()\n        });\n        */\n\n        // Mock verification update for development\n        console.log('Mock cedula verification completed for user:', userId);\n\n        return {\n          success: true,\n          message: '🚧 Funcionalidad en desarrollo - Cédula verificada exitosamente (simulado)'\n        };\n      } else {\n        return {\n          success: false,\n          error: 'No se pudo verificar la cédula. Verifica que los datos sean correctos.'\n        };\n      }\n\n    } catch (error) {\n      console.error('Error verificando cédula:', error);\n      return {\n        success: false,\n        error: 'Error interno del servidor'\n      };\n    }\n  }\n\n  /**\n   * Verifica el número de teléfono\n   * En un sistema real, enviaría un SMS con código de verificación\n   */\n  async verifyPhone(userId, phone) {\n    try {\n      // Validar formato\n      const validation = validatePhoneFormat(phone);\n      if (!validation.valid) {\n        return {\n          success: false,\n          error: validation.error\n        };\n      }\n\n      // Generar código de verificación\n      const verificationCode = this.generateVerificationCode();\n      \n      // Guardar código temporalmente en Firebase (expira en 5 minutos)\n      const expiresAt = new Date(Date.now() + 5 * 60 * 1000);\n      \n      await updateDoc(doc(/* db */ null, 'users', userId), {\n        'phoneVerification.code': verificationCode,\n        'phoneVerification.expiresAt': expiresAt,\n        'phoneVerification.phone': validation.formatted,\n        'phoneVerification.attempts': 0,\n        'updatedAt': new Date()\n      });\n\n      // En un sistema real, aquí enviaríamos el SMS\n      console.log(`Código de verificación para ${validation.formatted}: ${verificationCode}`);\n      \n      return {\n        success: true,\n        message: `Código enviado a ${validation.formatted}`,\n        // En desarrollo, devolvemos el código para testing\n        developmentCode: process.env.NODE_ENV === 'development' ? verificationCode : undefined\n      };\n\n    } catch (error) {\n      console.error('Error enviando código de verificación:', error);\n      return {\n        success: false,\n        error: 'Error enviando código de verificación'\n      };\n    }\n  }\n\n  /**\n   * Confirma el código de verificación de teléfono\n   */\n  async confirmPhoneVerification(userId, code) {\n    try {\n      const userDoc = await getDoc(doc(/* db */ null, 'users', userId));\n      if (!userDoc.exists()) {\n        return { success: false, error: 'Usuario no encontrado' };\n      }\n\n      const userData = userDoc.data();\n      const phoneVerification = userData.phoneVerification;\n\n      if (!phoneVerification || !phoneVerification.code) {\n        return { success: false, error: 'No hay verificación pendiente' };\n      }\n\n      // Verificar si el código expiró\n      const now = new Date();\n      if (now > phoneVerification.expiresAt.toDate()) {\n        return { success: false, error: 'El código ha expirado' };\n      }\n\n      // Verificar intentos\n      if (phoneVerification.attempts >= 3) {\n        return { success: false, error: 'Demasiados intentos. Solicita un nuevo código' };\n      }\n\n      // Verificar código\n      if (code !== phoneVerification.code) {\n        // Incrementar intentos\n        await updateDoc(doc(/* db */ null, 'users', userId), {\n          'phoneVerification.attempts': (phoneVerification.attempts || 0) + 1,\n          'updatedAt': new Date()\n        });\n\n        return { success: false, error: 'Código incorrecto' };\n      }\n\n      // Código correcto - marcar como verificado\n      await updateDoc(doc(/* db */ null, 'users', userId), {\n        'verification.phone': true,\n        'verification.phoneVerifiedAt': new Date(),\n        'verificationStatus.phone': true,\n        'phone': phoneVerification.phone,\n        // Limpiar datos temporales\n        'phoneVerification': null,\n        'updatedAt': new Date()\n      });\n\n      return {\n        success: true,\n        message: 'Teléfono verificado exitosamente'\n      };\n\n    } catch (error) {\n      console.error('Error confirmando verificación:', error);\n      return {\n        success: false,\n        error: 'Error interno del servidor'\n      };\n    }\n  }\n\n  /**\n   * Obtiene el estado de verificación de un usuario\n   */\n  async getVerificationStatus(userId) {\n    try {\n      const userDoc = await getDoc(doc(/* db */ null, 'users', userId));\n      if (!userDoc.exists()) {\n        return null;\n      }\n\n      const userData = userDoc.data();\n      return {\n        email: userData.verification?.email || false,\n        phone: userData.verification?.phone || false,\n        identity: userData.verification?.identity || false,\n        isFullyVerified: (userData.verification?.email && userData.verification?.phone && userData.verification?.identity) || false\n      };\n    } catch (error) {\n      console.error('Error obteniendo estado de verificación:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Verifica si un usuario puede realizar transacciones P2P\n   * Requiere teléfono y cédula verificados\n   */\n  async canUseP2P(userId) {\n    const status = await this.getVerificationStatus(userId);\n    return status && status.phone && status.identity;\n  }\n\n  // Utilidades privadas\n\n  /**\n   * Simula verificación con TSE\n   * En un sistema real, esto haría una consulta a la API del TSE\n   */\n  async simulateTSEVerification(cedula, fullName) {\n    // Simular delay de API\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // En desarrollo, aceptamos cualquier cédula con formato válido\n    if (process.env.NODE_ENV === 'development') {\n      return true;\n    }\n\n    // En producción, aquí haríamos la consulta real a TSE\n    // return await this.queryTSEDatabase(cedula, fullName);\n    \n    return true; // Por ahora, aceptamos todas\n  }\n\n  /**\n   * Genera código de verificación de 6 dígitos\n   */\n  generateVerificationCode() {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  /**\n   * Envía SMS (simulado)\n   * En producción, usaría un servicio como Twilio o similar\n   */\n  async sendSMS(phone, message) {\n    // En desarrollo, solo log\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`SMS a ${phone}: ${message}`);\n      return { success: true };\n    }\n\n    // En producción, integración con servicio SMS\n    // return await this.smsProvider.send(phone, message);\n    \n    return { success: true }; // Por ahora\n  }\n\n  /**\n   * Limpia códigos de verificación expirados\n   * Esta función debería ejecutarse periódicamente via Cloud Function\n   */\n  async cleanupExpiredCodes() {\n    // Esta lógica estaría en una Cloud Function\n    console.log('Limpiando códigos expirados...');\n  }\n}\n\n// Instancia singleton\nconst verificationService = new VerificationService();\n\nexport default verificationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}