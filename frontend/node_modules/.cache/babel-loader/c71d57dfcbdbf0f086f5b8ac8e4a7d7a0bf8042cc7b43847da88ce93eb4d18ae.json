{"ast":null,"code":"// src/utils/validation.js\n// Utilidades de validación para Costa Rica\n/**\n * Valida el formato de cédula costarricense\n * Formato: #-####-#### donde # puede ser 1-9\n */export const validateCedulaFormat=cedula=>{if(!cedula)return{valid:false,error:'Cédula es requerida'};// Remover espacios y guiones para validación\nconst cleanCedula=cedula.replace(/[\\s-]/g,'');// Debe tener 9 dígitos\nif(cleanCedula.length!==9){return{valid:false,error:'La cédula debe tener 9 dígitos'};}// Solo debe contener números\nif(!/^\\d{9}$/.test(cleanCedula)){return{valid:false,error:'La cédula solo debe contener números'};}// El primer dígito debe ser 1-9 (no puede ser 0)\nconst firstDigit=parseInt(cleanCedula[0]);if(firstDigit<1||firstDigit>9){return{valid:false,error:'El primer dígito debe ser entre 1 y 9'};}return{valid:true,cleanCedula,formatted:formatCedula(cleanCedula)};};/**\n * Formatea una cédula con guiones\n * Ejemplo: \"123456789\" -> \"1-2345-6789\"\n */export const formatCedula=cedula=>{if(!cedula)return'';const clean=cedula.replace(/[\\s-]/g,'');if(clean.length!==9)return cedula;return`${clean[0]}-${clean.substring(1,5)}-${clean.substring(5)}`;};/**\n * Valida número de teléfono costarricense\n * Formatos aceptados: 8888-8888, 88888888, 2222-2222, 22222222\n */export const validatePhoneFormat=phone=>{if(!phone)return{valid:false,error:'Teléfono es requerido'};// Remover espacios y guiones\nconst cleanPhone=phone.replace(/[\\s-]/g,'');// Debe tener 8 dígitos\nif(cleanPhone.length!==8){return{valid:false,error:'El teléfono debe tener 8 dígitos'};}// Solo números\nif(!/^\\d{8}$/.test(cleanPhone)){return{valid:false,error:'El teléfono solo debe contener números'};}// Validar prefijos válidos en Costa Rica\nconst firstDigit=cleanPhone[0];const validPrefixes=['2','4','5','6','7','8','9'];if(!validPrefixes.includes(firstDigit)){return{valid:false,error:'Prefijo de teléfono no válido para Costa Rica'};}return{valid:true,cleanPhone,formatted:formatPhone(cleanPhone)};};/**\n * Formatea número de teléfono con guión\n * Ejemplo: \"88888888\" -> \"8888-8888\"\n */export const formatPhone=phone=>{if(!phone)return'';const clean=phone.replace(/[\\s-]/g,'');if(clean.length!==8)return phone;return`${clean.substring(0,4)}-${clean.substring(4)}`;};/**\n * Valida email\n */export const validateEmail=email=>{if(!email)return{valid:false,error:'Email es requerido'};const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;if(!emailRegex.test(email)){return{valid:false,error:'Formato de email inválido'};}return{valid:true};};/**\n * Valida nombre de usuario\n * - Mínimo 3 caracteres\n * - Solo letras, números y guiones bajos\n * - Debe empezar con letra\n */export const validateUsername=username=>{if(!username)return{valid:false,error:'Nombre de usuario es requerido'};if(username.length<3){return{valid:false,error:'Mínimo 3 caracteres'};}if(username.length>20){return{valid:false,error:'Máximo 20 caracteres'};}// Solo letras, números y guiones bajos\nif(!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(username)){return{valid:false,error:'Solo letras, números y guiones bajos. Debe empezar con letra'};}return{valid:true};};/**\n * Valida contraseña\n * - Mínimo 6 caracteres\n * - Al menos una letra y un número\n */export const validatePassword=password=>{if(!password)return{valid:false,error:'Contraseña es requerida'};if(password.length<6){return{valid:false,error:'Mínimo 6 caracteres'};}// Al menos una letra\nif(!/[a-zA-Z]/.test(password)){return{valid:false,error:'Debe contener al menos una letra'};}// Al menos un número\nif(!/\\d/.test(password)){return{valid:false,error:'Debe contener al menos un número'};}return{valid:true};};/**\n * Valida formulario completo de registro\n */export const validateRegistrationForm=formData=>{const errors={};// Validar cada campo\nconst usernameValidation=validateUsername(formData.username);if(!usernameValidation.valid)errors.username=usernameValidation.error;const emailValidation=validateEmail(formData.email);if(!emailValidation.valid)errors.email=emailValidation.error;const passwordValidation=validatePassword(formData.password);if(!passwordValidation.valid)errors.password=passwordValidation.error;const phoneValidation=validatePhoneFormat(formData.phone);if(!phoneValidation.valid)errors.phone=phoneValidation.error;const cedulaValidation=validateCedulaFormat(formData.cedula);if(!cedulaValidation.valid)errors.cedula=cedulaValidation.error;if(!formData.province){errors.province='Provincia es requerida';}const isValid=Object.keys(errors).length===0;return{valid:isValid,errors,// Datos formateados si son válidos\nformattedData:isValid?{...formData,phone:phoneValidation.formatted||formData.phone,cedula:cedulaValidation.formatted||formData.cedula}:null};};// Utilidad para obtener mensaje de error amigable\nexport const getValidationMessage=(field,error)=>{const messages={cedula:'Cédula: '+error,phone:'Teléfono: '+error,email:'Email: '+error,username:'Usuario: '+error,password:'Contraseña: '+error,province:'Provincia: '+error};return messages[field]||error;};","map":{"version":3,"names":["validateCedulaFormat","cedula","valid","error","cleanCedula","replace","length","test","firstDigit","parseInt","formatted","formatCedula","clean","substring","validatePhoneFormat","phone","cleanPhone","validPrefixes","includes","formatPhone","validateEmail","email","emailRegex","validateUsername","username","validatePassword","password","validateRegistrationForm","formData","errors","usernameValidation","emailValidation","passwordValidation","phoneValidation","cedulaValidation","province","isValid","Object","keys","formattedData","getValidationMessage","field","messages"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/utils/validation.js"],"sourcesContent":["// src/utils/validation.js\n// Utilidades de validación para Costa Rica\n\n/**\n * Valida el formato de cédula costarricense\n * Formato: #-####-#### donde # puede ser 1-9\n */\nexport const validateCedulaFormat = (cedula) => {\n  if (!cedula) return { valid: false, error: 'Cédula es requerida' };\n  \n  // Remover espacios y guiones para validación\n  const cleanCedula = cedula.replace(/[\\s-]/g, '');\n  \n  // Debe tener 9 dígitos\n  if (cleanCedula.length !== 9) {\n    return { valid: false, error: 'La cédula debe tener 9 dígitos' };\n  }\n  \n  // Solo debe contener números\n  if (!/^\\d{9}$/.test(cleanCedula)) {\n    return { valid: false, error: 'La cédula solo debe contener números' };\n  }\n  \n  // El primer dígito debe ser 1-9 (no puede ser 0)\n  const firstDigit = parseInt(cleanCedula[0]);\n  if (firstDigit < 1 || firstDigit > 9) {\n    return { valid: false, error: 'El primer dígito debe ser entre 1 y 9' };\n  }\n  \n  return { valid: true, cleanCedula, formatted: formatCedula(cleanCedula) };\n};\n\n/**\n * Formatea una cédula con guiones\n * Ejemplo: \"123456789\" -> \"1-2345-6789\"\n */\nexport const formatCedula = (cedula) => {\n  if (!cedula) return '';\n  \n  const clean = cedula.replace(/[\\s-]/g, '');\n  if (clean.length !== 9) return cedula;\n  \n  return `${clean[0]}-${clean.substring(1, 5)}-${clean.substring(5)}`;\n};\n\n/**\n * Valida número de teléfono costarricense\n * Formatos aceptados: 8888-8888, 88888888, 2222-2222, 22222222\n */\nexport const validatePhoneFormat = (phone) => {\n  if (!phone) return { valid: false, error: 'Teléfono es requerido' };\n  \n  // Remover espacios y guiones\n  const cleanPhone = phone.replace(/[\\s-]/g, '');\n  \n  // Debe tener 8 dígitos\n  if (cleanPhone.length !== 8) {\n    return { valid: false, error: 'El teléfono debe tener 8 dígitos' };\n  }\n  \n  // Solo números\n  if (!/^\\d{8}$/.test(cleanPhone)) {\n    return { valid: false, error: 'El teléfono solo debe contener números' };\n  }\n  \n  // Validar prefijos válidos en Costa Rica\n  const firstDigit = cleanPhone[0];\n  const validPrefixes = ['2', '4', '5', '6', '7', '8', '9'];\n  \n  if (!validPrefixes.includes(firstDigit)) {\n    return { valid: false, error: 'Prefijo de teléfono no válido para Costa Rica' };\n  }\n  \n  return { valid: true, cleanPhone, formatted: formatPhone(cleanPhone) };\n};\n\n/**\n * Formatea número de teléfono con guión\n * Ejemplo: \"88888888\" -> \"8888-8888\"\n */\nexport const formatPhone = (phone) => {\n  if (!phone) return '';\n  \n  const clean = phone.replace(/[\\s-]/g, '');\n  if (clean.length !== 8) return phone;\n  \n  return `${clean.substring(0, 4)}-${clean.substring(4)}`;\n};\n\n/**\n * Valida email\n */\nexport const validateEmail = (email) => {\n  if (!email) return { valid: false, error: 'Email es requerido' };\n  \n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  \n  if (!emailRegex.test(email)) {\n    return { valid: false, error: 'Formato de email inválido' };\n  }\n  \n  return { valid: true };\n};\n\n/**\n * Valida nombre de usuario\n * - Mínimo 3 caracteres\n * - Solo letras, números y guiones bajos\n * - Debe empezar con letra\n */\nexport const validateUsername = (username) => {\n  if (!username) return { valid: false, error: 'Nombre de usuario es requerido' };\n  \n  if (username.length < 3) {\n    return { valid: false, error: 'Mínimo 3 caracteres' };\n  }\n  \n  if (username.length > 20) {\n    return { valid: false, error: 'Máximo 20 caracteres' };\n  }\n  \n  // Solo letras, números y guiones bajos\n  if (!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(username)) {\n    return { valid: false, error: 'Solo letras, números y guiones bajos. Debe empezar con letra' };\n  }\n  \n  return { valid: true };\n};\n\n/**\n * Valida contraseña\n * - Mínimo 6 caracteres\n * - Al menos una letra y un número\n */\nexport const validatePassword = (password) => {\n  if (!password) return { valid: false, error: 'Contraseña es requerida' };\n  \n  if (password.length < 6) {\n    return { valid: false, error: 'Mínimo 6 caracteres' };\n  }\n  \n  // Al menos una letra\n  if (!/[a-zA-Z]/.test(password)) {\n    return { valid: false, error: 'Debe contener al menos una letra' };\n  }\n  \n  // Al menos un número\n  if (!/\\d/.test(password)) {\n    return { valid: false, error: 'Debe contener al menos un número' };\n  }\n  \n  return { valid: true };\n};\n\n/**\n * Valida formulario completo de registro\n */\nexport const validateRegistrationForm = (formData) => {\n  const errors = {};\n  \n  // Validar cada campo\n  const usernameValidation = validateUsername(formData.username);\n  if (!usernameValidation.valid) errors.username = usernameValidation.error;\n  \n  const emailValidation = validateEmail(formData.email);\n  if (!emailValidation.valid) errors.email = emailValidation.error;\n  \n  const passwordValidation = validatePassword(formData.password);\n  if (!passwordValidation.valid) errors.password = passwordValidation.error;\n  \n  const phoneValidation = validatePhoneFormat(formData.phone);\n  if (!phoneValidation.valid) errors.phone = phoneValidation.error;\n  \n  const cedulaValidation = validateCedulaFormat(formData.cedula);\n  if (!cedulaValidation.valid) errors.cedula = cedulaValidation.error;\n  \n  if (!formData.province) {\n    errors.province = 'Provincia es requerida';\n  }\n  \n  const isValid = Object.keys(errors).length === 0;\n  \n  return {\n    valid: isValid,\n    errors,\n    // Datos formateados si son válidos\n    formattedData: isValid ? {\n      ...formData,\n      phone: phoneValidation.formatted || formData.phone,\n      cedula: cedulaValidation.formatted || formData.cedula\n    } : null\n  };\n};\n\n// Utilidad para obtener mensaje de error amigable\nexport const getValidationMessage = (field, error) => {\n  const messages = {\n    cedula: 'Cédula: ' + error,\n    phone: 'Teléfono: ' + error,\n    email: 'Email: ' + error,\n    username: 'Usuario: ' + error,\n    password: 'Contraseña: ' + error,\n    province: 'Provincia: ' + error\n  };\n  \n  return messages[field] || error;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}