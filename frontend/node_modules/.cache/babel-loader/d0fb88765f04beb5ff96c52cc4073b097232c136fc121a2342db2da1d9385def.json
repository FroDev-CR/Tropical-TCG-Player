{"ast":null,"code":"// src/services/api.js\n// Cliente API REST para comunicarse con el backend Node.js\n// Reemplaza toda la funcionalidad de Firebase\nimport axios from'axios';class APIClient{constructor(){// URL base del backend Node.js\nthis.baseURL=process.env.REACT_APP_API_URL||'http://localhost:5000/api/v1';// Crear instancia de axios con configuración base\nthis.client=axios.create({baseURL:this.baseURL,timeout:10000,// 10 segundos timeout\nheaders:{'Content-Type':'application/json'}});// Interceptor para agregar token automáticamente\nthis.client.interceptors.request.use(config=>{const token=this.getStoredToken();if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// Interceptor para manejar respuestas y errores globalmente\nthis.client.interceptors.response.use(response=>response,async error=>{var _error$response;const originalRequest=error.config;// Si el token expiró, intentar renovarlo\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!originalRequest._retry){originalRequest._retry=true;try{await this.refreshToken();const newToken=this.getStoredToken();originalRequest.headers.Authorization=`Bearer ${newToken}`;return this.client(originalRequest);}catch(refreshError){// Si el refresh falla, limpiar tokens y redirigir al login\nthis.clearTokens();window.location.href='/';return Promise.reject(refreshError);}}return Promise.reject(error);});}// ===================\n// GESTIÓN DE TOKENS\n// ===================\ngetStoredToken(){return localStorage.getItem('tropical_tcg_token');}getStoredRefreshToken(){return localStorage.getItem('tropical_tcg_refresh_token');}setTokens(accessToken,refreshToken){localStorage.setItem('tropical_tcg_token',accessToken);if(refreshToken){localStorage.setItem('tropical_tcg_refresh_token',refreshToken);}}clearTokens(){localStorage.removeItem('tropical_tcg_token');localStorage.removeItem('tropical_tcg_refresh_token');}async refreshToken(){const refreshToken=this.getStoredRefreshToken();if(!refreshToken){throw new Error('No refresh token available');}const response=await axios.post(`${this.baseURL}/auth/refresh-token`,{refreshToken});const{accessToken,refreshToken:newRefreshToken}=response.data.tokens;this.setTokens(accessToken,newRefreshToken);return response.data;}// ===================\n// AUTENTICACIÓN\n// ===================\nasync register(userData){try{const response=await this.client.post('/auth/register',userData);if(response.data.success&&response.data.tokens){this.setTokens(response.data.tokens.accessToken,response.data.tokens.refreshToken);}return response.data;}catch(error){throw this.handleError(error);}}async login(email,password){try{const response=await this.client.post('/auth/login',{email,password});if(response.data.success&&response.data.tokens){this.setTokens(response.data.tokens.accessToken,response.data.tokens.refreshToken);}return response.data;}catch(error){throw this.handleError(error);}}async logout(){try{const refreshToken=this.getStoredRefreshToken();if(refreshToken){await this.client.post('/auth/logout',{refreshToken});}}catch(error){console.warn('Error during logout:',error);}finally{this.clearTokens();}}async verifyToken(){try{const response=await this.client.get('/auth/verify-token');return response.data;}catch(error){throw this.handleError(error);}}async changePassword(currentPassword,newPassword){try{const response=await this.client.post('/auth/change-password',{currentPassword,newPassword});return response.data;}catch(error){throw this.handleError(error);}}// ===================\n// USUARIOS\n// ===================\nasync getProfile(){try{const response=await this.client.get('/users/profile');return response.data;}catch(error){throw this.handleError(error);}}async updateProfile(profileData){try{const response=await this.client.put('/users/profile',profileData);return response.data;}catch(error){throw this.handleError(error);}}async updateSettings(settings){try{const response=await this.client.put('/users/settings',settings);return response.data;}catch(error){throw this.handleError(error);}}async getUserStats(){try{const response=await this.client.get('/users/stats');return response.data;}catch(error){throw this.handleError(error);}}async searchUsers(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await this.client.get('/users/search',{params});return response.data;}catch(error){throw this.handleError(error);}}async getPublicProfile(userId){try{const response=await this.client.get(`/users/${userId}`);return response.data;}catch(error){throw this.handleError(error);}}async toggleRecommendation(userId){try{const response=await this.client.post(`/users/${userId}/recommend`);return response.data;}catch(error){throw this.handleError(error);}}async uploadProfilePicture(file){try{const formData=new FormData();formData.append('profilePicture',file);const response=await this.client.post('/users/profile/picture',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){throw this.handleError(error);}}async deleteProfilePicture(){try{const response=await this.client.delete('/users/profile/picture');return response.data;}catch(error){throw this.handleError(error);}}// ===================\n// LISTINGS\n// ===================\nasync getListings(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await this.client.get('/listings',{params});return response.data;}catch(error){throw this.handleError(error);}}async getListing(listingId){try{const response=await this.client.get(`/listings/${listingId}`);return response.data;}catch(error){throw this.handleError(error);}}async getMyListings(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await this.client.get('/listings/my/listings',{params});return response.data;}catch(error){throw this.handleError(error);}}async createListing(listingData){try{const response=await this.client.post('/listings',listingData);return response.data;}catch(error){throw this.handleError(error);}}async updateListing(listingId,updates){try{const response=await this.client.put(`/listings/${listingId}`,updates);return response.data;}catch(error){throw this.handleError(error);}}async deleteListing(listingId){try{const response=await this.client.delete(`/listings/${listingId}`);return response.data;}catch(error){throw this.handleError(error);}}async getTCGStats(){try{const response=await this.client.get('/listings/stats');return response.data;}catch(error){throw this.handleError(error);}}// ===================\n// UTILIDADES\n// ===================\nhandleError(error){console.error('API Error:',error);// Si es un error de red\nif(error.code==='NETWORK_ERROR'||!error.response){return{error:'Error de conexión',message:'No se pudo conectar al servidor. Verifica tu conexión a internet.',code:'NETWORK_ERROR'};}// Si el servidor respondió con un error\nif(error.response){const{status,data}=error.response;// Errores HTTP específicos\nif(status>=500){return{error:'Error del servidor',message:'Error interno del servidor. Intenta de nuevo más tarde.',code:'SERVER_ERROR',status};}// Errores de cliente (400-499)\nreturn{error:data.error||'Error de solicitud',message:data.message||'Error procesando la solicitud',details:data.details,code:'CLIENT_ERROR',status};}// Error genérico\nreturn{error:'Error desconocido',message:error.message||'Ocurrió un error inesperado',code:'UNKNOWN_ERROR'};}// Verificar si el usuario está autenticado\nisAuthenticated(){return!!this.getStoredToken();}// Obtener información del usuario desde el token (decodificado básico)\ngetCurrentUser(){const token=this.getStoredToken();if(!token)return null;try{// Decodificar el payload del JWT (sin verificación de firma)\nconst base64Url=token.split('.')[1];const base64=base64Url.replace(/-/g,'+').replace(/_/g,'/');const jsonPayload=decodeURIComponent(atob(base64).split('').map(c=>'%'+('00'+c.charCodeAt(0).toString(16)).slice(-2)).join(''));const payload=JSON.parse(jsonPayload);// Verificar si el token no ha expirado\nif(payload.exp&&payload.exp<Date.now()/1000){return null;}return{userId:payload.userId,username:payload.username,email:payload.email,role:payload.role,verified:payload.verified};}catch(error){console.error('Error decoding token:',error);return null;}}}// Instancia singleton del cliente API\nconst apiClient=new APIClient();export default apiClient;","map":{"version":3,"names":["axios","APIClient","constructor","baseURL","process","env","REACT_APP_API_URL","client","create","timeout","headers","interceptors","request","use","config","token","getStoredToken","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","newToken","refreshError","clearTokens","window","location","href","localStorage","getItem","getStoredRefreshToken","setTokens","accessToken","setItem","removeItem","Error","post","newRefreshToken","data","tokens","register","userData","success","handleError","login","email","password","logout","console","warn","verifyToken","get","changePassword","currentPassword","newPassword","getProfile","updateProfile","profileData","put","updateSettings","settings","getUserStats","searchUsers","params","arguments","length","undefined","getPublicProfile","userId","toggleRecommendation","uploadProfilePicture","file","formData","FormData","append","deleteProfilePicture","delete","getListings","getListing","listingId","getMyListings","createListing","listingData","updateListing","updates","deleteListing","getTCGStats","code","message","details","isAuthenticated","getCurrentUser","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","payload","JSON","parse","exp","Date","now","username","role","verified","apiClient"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/services/api.js"],"sourcesContent":["// src/services/api.js\n// Cliente API REST para comunicarse con el backend Node.js\n// Reemplaza toda la funcionalidad de Firebase\n\nimport axios from 'axios';\n\nclass APIClient {\n  constructor() {\n    // URL base del backend Node.js\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api/v1';\n    \n    // Crear instancia de axios con configuración base\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      timeout: 10000, // 10 segundos timeout\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Interceptor para agregar token automáticamente\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = this.getStoredToken();\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Interceptor para manejar respuestas y errores globalmente\n    this.client.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const originalRequest = error.config;\n\n        // Si el token expiró, intentar renovarlo\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n\n          try {\n            await this.refreshToken();\n            const newToken = this.getStoredToken();\n            originalRequest.headers.Authorization = `Bearer ${newToken}`;\n            return this.client(originalRequest);\n          } catch (refreshError) {\n            // Si el refresh falla, limpiar tokens y redirigir al login\n            this.clearTokens();\n            window.location.href = '/';\n            return Promise.reject(refreshError);\n          }\n        }\n\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // ===================\n  // GESTIÓN DE TOKENS\n  // ===================\n\n  getStoredToken() {\n    return localStorage.getItem('tropical_tcg_token');\n  }\n\n  getStoredRefreshToken() {\n    return localStorage.getItem('tropical_tcg_refresh_token');\n  }\n\n  setTokens(accessToken, refreshToken) {\n    localStorage.setItem('tropical_tcg_token', accessToken);\n    if (refreshToken) {\n      localStorage.setItem('tropical_tcg_refresh_token', refreshToken);\n    }\n  }\n\n  clearTokens() {\n    localStorage.removeItem('tropical_tcg_token');\n    localStorage.removeItem('tropical_tcg_refresh_token');\n  }\n\n  async refreshToken() {\n    const refreshToken = this.getStoredRefreshToken();\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    const response = await axios.post(`${this.baseURL}/auth/refresh-token`, {\n      refreshToken\n    });\n\n    const { accessToken, refreshToken: newRefreshToken } = response.data.tokens;\n    this.setTokens(accessToken, newRefreshToken);\n\n    return response.data;\n  }\n\n  // ===================\n  // AUTENTICACIÓN\n  // ===================\n\n  async register(userData) {\n    try {\n      const response = await this.client.post('/auth/register', userData);\n      \n      if (response.data.success && response.data.tokens) {\n        this.setTokens(response.data.tokens.accessToken, response.data.tokens.refreshToken);\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async login(email, password) {\n    try {\n      const response = await this.client.post('/auth/login', {\n        email,\n        password\n      });\n      \n      if (response.data.success && response.data.tokens) {\n        this.setTokens(response.data.tokens.accessToken, response.data.tokens.refreshToken);\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async logout() {\n    try {\n      const refreshToken = this.getStoredRefreshToken();\n      if (refreshToken) {\n        await this.client.post('/auth/logout', { refreshToken });\n      }\n    } catch (error) {\n      console.warn('Error during logout:', error);\n    } finally {\n      this.clearTokens();\n    }\n  }\n\n  async verifyToken() {\n    try {\n      const response = await this.client.get('/auth/verify-token');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await this.client.post('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ===================\n  // USUARIOS\n  // ===================\n\n  async getProfile() {\n    try {\n      const response = await this.client.get('/users/profile');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async updateProfile(profileData) {\n    try {\n      const response = await this.client.put('/users/profile', profileData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async updateSettings(settings) {\n    try {\n      const response = await this.client.put('/users/settings', settings);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getUserStats() {\n    try {\n      const response = await this.client.get('/users/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async searchUsers(params = {}) {\n    try {\n      const response = await this.client.get('/users/search', { params });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getPublicProfile(userId) {\n    try {\n      const response = await this.client.get(`/users/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async toggleRecommendation(userId) {\n    try {\n      const response = await this.client.post(`/users/${userId}/recommend`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async uploadProfilePicture(file) {\n    try {\n      const formData = new FormData();\n      formData.append('profilePicture', file);\n\n      const response = await this.client.post('/users/profile/picture', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async deleteProfilePicture() {\n    try {\n      const response = await this.client.delete('/users/profile/picture');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ===================\n  // LISTINGS\n  // ===================\n\n  async getListings(params = {}) {\n    try {\n      const response = await this.client.get('/listings', { params });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getListing(listingId) {\n    try {\n      const response = await this.client.get(`/listings/${listingId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getMyListings(params = {}) {\n    try {\n      const response = await this.client.get('/listings/my/listings', { params });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async createListing(listingData) {\n    try {\n      const response = await this.client.post('/listings', listingData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async updateListing(listingId, updates) {\n    try {\n      const response = await this.client.put(`/listings/${listingId}`, updates);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async deleteListing(listingId) {\n    try {\n      const response = await this.client.delete(`/listings/${listingId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getTCGStats() {\n    try {\n      const response = await this.client.get('/listings/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ===================\n  // UTILIDADES\n  // ===================\n\n  handleError(error) {\n    console.error('API Error:', error);\n\n    // Si es un error de red\n    if (error.code === 'NETWORK_ERROR' || !error.response) {\n      return {\n        error: 'Error de conexión',\n        message: 'No se pudo conectar al servidor. Verifica tu conexión a internet.',\n        code: 'NETWORK_ERROR'\n      };\n    }\n\n    // Si el servidor respondió con un error\n    if (error.response) {\n      const { status, data } = error.response;\n      \n      // Errores HTTP específicos\n      if (status >= 500) {\n        return {\n          error: 'Error del servidor',\n          message: 'Error interno del servidor. Intenta de nuevo más tarde.',\n          code: 'SERVER_ERROR',\n          status\n        };\n      }\n\n      // Errores de cliente (400-499)\n      return {\n        error: data.error || 'Error de solicitud',\n        message: data.message || 'Error procesando la solicitud',\n        details: data.details,\n        code: 'CLIENT_ERROR',\n        status\n      };\n    }\n\n    // Error genérico\n    return {\n      error: 'Error desconocido',\n      message: error.message || 'Ocurrió un error inesperado',\n      code: 'UNKNOWN_ERROR'\n    };\n  }\n\n  // Verificar si el usuario está autenticado\n  isAuthenticated() {\n    return !!this.getStoredToken();\n  }\n\n  // Obtener información del usuario desde el token (decodificado básico)\n  getCurrentUser() {\n    const token = this.getStoredToken();\n    if (!token) return null;\n\n    try {\n      // Decodificar el payload del JWT (sin verificación de firma)\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split('')\n          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n\n      const payload = JSON.parse(jsonPayload);\n\n      // Verificar si el token no ha expirado\n      if (payload.exp && payload.exp < Date.now() / 1000) {\n        return null;\n      }\n\n      return {\n        userId: payload.userId,\n        username: payload.username,\n        email: payload.email,\n        role: payload.role,\n        verified: payload.verified\n      };\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n}\n\n// Instancia singleton del cliente API\nconst apiClient = new APIClient();\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}