{"ast":null,"code":"var _jsxFileName = \"/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/CartContext.js\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport apiClient from '../services/api';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [cart, setCart] = useState([]);\n  const [user, setUser] = useState(null);\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Escuchar cambios en la autenticaci√≥n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async firebaseUser => {\n      setUser(firebaseUser);\n      if (firebaseUser) {\n        // Cargar datos del usuario desde Firebase\n        try {\n          const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\n          if (userDoc.exists()) {\n            const data = userDoc.data();\n            setUserData(data);\n\n            // Cargar carrito del usuario desde Firebase\n            const userCart = data.cart || [];\n            setCart(userCart);\n          } else {\n            // Si el usuario no existe en Firestore, crear el documento con estructura P2P completa\n            const newUserData = {\n              uid: firebaseUser.uid,\n              email: firebaseUser.email,\n              displayName: firebaseUser.displayName || firebaseUser.email,\n              username: firebaseUser.displayName || firebaseUser.email.split('@')[0],\n              // Informaci√≥n personal y contacto\n              phone: '',\n              whatsapp: '',\n              // Puede ser diferente al tel√©fono\n              province: '',\n              canton: '',\n              distrito: '',\n              address: '',\n              // Informaci√≥n de identidad\n              cedula: '',\n              fullName: '',\n              // Nombre completo seg√∫n c√©dula\n              birthDate: '',\n              // Foto de perfil\n              profilePhoto: '',\n              // URL de la foto en Firebase Storage\n              profilePhotoThumbnail: '',\n              // Versi√≥n peque√±a de la foto\n\n              // Timestamps\n              createdAt: new Date(),\n              updatedAt: new Date(),\n              lastLogin: new Date(),\n              // Datos del carrito y binders\n              cart: [],\n              binders: [],\n              listings: [],\n              // Sistema de calificaciones P2P\n              rating: 0,\n              reviews: 0,\n              ratingsReceived: [],\n              ratingsGiven: [],\n              // Estad√≠sticas P2P detalladas\n              transactionStats: {\n                asBuyer: {\n                  total: 0,\n                  completed: 0,\n                  cancelled: 0,\n                  disputed: 0,\n                  totalSpent: 0,\n                  averageRating: 0\n                },\n                asSeller: {\n                  total: 0,\n                  completed: 0,\n                  cancelled: 0,\n                  disputed: 0,\n                  totalEarned: 0,\n                  averageRating: 0\n                },\n                general: {\n                  totalTransactions: 0,\n                  successRate: 0,\n                  responseTime: 0,\n                  // Tiempo promedio de respuesta en horas\n                  memberSince: new Date()\n                }\n              },\n              // Configuraciones de notificaciones\n              notificationSettings: {\n                email: true,\n                whatsapp: true,\n                inApp: true,\n                newMessages: true,\n                transactionUpdates: true,\n                marketingEmails: false\n              },\n              // Estado de verificaci√≥n mejorado\n              verification: {\n                email: firebaseUser.emailVerified || false,\n                phone: false,\n                whatsapp: false,\n                identity: false,\n                // Verificaci√≥n con c√©dula\n                address: false,\n                bankAccount: false\n              },\n              // Informaci√≥n adicional para confianza\n              socialProof: {\n                facebookProfile: '',\n                instagramProfile: '',\n                linkedinProfile: '',\n                websiteUrl: ''\n              },\n              // Preferencias de venta/compra\n              preferences: {\n                preferredPaymentMethods: ['sinpe', 'efectivo', 'transferencia'],\n                preferredDeliveryMethods: ['pickup', 'delivery', 'shipping'],\n                maxDeliveryDistance: 50,\n                // km\n                acceptsNegotiation: true,\n                autoAcceptOffers: false\n              },\n              // Estado de la cuenta\n              accountStatus: {\n                isActive: true,\n                isSuspended: false,\n                suspensionReason: '',\n                isVerified: false,\n                // Se activa cuando se verifican datos importantes\n                trustLevel: 'new' // 'new', 'basic', 'verified', 'trusted', 'premium'\n              }\n            };\n            await setDoc(doc(db, 'users', firebaseUser.uid), newUserData);\n            setUserData(newUserData);\n            setCart([]);\n          }\n        } catch (error) {\n          console.error('Error cargando datos del usuario:', error);\n          // Fallback al localStorage si hay error\n          const savedCart = localStorage.getItem('cart');\n          if (savedCart) setCart(JSON.parse(savedCart));\n        }\n      } else {\n        // Usuario no autenticado, usar localStorage\n        const savedCart = localStorage.getItem('cart');\n        if (savedCart) setCart(JSON.parse(savedCart));\n        setUserData(null);\n      }\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, []);\n  const addToCart = async (listing, requestedQuantity = 1) => {\n    try {\n      console.log('üõí Intentando agregar al carrito:', listing === null || listing === void 0 ? void 0 : listing.cardName, 'ID:', (listing === null || listing === void 0 ? void 0 : listing.id) || (listing === null || listing === void 0 ? void 0 : listing.listingId), 'Cantidad:', requestedQuantity);\n      console.log('üìã Listing completo:', listing);\n\n      // Normalizar el ID del listing\n      const listingId = listing.id || listing.listingId;\n      if (!listing || !listingId) {\n        console.error('‚ùå Listing inv√°lido:', listing);\n        alert('No se puede agregar al carrito: Datos de carta inv√°lidos');\n        return false;\n      }\n\n      // Verificar disponibilidad\n      const availability = await checkListingAvailability(listingId, requestedQuantity);\n      if (!availability.available) {\n        console.log('‚ùå No disponible:', availability.reason);\n        alert(`No se puede agregar al carrito: ${availability.reason}`);\n        return false;\n      }\n\n      // Verificar si ya est√° en el carrito\n      console.log('üõí Carrito actual:', cart);\n      console.log('üîç Buscando item existente con ID:', listingId);\n      let existingItemIndex = -1;\n      if (!Array.isArray(cart)) {\n        console.error('‚ùå Carrito no es un array:', cart);\n        setCart([]);\n      } else {\n        existingItemIndex = cart.findIndex(item => item && (item.id === listingId || item.listingId === listingId));\n      }\n      console.log('üìç √çndice de item existente:', existingItemIndex);\n      let newCart;\n      if (existingItemIndex >= 0) {\n        // Si ya existe, verificar si la nueva cantidad total no excede la disponible\n        const currentQuantityInCart = cart[existingItemIndex].quantity || 1;\n        const totalQuantity = currentQuantityInCart + requestedQuantity;\n        if (totalQuantity > availability.availableQuantity) {\n          alert(`Solo puedes agregar ${availability.availableQuantity - currentQuantityInCart} unidades m√°s de esta carta`);\n          return false;\n        }\n        newCart = [...cart];\n        newCart[existingItemIndex].quantity = totalQuantity;\n      } else {\n        newCart = [...cart, {\n          ...listing,\n          id: listingId,\n          // Asegurar que tenga 'id'\n          listingId: listingId,\n          // Mantener 'listingId' tambi√©n\n          quantity: requestedQuantity,\n          addedAt: new Date(),\n          availableQuantity: availability.availableQuantity\n        }];\n      }\n      setCart(newCart);\n\n      // Guardar en localStorage para usuarios no autenticados\n      localStorage.setItem('cart', JSON.stringify(newCart));\n\n      // Guardar en Firebase si el usuario est√° autenticado\n      if (user) {\n        try {\n          await updateDoc(doc(db, 'users', user.uid), {\n            cart: newCart\n          });\n        } catch (error) {\n          console.error('Error guardando carrito en Firebase:', error);\n        }\n      }\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error agregando al carrito:', error);\n      console.error('Stack trace:', error.stack);\n      console.error('Listing que caus√≥ error:', listing);\n      alert(`Error agregando al carrito: ${error.message}`);\n      return false;\n    }\n  };\n  const removeFromCart = async listingId => {\n    const newCart = cart.filter(item => (item.listingId || item.id) !== listingId);\n    setCart(newCart);\n\n    // Guardar en localStorage\n    localStorage.setItem('cart', JSON.stringify(newCart));\n\n    // Guardar en Firebase si el usuario est√° autenticado\n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: newCart\n        });\n      } catch (error) {\n        console.error('Error guardando carrito en Firebase:', error);\n      }\n    }\n  };\n  const updateCartItemQuantity = async (listingId, quantity) => {\n    const newCart = cart.map(item => item.id === listingId ? {\n      ...item,\n      quantity: Math.max(1, quantity)\n    } : item);\n    setCart(newCart);\n\n    // Guardar en localStorage\n    localStorage.setItem('cart', JSON.stringify(newCart));\n\n    // Guardar en Firebase si el usuario est√° autenticado\n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: newCart\n        });\n      } catch (error) {\n        console.error('Error guardando carrito en Firebase:', error);\n      }\n    }\n  };\n  const clearCart = async () => {\n    setCart([]);\n    localStorage.removeItem('cart');\n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: []\n        });\n      } catch (error) {\n        console.error('Error limpiando carrito en Firebase:', error);\n      }\n    }\n  };\n  const syncUserData = async () => {\n    if (user) {\n      try {\n        const userDoc = await getDoc(doc(db, 'users', user.uid));\n        if (userDoc.exists()) {\n          const data = userDoc.data();\n          setUserData(data);\n          setCart(data.cart || []);\n        }\n      } catch (error) {\n        console.error('Error sincronizando datos del usuario:', error);\n      }\n    }\n  };\n  const createTransaction = async (items, contactMethod = 'whatsapp', buyerNotes = '') => {\n    if (!user || !items.length) return null;\n    try {\n      const transaction = {\n        buyerId: user.uid,\n        buyerName: (userData === null || userData === void 0 ? void 0 : userData.username) || (userData === null || userData === void 0 ? void 0 : userData.displayName) || user.email,\n        buyerNotes: buyerNotes.trim(),\n        items: items.map(item => ({\n          listingId: item.id,\n          cardId: item.cardId,\n          cardName: item.cardName,\n          cardImage: item.cardImage,\n          sellerId: item.sellerId,\n          sellerName: item.sellerName,\n          price: item.price,\n          quantity: item.quantity || 1,\n          condition: item.condition\n        })),\n        totalAmount: items.reduce((sum, item) => sum + item.price * (item.quantity || 1), 0),\n        contactMethod,\n        status: 'initiated',\n        // initiated -> contacted -> completed -> rated\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      const transactionRef = await addDoc(collection(db, 'transactions'), transaction);\n\n      // Actualizar el carrito del usuario\n      await clearCart();\n      return transactionRef.id;\n    } catch (error) {\n      console.error('Error creando transacci√≥n:', error);\n      return null;\n    }\n  };\n  const updateTransactionStatus = async (transactionId, status) => {\n    if (!user) return false;\n    try {\n      await updateDoc(doc(db, 'transactions', transactionId), {\n        status,\n        updatedAt: new Date()\n      });\n      return true;\n    } catch (error) {\n      console.error('Error actualizando transacci√≥n:', error);\n      return false;\n    }\n  };\n\n  // Funciones de inventario\n  const checkListingAvailability = async (listingId, requestedQuantity = 1) => {\n    try {\n      console.log('üîç Verificando disponibilidad para listing:', listingId, 'cantidad:', requestedQuantity);\n      const listingRef = doc(db, 'listings', listingId);\n      const listingSnap = await getDoc(listingRef);\n      if (!listingSnap.exists()) {\n        console.log('‚ùå Listing no existe:', listingId);\n        return {\n          available: false,\n          reason: 'El listado no existe'\n        };\n      }\n      const listingData = listingSnap.data();\n      console.log('üì¶ Datos del listing:', listingData);\n      const availableQuantity = listingData.availableQuantity || listingData.quantity || 0;\n      const status = listingData.status || 'active';\n      console.log('üìä Estado:', status, 'Disponible:', availableQuantity, 'Solicitado:', requestedQuantity);\n      if (status === 'inactive') {\n        return {\n          available: false,\n          reason: 'El listado est√° inactivo'\n        };\n      }\n      if (status === 'sold_out' || availableQuantity === 0) {\n        return {\n          available: false,\n          reason: 'Producto agotado'\n        };\n      }\n      if (availableQuantity < requestedQuantity) {\n        return {\n          available: false,\n          reason: `Solo hay ${availableQuantity} unidad${availableQuantity > 1 ? 'es' : ''} disponible${availableQuantity > 1 ? 's' : ''}`,\n          availableQuantity\n        };\n      }\n      console.log('‚úÖ Disponibilidad verificada exitosamente');\n      return {\n        available: true,\n        availableQuantity,\n        status: listingData.status\n      };\n    } catch (error) {\n      console.error('‚ùå Error verificando disponibilidad:', error);\n      console.error('Error details:', error.message, error.code);\n      return {\n        available: false,\n        reason: `Error verificando disponibilidad: ${error.message}`\n      };\n    }\n  };\n  const getTotalItems = () => {\n    return cart.reduce((total, item) => total + (item.quantity || 1), 0);\n  };\n  const getTotalPrice = () => {\n    return cart.reduce((total, item) => total + item.price * (item.quantity || 1), 0);\n  };\n  const reduceListingQuantity = async (listingId, quantityToReduce) => {\n    try {\n      const result = await runTransaction(db, async transaction => {\n        const listingRef = doc(db, 'listings', listingId);\n        const listingSnap = await transaction.get(listingRef);\n        if (!listingSnap.exists()) {\n          throw new Error('El listado no existe');\n        }\n        const listingData = listingSnap.data();\n        const currentAvailable = listingData.availableQuantity || listingData.quantity || 0;\n        if (currentAvailable < quantityToReduce) {\n          throw new Error(`Solo hay ${currentAvailable} unidades disponibles`);\n        }\n        const newAvailable = currentAvailable - quantityToReduce;\n        const newStatus = newAvailable === 0 ? 'sold_out' : 'active';\n        transaction.update(listingRef, {\n          availableQuantity: newAvailable,\n          status: newStatus,\n          updatedAt: new Date()\n        });\n        return {\n          success: true,\n          newAvailable,\n          newStatus\n        };\n      });\n      return result;\n    } catch (error) {\n      console.error('Error reduciendo cantidad del listado:', error);\n      throw error;\n    }\n  };\n\n  // ===============================================\n  // NUEVAS FUNCIONES P2P - SPRINT 2\n  // ===============================================\n\n  // Verificar disponibilidad at√≥mica para checkout\n  const checkAtomicAvailability = async items => {\n    try {\n      const checkAvailability = httpsCallable(functions, 'checkAtomicAvailability');\n      const result = await checkAvailability({\n        items: items.map(item => ({\n          listingId: item.id,\n          requestedQuantity: item.quantity || 1\n        }))\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error verificando disponibilidad at√≥mica:', error);\n      throw error;\n    }\n  };\n\n  // Crear transacci√≥n P2P pendiente con reserva de inventario\n  const createPendingTransaction = async (vendorItems, contactMethod = 'whatsapp', buyerNotes = '') => {\n    if (!user || !vendorItems.length) {\n      throw new Error('Usuario no autenticado o items vac√≠os');\n    }\n    try {\n      const createTransaction = httpsCallable(functions, 'createPendingTransaction');\n      const transactionData = {\n        buyerId: user.uid,\n        buyerName: (userData === null || userData === void 0 ? void 0 : userData.username) || (userData === null || userData === void 0 ? void 0 : userData.displayName) || user.email,\n        buyerNotes: buyerNotes.trim(),\n        vendorId: vendorItems[0].sellerId,\n        // Todos los items son del mismo vendedor\n        items: vendorItems.map(item => ({\n          listingId: item.id,\n          cardId: item.cardId,\n          cardName: item.cardName,\n          cardImage: item.cardImage,\n          sellerId: item.sellerId,\n          sellerName: item.sellerName,\n          price: item.price,\n          quantity: item.quantity || 1,\n          condition: item.condition\n        })),\n        totalAmount: vendorItems.reduce((sum, item) => sum + item.price * (item.quantity || 1), 0),\n        contactMethod,\n        shippingCost: vendorItems[0].shippingIncluded ? 0 : 600\n      };\n      const result = await createTransaction(transactionData);\n\n      // Remover items del carrito que fueron procesados\n      const processedListingIds = vendorItems.map(item => item.id);\n      const newCart = cart.filter(item => !processedListingIds.includes(item.id));\n      setCart(newCart);\n\n      // Actualizar localStorage y Firebase\n      localStorage.setItem('cart', JSON.stringify(newCart));\n      if (user) {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: newCart\n        });\n      }\n      return result.data;\n    } catch (error) {\n      console.error('Error creando transacci√≥n P2P:', error);\n      throw error;\n    }\n  };\n\n  // Obtener items del carrito agrupados por vendedor\n  const getCartByVendor = () => {\n    const vendors = {};\n    cart.forEach(item => {\n      const vendorId = item.sellerId;\n      if (!vendors[vendorId]) {\n        vendors[vendorId] = {\n          vendorId,\n          vendorName: item.sellerName,\n          vendorPhone: item.userPhone,\n          vendorEmail: item.userEmail,\n          items: [],\n          totalAmount: 0,\n          totalItems: 0,\n          hasShipping: false\n        };\n      }\n      vendors[vendorId].items.push(item);\n      vendors[vendorId].totalAmount += item.price * (item.quantity || 1);\n      vendors[vendorId].totalItems += item.quantity || 1;\n\n      // Verificar si alg√∫n item no incluye env√≠o gratis\n      if (!item.shippingIncluded) {\n        vendors[vendorId].hasShipping = true;\n      }\n    });\n    return Object.values(vendors);\n  };\n\n  // Obtener transacciones del usuario actual\n  const getUserTransactions = async (type = 'all') => {\n    if (!user) return [];\n    try {\n      const getUserTransactions = httpsCallable(functions, 'getUserTransactions');\n      const result = await getUserTransactions({\n        userId: user.uid,\n        type // 'buyer', 'seller', 'all'\n      });\n      return result.data.transactions || [];\n    } catch (error) {\n      console.error('Error obteniendo transacciones del usuario:', error);\n      return [];\n    }\n  };\n\n  // Actualizar estado de transacci√≥n P2P\n  const updateTransactionP2P = async (transactionId, updateData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const updateTransaction = httpsCallable(functions, 'updateTransactionP2P');\n      const result = await updateTransaction({\n        transactionId,\n        userId: user.uid,\n        ...updateData\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error actualizando transacci√≥n P2P:', error);\n      throw error;\n    }\n  };\n\n  // Responder a una transacci√≥n como vendedor\n  const respondToTransaction = async (transactionId, action, responseData = {}) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const respondToTransaction = httpsCallable(functions, 'respondToTransaction');\n      const result = await respondToTransaction({\n        transactionId,\n        sellerId: user.uid,\n        action,\n        // 'accept' | 'reject'\n        ...responseData\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error respondiendo a transacci√≥n:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar entrega como vendedor\n  const confirmDelivery = async (transactionId, deliveryProof) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const confirmDelivery = httpsCallable(functions, 'confirmDelivery');\n      const result = await confirmDelivery({\n        transactionId,\n        sellerId: user.uid,\n        deliveryProof // { originStore, proofImage, notes }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando entrega:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar pago como vendedor\n  const confirmPayment = async (transactionId, paymentProof) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const confirmPayment = httpsCallable(functions, 'confirmPayment');\n      const result = await confirmPayment({\n        transactionId,\n        sellerId: user.uid,\n        paymentProof // { method, proofImage, amount, notes }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando pago:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar recibo como comprador\n  const confirmReceipt = async (transactionId, receiptData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const confirmReceipt = httpsCallable(functions, 'confirmReceipt');\n      const result = await confirmReceipt({\n        transactionId,\n        buyerId: user.uid,\n        ...receiptData // { destinationStore, satisfaction, notes }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando recibo:', error);\n      throw error;\n    }\n  };\n\n  // Enviar calificaci√≥n mutua\n  const submitRating = async (transactionId, ratingData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const submitRating = httpsCallable(functions, 'submitRating');\n      const result = await submitRating({\n        transactionId,\n        userId: user.uid,\n        ...ratingData // { rating, comment, category }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error enviando calificaci√≥n:', error);\n      throw error;\n    }\n  };\n\n  // Crear disputa/reporte\n  const createDispute = async (transactionId, disputeData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const createDispute = httpsCallable(functions, 'createDispute');\n      const result = await createDispute({\n        transactionId,\n        reporterId: user.uid,\n        ...disputeData // { type, description, evidence }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error creando disputa:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      // Funciones originales del carrito\n      cart,\n      addToCart,\n      removeFromCart,\n      updateCartItemQuantity,\n      clearCart,\n      getTotalItems,\n      getTotalPrice,\n      user,\n      userData,\n      loading,\n      syncUserData,\n      createTransaction,\n      updateTransactionStatus,\n      checkListingAvailability,\n      reduceListingQuantity,\n      // Nuevas funciones P2P\n      checkAtomicAvailability,\n      createPendingTransaction,\n      getCartByVendor,\n      getUserTransactions,\n      updateTransactionP2P,\n      respondToTransaction,\n      confirmDelivery,\n      confirmPayment,\n      confirmReceipt,\n      submitRating,\n      createDispute\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 741,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"Lpfc5uaKaZrQ4pNVKb/Vp4sOoMc=\");\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n  return useContext(CartContext);\n}\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","apiClient","useAuth","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","user","setUser","userData","setUserData","loading","setLoading","unsubscribe","onAuthStateChanged","auth","firebaseUser","userDoc","getDoc","doc","db","uid","exists","data","userCart","newUserData","email","displayName","username","split","phone","whatsapp","province","canton","distrito","address","cedula","fullName","birthDate","profilePhoto","profilePhotoThumbnail","createdAt","Date","updatedAt","lastLogin","binders","listings","rating","reviews","ratingsReceived","ratingsGiven","transactionStats","asBuyer","total","completed","cancelled","disputed","totalSpent","averageRating","asSeller","totalEarned","general","totalTransactions","successRate","responseTime","memberSince","notificationSettings","inApp","newMessages","transactionUpdates","marketingEmails","verification","emailVerified","identity","bankAccount","socialProof","facebookProfile","instagramProfile","linkedinProfile","websiteUrl","preferences","preferredPaymentMethods","preferredDeliveryMethods","maxDeliveryDistance","acceptsNegotiation","autoAcceptOffers","accountStatus","isActive","isSuspended","suspensionReason","isVerified","trustLevel","setDoc","error","console","savedCart","localStorage","getItem","JSON","parse","addToCart","listing","requestedQuantity","log","cardName","id","listingId","alert","availability","checkListingAvailability","available","reason","existingItemIndex","Array","isArray","findIndex","item","newCart","currentQuantityInCart","quantity","totalQuantity","availableQuantity","addedAt","setItem","stringify","updateDoc","stack","message","removeFromCart","filter","updateCartItemQuantity","map","Math","max","clearCart","removeItem","syncUserData","createTransaction","items","contactMethod","buyerNotes","length","transaction","buyerId","buyerName","trim","cardId","cardImage","sellerId","sellerName","price","condition","totalAmount","reduce","sum","status","transactionRef","addDoc","collection","updateTransactionStatus","transactionId","listingRef","listingSnap","listingData","code","getTotalItems","getTotalPrice","reduceListingQuantity","quantityToReduce","result","runTransaction","get","Error","currentAvailable","newAvailable","newStatus","update","success","checkAtomicAvailability","checkAvailability","httpsCallable","functions","createPendingTransaction","vendorItems","transactionData","vendorId","shippingCost","shippingIncluded","processedListingIds","includes","getCartByVendor","vendors","forEach","vendorName","vendorPhone","userPhone","vendorEmail","userEmail","totalItems","hasShipping","push","Object","values","getUserTransactions","type","userId","transactions","updateTransactionP2P","updateData","updateTransaction","respondToTransaction","action","responseData","confirmDelivery","deliveryProof","confirmPayment","paymentProof","confirmReceipt","receiptData","submitRating","ratingData","createDispute","disputeData","reporterId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/CartContext.js"],"sourcesContent":["// src/contexts/CartContext.js\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport apiClient from '../services/api';\nimport { useAuth } from './AuthContext';\n\nconst CartContext = createContext();\n\nexport function CartProvider({ children }) {\n  const [cart, setCart] = useState([]);\n  const [user, setUser] = useState(null);\n  const [userData, setUserData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Escuchar cambios en la autenticaci√≥n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      setUser(firebaseUser);\n      \n      if (firebaseUser) {\n        // Cargar datos del usuario desde Firebase\n        try {\n          const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\n          if (userDoc.exists()) {\n            const data = userDoc.data();\n            setUserData(data);\n            \n            // Cargar carrito del usuario desde Firebase\n            const userCart = data.cart || [];\n            setCart(userCart);\n          } else {\n            // Si el usuario no existe en Firestore, crear el documento con estructura P2P completa\n            const newUserData = {\n              uid: firebaseUser.uid,\n              email: firebaseUser.email,\n              displayName: firebaseUser.displayName || firebaseUser.email,\n              username: firebaseUser.displayName || firebaseUser.email.split('@')[0],\n              \n              // Informaci√≥n personal y contacto\n              phone: '',\n              whatsapp: '', // Puede ser diferente al tel√©fono\n              province: '',\n              canton: '',\n              distrito: '',\n              address: '',\n              \n              // Informaci√≥n de identidad\n              cedula: '',\n              fullName: '', // Nombre completo seg√∫n c√©dula\n              birthDate: '',\n              \n              // Foto de perfil\n              profilePhoto: '', // URL de la foto en Firebase Storage\n              profilePhotoThumbnail: '', // Versi√≥n peque√±a de la foto\n              \n              // Timestamps\n              createdAt: new Date(),\n              updatedAt: new Date(),\n              lastLogin: new Date(),\n              \n              // Datos del carrito y binders\n              cart: [],\n              binders: [],\n              listings: [],\n              \n              // Sistema de calificaciones P2P\n              rating: 0,\n              reviews: 0,\n              ratingsReceived: [],\n              ratingsGiven: [],\n              \n              // Estad√≠sticas P2P detalladas\n              transactionStats: {\n                asBuyer: {\n                  total: 0,\n                  completed: 0,\n                  cancelled: 0,\n                  disputed: 0,\n                  totalSpent: 0,\n                  averageRating: 0\n                },\n                asSeller: {\n                  total: 0,\n                  completed: 0,\n                  cancelled: 0,\n                  disputed: 0,\n                  totalEarned: 0,\n                  averageRating: 0\n                },\n                general: {\n                  totalTransactions: 0,\n                  successRate: 0,\n                  responseTime: 0, // Tiempo promedio de respuesta en horas\n                  memberSince: new Date()\n                }\n              },\n              \n              // Configuraciones de notificaciones\n              notificationSettings: {\n                email: true,\n                whatsapp: true,\n                inApp: true,\n                newMessages: true,\n                transactionUpdates: true,\n                marketingEmails: false\n              },\n              \n              // Estado de verificaci√≥n mejorado\n              verification: {\n                email: firebaseUser.emailVerified || false,\n                phone: false,\n                whatsapp: false,\n                identity: false, // Verificaci√≥n con c√©dula\n                address: false,\n                bankAccount: false\n              },\n              \n              // Informaci√≥n adicional para confianza\n              socialProof: {\n                facebookProfile: '',\n                instagramProfile: '',\n                linkedinProfile: '',\n                websiteUrl: ''\n              },\n              \n              // Preferencias de venta/compra\n              preferences: {\n                preferredPaymentMethods: ['sinpe', 'efectivo', 'transferencia'],\n                preferredDeliveryMethods: ['pickup', 'delivery', 'shipping'],\n                maxDeliveryDistance: 50, // km\n                acceptsNegotiation: true,\n                autoAcceptOffers: false\n              },\n              \n              // Estado de la cuenta\n              accountStatus: {\n                isActive: true,\n                isSuspended: false,\n                suspensionReason: '',\n                isVerified: false, // Se activa cuando se verifican datos importantes\n                trustLevel: 'new' // 'new', 'basic', 'verified', 'trusted', 'premium'\n              }\n            };\n            await setDoc(doc(db, 'users', firebaseUser.uid), newUserData);\n            setUserData(newUserData);\n            setCart([]);\n          }\n        } catch (error) {\n          console.error('Error cargando datos del usuario:', error);\n          // Fallback al localStorage si hay error\n          const savedCart = localStorage.getItem('cart');\n          if (savedCart) setCart(JSON.parse(savedCart));\n        }\n      } else {\n        // Usuario no autenticado, usar localStorage\n        const savedCart = localStorage.getItem('cart');\n        if (savedCart) setCart(JSON.parse(savedCart));\n        setUserData(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const addToCart = async (listing, requestedQuantity = 1) => {\n    try {\n      console.log('üõí Intentando agregar al carrito:', listing?.cardName, 'ID:', listing?.id || listing?.listingId, 'Cantidad:', requestedQuantity);\n      console.log('üìã Listing completo:', listing);\n      \n      // Normalizar el ID del listing\n      const listingId = listing.id || listing.listingId;\n      \n      if (!listing || !listingId) {\n        console.error('‚ùå Listing inv√°lido:', listing);\n        alert('No se puede agregar al carrito: Datos de carta inv√°lidos');\n        return false;\n      }\n      \n      // Verificar disponibilidad\n      const availability = await checkListingAvailability(listingId, requestedQuantity);\n      \n      if (!availability.available) {\n        console.log('‚ùå No disponible:', availability.reason);\n        alert(`No se puede agregar al carrito: ${availability.reason}`);\n        return false;\n      }\n\n      // Verificar si ya est√° en el carrito\n      console.log('üõí Carrito actual:', cart);\n      console.log('üîç Buscando item existente con ID:', listingId);\n      \n      let existingItemIndex = -1;\n      if (!Array.isArray(cart)) {\n        console.error('‚ùå Carrito no es un array:', cart);\n        setCart([]);\n      } else {\n        existingItemIndex = cart.findIndex(item => item && (item.id === listingId || item.listingId === listingId));\n      }\n      \n      console.log('üìç √çndice de item existente:', existingItemIndex);\n      let newCart;\n      \n      if (existingItemIndex >= 0) {\n        // Si ya existe, verificar si la nueva cantidad total no excede la disponible\n        const currentQuantityInCart = cart[existingItemIndex].quantity || 1;\n        const totalQuantity = currentQuantityInCart + requestedQuantity;\n        \n        if (totalQuantity > availability.availableQuantity) {\n          alert(`Solo puedes agregar ${availability.availableQuantity - currentQuantityInCart} unidades m√°s de esta carta`);\n          return false;\n        }\n        \n        newCart = [...cart];\n        newCart[existingItemIndex].quantity = totalQuantity;\n      } else {\n        newCart = [...cart, { \n          ...listing, \n          id: listingId, // Asegurar que tenga 'id'\n          listingId: listingId, // Mantener 'listingId' tambi√©n\n          quantity: requestedQuantity, \n          addedAt: new Date(),\n          availableQuantity: availability.availableQuantity \n        }];\n      }\n      \n      setCart(newCart);\n      \n      // Guardar en localStorage para usuarios no autenticados\n      localStorage.setItem('cart', JSON.stringify(newCart));\n      \n      // Guardar en Firebase si el usuario est√° autenticado\n      if (user) {\n        try {\n          await updateDoc(doc(db, 'users', user.uid), {\n            cart: newCart\n          });\n        } catch (error) {\n          console.error('Error guardando carrito en Firebase:', error);\n        }\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('‚ùå Error agregando al carrito:', error);\n      console.error('Stack trace:', error.stack);\n      console.error('Listing que caus√≥ error:', listing);\n      alert(`Error agregando al carrito: ${error.message}`);\n      return false;\n    }\n  };\n\n  const removeFromCart = async (listingId) => {\n    const newCart = cart.filter(item => (item.listingId || item.id) !== listingId);\n    setCart(newCart);\n    \n    // Guardar en localStorage\n    localStorage.setItem('cart', JSON.stringify(newCart));\n    \n    // Guardar en Firebase si el usuario est√° autenticado\n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: newCart\n        });\n      } catch (error) {\n        console.error('Error guardando carrito en Firebase:', error);\n      }\n    }\n  };\n\n  const updateCartItemQuantity = async (listingId, quantity) => {\n    const newCart = cart.map(item => \n      item.id === listingId ? { ...item, quantity: Math.max(1, quantity) } : item\n    );\n    setCart(newCart);\n    \n    // Guardar en localStorage\n    localStorage.setItem('cart', JSON.stringify(newCart));\n    \n    // Guardar en Firebase si el usuario est√° autenticado\n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: newCart\n        });\n      } catch (error) {\n        console.error('Error guardando carrito en Firebase:', error);\n      }\n    }\n  };\n\n  const clearCart = async () => {\n    setCart([]);\n    localStorage.removeItem('cart');\n    \n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: []\n        });\n      } catch (error) {\n        console.error('Error limpiando carrito en Firebase:', error);\n      }\n    }\n  };\n\n  const syncUserData = async () => {\n    if (user) {\n      try {\n        const userDoc = await getDoc(doc(db, 'users', user.uid));\n        if (userDoc.exists()) {\n          const data = userDoc.data();\n          setUserData(data);\n          setCart(data.cart || []);\n        }\n      } catch (error) {\n        console.error('Error sincronizando datos del usuario:', error);\n      }\n    }\n  };\n\n  const createTransaction = async (items, contactMethod = 'whatsapp', buyerNotes = '') => {\n    if (!user || !items.length) return null;\n    \n    try {\n      const transaction = {\n        buyerId: user.uid,\n        buyerName: userData?.username || userData?.displayName || user.email,\n        buyerNotes: buyerNotes.trim(),\n        items: items.map(item => ({\n          listingId: item.id,\n          cardId: item.cardId,\n          cardName: item.cardName,\n          cardImage: item.cardImage,\n          sellerId: item.sellerId,\n          sellerName: item.sellerName,\n          price: item.price,\n          quantity: item.quantity || 1,\n          condition: item.condition\n        })),\n        totalAmount: items.reduce((sum, item) => sum + (item.price * (item.quantity || 1)), 0),\n        contactMethod,\n        status: 'initiated', // initiated -> contacted -> completed -> rated\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      const transactionRef = await addDoc(collection(db, 'transactions'), transaction);\n      \n      // Actualizar el carrito del usuario\n      await clearCart();\n      \n      return transactionRef.id;\n    } catch (error) {\n      console.error('Error creando transacci√≥n:', error);\n      return null;\n    }\n  };\n\n  const updateTransactionStatus = async (transactionId, status) => {\n    if (!user) return false;\n    \n    try {\n      await updateDoc(doc(db, 'transactions', transactionId), {\n        status,\n        updatedAt: new Date()\n      });\n      return true;\n    } catch (error) {\n      console.error('Error actualizando transacci√≥n:', error);\n      return false;\n    }\n  };\n\n  // Funciones de inventario\n  const checkListingAvailability = async (listingId, requestedQuantity = 1) => {\n    try {\n      console.log('üîç Verificando disponibilidad para listing:', listingId, 'cantidad:', requestedQuantity);\n      \n      const listingRef = doc(db, 'listings', listingId);\n      const listingSnap = await getDoc(listingRef);\n      \n      if (!listingSnap.exists()) {\n        console.log('‚ùå Listing no existe:', listingId);\n        return { available: false, reason: 'El listado no existe' };\n      }\n\n      const listingData = listingSnap.data();\n      console.log('üì¶ Datos del listing:', listingData);\n      \n      const availableQuantity = listingData.availableQuantity || listingData.quantity || 0;\n      const status = listingData.status || 'active';\n      \n      console.log('üìä Estado:', status, 'Disponible:', availableQuantity, 'Solicitado:', requestedQuantity);\n      \n      if (status === 'inactive') {\n        return { available: false, reason: 'El listado est√° inactivo' };\n      }\n      \n      if (status === 'sold_out' || availableQuantity === 0) {\n        return { available: false, reason: 'Producto agotado' };\n      }\n      \n      if (availableQuantity < requestedQuantity) {\n        return { \n          available: false, \n          reason: `Solo hay ${availableQuantity} unidad${availableQuantity > 1 ? 'es' : ''} disponible${availableQuantity > 1 ? 's' : ''}`,\n          availableQuantity \n        };\n      }\n\n      console.log('‚úÖ Disponibilidad verificada exitosamente');\n      return { \n        available: true, \n        availableQuantity,\n        status: listingData.status \n      };\n    } catch (error) {\n      console.error('‚ùå Error verificando disponibilidad:', error);\n      console.error('Error details:', error.message, error.code);\n      return { available: false, reason: `Error verificando disponibilidad: ${error.message}` };\n    }\n  };\n\n  const getTotalItems = () => {\n    return cart.reduce((total, item) => total + (item.quantity || 1), 0);\n  };\n\n  const getTotalPrice = () => {\n    return cart.reduce((total, item) => total + (item.price * (item.quantity || 1)), 0);\n  };\n\n  const reduceListingQuantity = async (listingId, quantityToReduce) => {\n    try {\n      const result = await runTransaction(db, async (transaction) => {\n        const listingRef = doc(db, 'listings', listingId);\n        const listingSnap = await transaction.get(listingRef);\n        \n        if (!listingSnap.exists()) {\n          throw new Error('El listado no existe');\n        }\n\n        const listingData = listingSnap.data();\n        const currentAvailable = listingData.availableQuantity || listingData.quantity || 0;\n        \n        if (currentAvailable < quantityToReduce) {\n          throw new Error(`Solo hay ${currentAvailable} unidades disponibles`);\n        }\n\n        const newAvailable = currentAvailable - quantityToReduce;\n        const newStatus = newAvailable === 0 ? 'sold_out' : 'active';\n        \n        transaction.update(listingRef, {\n          availableQuantity: newAvailable,\n          status: newStatus,\n          updatedAt: new Date()\n        });\n\n        return { success: true, newAvailable, newStatus };\n      });\n      \n      return result;\n    } catch (error) {\n      console.error('Error reduciendo cantidad del listado:', error);\n      throw error;\n    }\n  };\n\n  // ===============================================\n  // NUEVAS FUNCIONES P2P - SPRINT 2\n  // ===============================================\n\n  // Verificar disponibilidad at√≥mica para checkout\n  const checkAtomicAvailability = async (items) => {\n    try {\n      const checkAvailability = httpsCallable(functions, 'checkAtomicAvailability');\n      const result = await checkAvailability({ \n        items: items.map(item => ({\n          listingId: item.id,\n          requestedQuantity: item.quantity || 1\n        }))\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error verificando disponibilidad at√≥mica:', error);\n      throw error;\n    }\n  };\n\n  // Crear transacci√≥n P2P pendiente con reserva de inventario\n  const createPendingTransaction = async (vendorItems, contactMethod = 'whatsapp', buyerNotes = '') => {\n    if (!user || !vendorItems.length) {\n      throw new Error('Usuario no autenticado o items vac√≠os');\n    }\n    \n    try {\n      const createTransaction = httpsCallable(functions, 'createPendingTransaction');\n      \n      const transactionData = {\n        buyerId: user.uid,\n        buyerName: userData?.username || userData?.displayName || user.email,\n        buyerNotes: buyerNotes.trim(),\n        vendorId: vendorItems[0].sellerId, // Todos los items son del mismo vendedor\n        items: vendorItems.map(item => ({\n          listingId: item.id,\n          cardId: item.cardId,\n          cardName: item.cardName,\n          cardImage: item.cardImage,\n          sellerId: item.sellerId,\n          sellerName: item.sellerName,\n          price: item.price,\n          quantity: item.quantity || 1,\n          condition: item.condition\n        })),\n        totalAmount: vendorItems.reduce((sum, item) => sum + (item.price * (item.quantity || 1)), 0),\n        contactMethod,\n        shippingCost: vendorItems[0].shippingIncluded ? 0 : 600\n      };\n\n      const result = await createTransaction(transactionData);\n      \n      // Remover items del carrito que fueron procesados\n      const processedListingIds = vendorItems.map(item => item.id);\n      const newCart = cart.filter(item => !processedListingIds.includes(item.id));\n      setCart(newCart);\n      \n      // Actualizar localStorage y Firebase\n      localStorage.setItem('cart', JSON.stringify(newCart));\n      if (user) {\n        await updateDoc(doc(db, 'users', user.uid), { cart: newCart });\n      }\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error creando transacci√≥n P2P:', error);\n      throw error;\n    }\n  };\n\n  // Obtener items del carrito agrupados por vendedor\n  const getCartByVendor = () => {\n    const vendors = {};\n    \n    cart.forEach(item => {\n      const vendorId = item.sellerId;\n      if (!vendors[vendorId]) {\n        vendors[vendorId] = {\n          vendorId,\n          vendorName: item.sellerName,\n          vendorPhone: item.userPhone,\n          vendorEmail: item.userEmail,\n          items: [],\n          totalAmount: 0,\n          totalItems: 0,\n          hasShipping: false\n        };\n      }\n      \n      vendors[vendorId].items.push(item);\n      vendors[vendorId].totalAmount += item.price * (item.quantity || 1);\n      vendors[vendorId].totalItems += (item.quantity || 1);\n      \n      // Verificar si alg√∫n item no incluye env√≠o gratis\n      if (!item.shippingIncluded) {\n        vendors[vendorId].hasShipping = true;\n      }\n    });\n    \n    return Object.values(vendors);\n  };\n\n  // Obtener transacciones del usuario actual\n  const getUserTransactions = async (type = 'all') => {\n    if (!user) return [];\n    \n    try {\n      const getUserTransactions = httpsCallable(functions, 'getUserTransactions');\n      const result = await getUserTransactions({ \n        userId: user.uid,\n        type // 'buyer', 'seller', 'all'\n      });\n      \n      return result.data.transactions || [];\n    } catch (error) {\n      console.error('Error obteniendo transacciones del usuario:', error);\n      return [];\n    }\n  };\n\n  // Actualizar estado de transacci√≥n P2P\n  const updateTransactionP2P = async (transactionId, updateData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const updateTransaction = httpsCallable(functions, 'updateTransactionP2P');\n      const result = await updateTransaction({\n        transactionId,\n        userId: user.uid,\n        ...updateData\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error actualizando transacci√≥n P2P:', error);\n      throw error;\n    }\n  };\n\n  // Responder a una transacci√≥n como vendedor\n  const respondToTransaction = async (transactionId, action, responseData = {}) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const respondToTransaction = httpsCallable(functions, 'respondToTransaction');\n      const result = await respondToTransaction({\n        transactionId,\n        sellerId: user.uid,\n        action, // 'accept' | 'reject'\n        ...responseData\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error respondiendo a transacci√≥n:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar entrega como vendedor\n  const confirmDelivery = async (transactionId, deliveryProof) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const confirmDelivery = httpsCallable(functions, 'confirmDelivery');\n      const result = await confirmDelivery({\n        transactionId,\n        sellerId: user.uid,\n        deliveryProof // { originStore, proofImage, notes }\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando entrega:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar pago como vendedor\n  const confirmPayment = async (transactionId, paymentProof) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const confirmPayment = httpsCallable(functions, 'confirmPayment');\n      const result = await confirmPayment({\n        transactionId,\n        sellerId: user.uid,\n        paymentProof // { method, proofImage, amount, notes }\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando pago:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar recibo como comprador\n  const confirmReceipt = async (transactionId, receiptData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const confirmReceipt = httpsCallable(functions, 'confirmReceipt');\n      const result = await confirmReceipt({\n        transactionId,\n        buyerId: user.uid,\n        ...receiptData // { destinationStore, satisfaction, notes }\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando recibo:', error);\n      throw error;\n    }\n  };\n\n  // Enviar calificaci√≥n mutua\n  const submitRating = async (transactionId, ratingData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const submitRating = httpsCallable(functions, 'submitRating');\n      const result = await submitRating({\n        transactionId,\n        userId: user.uid,\n        ...ratingData // { rating, comment, category }\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error enviando calificaci√≥n:', error);\n      throw error;\n    }\n  };\n\n  // Crear disputa/reporte\n  const createDispute = async (transactionId, disputeData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const createDispute = httpsCallable(functions, 'createDispute');\n      const result = await createDispute({\n        transactionId,\n        reporterId: user.uid,\n        ...disputeData // { type, description, evidence }\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error creando disputa:', error);\n      throw error;\n    }\n  };\n\n  return (\n    <CartContext.Provider value={{ \n      // Funciones originales del carrito\n      cart, \n      addToCart, \n      removeFromCart, \n      updateCartItemQuantity,\n      clearCart,\n      getTotalItems,\n      getTotalPrice,\n      user,\n      userData,\n      loading,\n      syncUserData,\n      createTransaction,\n      updateTransactionStatus,\n      checkListingAvailability,\n      reduceListingQuantity,\n      \n      // Nuevas funciones P2P\n      checkAtomicAvailability,\n      createPendingTransaction,\n      getCartByVendor,\n      getUserTransactions,\n      updateTransactionP2P,\n      respondToTransaction,\n      confirmDelivery,\n      confirmPayment,\n      confirmReceipt,\n      submitRating,\n      createDispute\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  return useContext(CartContext);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}