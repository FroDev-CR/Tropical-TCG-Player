{"ast":null,"code":"var _jsxFileName = \"/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/CartContext.js\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport apiClient from '../services/api';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [cart, setCart] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n\n  // Cargar carrito cuando el usuario cambie\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadUserCart();\n    } else {\n      // Usuario no autenticado, carrito vacío\n      setCart([]);\n      setLoading(false);\n    }\n  }, [isAuthenticated, user]);\n  const loadUserCart = async () => {\n    setLoading(true);\n    try {\n      // Por ahora usamos localStorage, luego se puede implementar endpoint de carrito\n      const savedCart = localStorage.getItem(`cart_${user.id}`);\n      if (savedCart) {\n        setCart(JSON.parse(savedCart));\n      } else {\n        setCart([]);\n      }\n    } catch (error) {\n      console.error('Error cargando carrito:', error);\n      setCart([]);\n    }\n    setLoading(false);\n  };\n  const saveCart = newCart => {\n    if (user) {\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(newCart));\n    }\n  };\n  const addToCart = async (listing, requestedQuantity = 1) => {\n    try {\n      console.log('🛒 Intentando agregar al carrito:', listing === null || listing === void 0 ? void 0 : listing.cardName, 'ID:', (listing === null || listing === void 0 ? void 0 : listing.id) || (listing === null || listing === void 0 ? void 0 : listing.listingId), 'Cantidad:', requestedQuantity);\n      console.log('📋 Listing completo:', listing);\n\n      // Normalizar el ID del listing\n      const listingId = listing.id || listing.listingId;\n      if (!listing || !listingId) {\n        console.error('❌ Listing inválido:', listing);\n        alert('No se puede agregar al carrito: Datos de carta inválidos');\n        return false;\n      }\n\n      // Verificar disponibilidad\n      const availability = await checkListingAvailability(listingId, requestedQuantity);\n      if (!availability.available) {\n        console.log('❌ No disponible:', availability.reason);\n        alert(`No se puede agregar al carrito: ${availability.reason}`);\n        return false;\n      }\n\n      // Verificar si ya está en el carrito\n      console.log('🛒 Carrito actual:', cart);\n      console.log('🔍 Buscando item existente con ID:', listingId);\n      let existingItemIndex = -1;\n      if (!Array.isArray(cart)) {\n        console.error('❌ Carrito no es un array:', cart);\n        setCart([]);\n      } else {\n        existingItemIndex = cart.findIndex(item => item && (item.id === listingId || item.listingId === listingId));\n      }\n      console.log('📍 Índice de item existente:', existingItemIndex);\n      let newCart;\n      if (existingItemIndex >= 0) {\n        // Si ya existe, verificar si la nueva cantidad total no excede la disponible\n        const currentQuantityInCart = cart[existingItemIndex].quantity || 1;\n        const totalQuantity = currentQuantityInCart + requestedQuantity;\n        if (totalQuantity > availability.availableQuantity) {\n          alert(`Solo puedes agregar ${availability.availableQuantity - currentQuantityInCart} unidades más de esta carta`);\n          return false;\n        }\n        newCart = [...cart];\n        newCart[existingItemIndex].quantity = totalQuantity;\n      } else {\n        newCart = [...cart, {\n          ...listing,\n          id: listingId,\n          // Asegurar que tenga 'id'\n          listingId: listingId,\n          // Mantener 'listingId' también\n          quantity: requestedQuantity,\n          addedAt: new Date(),\n          availableQuantity: availability.availableQuantity\n        }];\n      }\n      setCart(newCart);\n\n      // Guardar en localStorage para usuarios no autenticados\n      localStorage.setItem('cart', JSON.stringify(newCart));\n\n      // Guardar en Firebase si el usuario está autenticado\n      if (user) {\n        try {\n          await updateDoc(doc(db, 'users', user.uid), {\n            cart: newCart\n          });\n        } catch (error) {\n          console.error('Error guardando carrito en Firebase:', error);\n        }\n      }\n      return true;\n    } catch (error) {\n      console.error('❌ Error agregando al carrito:', error);\n      console.error('Stack trace:', error.stack);\n      console.error('Listing que causó error:', listing);\n      alert(`Error agregando al carrito: ${error.message}`);\n      return false;\n    }\n  };\n  const removeFromCart = async listingId => {\n    const newCart = cart.filter(item => (item.listingId || item.id) !== listingId);\n    setCart(newCart);\n\n    // Guardar en localStorage\n    localStorage.setItem('cart', JSON.stringify(newCart));\n\n    // Guardar en Firebase si el usuario está autenticado\n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: newCart\n        });\n      } catch (error) {\n        console.error('Error guardando carrito en Firebase:', error);\n      }\n    }\n  };\n  const updateCartItemQuantity = async (listingId, quantity) => {\n    const newCart = cart.map(item => item.id === listingId ? {\n      ...item,\n      quantity: Math.max(1, quantity)\n    } : item);\n    setCart(newCart);\n\n    // Guardar en localStorage\n    localStorage.setItem('cart', JSON.stringify(newCart));\n\n    // Guardar en Firebase si el usuario está autenticado\n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: newCart\n        });\n      } catch (error) {\n        console.error('Error guardando carrito en Firebase:', error);\n      }\n    }\n  };\n  const clearCart = async () => {\n    setCart([]);\n    localStorage.removeItem('cart');\n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: []\n        });\n      } catch (error) {\n        console.error('Error limpiando carrito en Firebase:', error);\n      }\n    }\n  };\n  const syncUserData = async () => {\n    if (user) {\n      try {\n        const userDoc = await getDoc(doc(db, 'users', user.uid));\n        if (userDoc.exists()) {\n          const data = userDoc.data();\n          setUserData(data);\n          setCart(data.cart || []);\n        }\n      } catch (error) {\n        console.error('Error sincronizando datos del usuario:', error);\n      }\n    }\n  };\n  const createTransaction = async (items, contactMethod = 'whatsapp', buyerNotes = '') => {\n    if (!user || !items.length) return null;\n    try {\n      var _userData, _userData2;\n      const transaction = {\n        buyerId: user.uid,\n        buyerName: ((_userData = userData) === null || _userData === void 0 ? void 0 : _userData.username) || ((_userData2 = userData) === null || _userData2 === void 0 ? void 0 : _userData2.displayName) || user.email,\n        buyerNotes: buyerNotes.trim(),\n        items: items.map(item => ({\n          listingId: item.id,\n          cardId: item.cardId,\n          cardName: item.cardName,\n          cardImage: item.cardImage,\n          sellerId: item.sellerId,\n          sellerName: item.sellerName,\n          price: item.price,\n          quantity: item.quantity || 1,\n          condition: item.condition\n        })),\n        totalAmount: items.reduce((sum, item) => sum + item.price * (item.quantity || 1), 0),\n        contactMethod,\n        status: 'initiated',\n        // initiated -> contacted -> completed -> rated\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      const transactionRef = await addDoc(collection(db, 'transactions'), transaction);\n\n      // Actualizar el carrito del usuario\n      await clearCart();\n      return transactionRef.id;\n    } catch (error) {\n      console.error('Error creando transacción:', error);\n      return null;\n    }\n  };\n  const updateTransactionStatus = async (transactionId, status) => {\n    if (!user) return false;\n    try {\n      await updateDoc(doc(db, 'transactions', transactionId), {\n        status,\n        updatedAt: new Date()\n      });\n      return true;\n    } catch (error) {\n      console.error('Error actualizando transacción:', error);\n      return false;\n    }\n  };\n\n  // Funciones de inventario\n  const checkListingAvailability = async (listingId, requestedQuantity = 1) => {\n    try {\n      console.log('🔍 Verificando disponibilidad para listing:', listingId, 'cantidad:', requestedQuantity);\n      const response = await apiClient.get(`/api/v1/listings/${listingId}`);\n      if (!response.data.success) {\n        console.log('❌ Listing no existe:', listingId);\n        return {\n          available: false,\n          reason: 'El listado no existe'\n        };\n      }\n      const listingData = response.data.listing;\n      console.log('📦 Datos del listing:', listingData);\n      const availableQuantity = listingData.availableQuantity || listingData.quantity || 0;\n      const status = listingData.status || 'active';\n      console.log('📊 Estado:', status, 'Disponible:', availableQuantity, 'Solicitado:', requestedQuantity);\n      if (status === 'inactive') {\n        return {\n          available: false,\n          reason: 'El listado está inactivo'\n        };\n      }\n      if (status === 'sold_out' || availableQuantity === 0) {\n        return {\n          available: false,\n          reason: 'Producto agotado'\n        };\n      }\n      if (availableQuantity < requestedQuantity) {\n        return {\n          available: false,\n          reason: `Solo hay ${availableQuantity} unidad${availableQuantity > 1 ? 'es' : ''} disponible${availableQuantity > 1 ? 's' : ''}`,\n          availableQuantity\n        };\n      }\n      console.log('✅ Disponibilidad verificada exitosamente');\n      return {\n        available: true,\n        availableQuantity,\n        status: listingData.status\n      };\n    } catch (error) {\n      console.error('❌ Error verificando disponibilidad:', error);\n      console.error('Error details:', error.message, error.code);\n      return {\n        available: false,\n        reason: `Error verificando disponibilidad: ${error.message}`\n      };\n    }\n  };\n  const getTotalItems = () => {\n    return cart.reduce((total, item) => total + (item.quantity || 1), 0);\n  };\n  const getTotalPrice = () => {\n    return cart.reduce((total, item) => total + item.price * (item.quantity || 1), 0);\n  };\n  const reduceListingQuantity = async (listingId, quantityToReduce) => {\n    try {\n      const result = await runTransaction(db, async transaction => {\n        const listingRef = doc(db, 'listings', listingId);\n        const listingSnap = await transaction.get(listingRef);\n        if (!listingSnap.exists()) {\n          throw new Error('El listado no existe');\n        }\n        const listingData = listingSnap.data();\n        const currentAvailable = listingData.availableQuantity || listingData.quantity || 0;\n        if (currentAvailable < quantityToReduce) {\n          throw new Error(`Solo hay ${currentAvailable} unidades disponibles`);\n        }\n        const newAvailable = currentAvailable - quantityToReduce;\n        const newStatus = newAvailable === 0 ? 'sold_out' : 'active';\n        transaction.update(listingRef, {\n          availableQuantity: newAvailable,\n          status: newStatus,\n          updatedAt: new Date()\n        });\n        return {\n          success: true,\n          newAvailable,\n          newStatus\n        };\n      });\n      return result;\n    } catch (error) {\n      console.error('Error reduciendo cantidad del listado:', error);\n      throw error;\n    }\n  };\n\n  // ===============================================\n  // NUEVAS FUNCIONES P2P - SPRINT 2\n  // ===============================================\n\n  // Verificar disponibilidad atómica para checkout\n  const checkAtomicAvailability = async items => {\n    try {\n      const checkAvailability = httpsCallable(functions, 'checkAtomicAvailability');\n      const result = await checkAvailability({\n        items: items.map(item => ({\n          listingId: item.id,\n          requestedQuantity: item.quantity || 1\n        }))\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error verificando disponibilidad atómica:', error);\n      throw error;\n    }\n  };\n\n  // Crear transacción P2P pendiente con reserva de inventario\n  const createPendingTransaction = async (vendorItems, contactMethod = 'whatsapp', buyerNotes = '') => {\n    if (!user || !vendorItems.length) {\n      throw new Error('Usuario no autenticado o items vacíos');\n    }\n    try {\n      var _userData3, _userData4;\n      const createTransaction = httpsCallable(functions, 'createPendingTransaction');\n      const transactionData = {\n        buyerId: user.uid,\n        buyerName: ((_userData3 = userData) === null || _userData3 === void 0 ? void 0 : _userData3.username) || ((_userData4 = userData) === null || _userData4 === void 0 ? void 0 : _userData4.displayName) || user.email,\n        buyerNotes: buyerNotes.trim(),\n        vendorId: vendorItems[0].sellerId,\n        // Todos los items son del mismo vendedor\n        items: vendorItems.map(item => ({\n          listingId: item.id,\n          cardId: item.cardId,\n          cardName: item.cardName,\n          cardImage: item.cardImage,\n          sellerId: item.sellerId,\n          sellerName: item.sellerName,\n          price: item.price,\n          quantity: item.quantity || 1,\n          condition: item.condition\n        })),\n        totalAmount: vendorItems.reduce((sum, item) => sum + item.price * (item.quantity || 1), 0),\n        contactMethod,\n        shippingCost: vendorItems[0].shippingIncluded ? 0 : 600\n      };\n      const result = await createTransaction(transactionData);\n\n      // Remover items del carrito que fueron procesados\n      const processedListingIds = vendorItems.map(item => item.id);\n      const newCart = cart.filter(item => !processedListingIds.includes(item.id));\n      setCart(newCart);\n\n      // Actualizar localStorage y Firebase\n      localStorage.setItem('cart', JSON.stringify(newCart));\n      if (user) {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: newCart\n        });\n      }\n      return result.data;\n    } catch (error) {\n      console.error('Error creando transacción P2P:', error);\n      throw error;\n    }\n  };\n\n  // Obtener items del carrito agrupados por vendedor\n  const getCartByVendor = () => {\n    const vendors = {};\n    cart.forEach(item => {\n      const vendorId = item.sellerId;\n      if (!vendors[vendorId]) {\n        vendors[vendorId] = {\n          vendorId,\n          vendorName: item.sellerName,\n          vendorPhone: item.userPhone,\n          vendorEmail: item.userEmail,\n          items: [],\n          totalAmount: 0,\n          totalItems: 0,\n          hasShipping: false\n        };\n      }\n      vendors[vendorId].items.push(item);\n      vendors[vendorId].totalAmount += item.price * (item.quantity || 1);\n      vendors[vendorId].totalItems += item.quantity || 1;\n\n      // Verificar si algún item no incluye envío gratis\n      if (!item.shippingIncluded) {\n        vendors[vendorId].hasShipping = true;\n      }\n    });\n    return Object.values(vendors);\n  };\n\n  // Obtener transacciones del usuario actual\n  const getUserTransactions = async (type = 'all') => {\n    if (!user) return [];\n    try {\n      const getUserTransactions = httpsCallable(functions, 'getUserTransactions');\n      const result = await getUserTransactions({\n        userId: user.uid,\n        type // 'buyer', 'seller', 'all'\n      });\n      return result.data.transactions || [];\n    } catch (error) {\n      console.error('Error obteniendo transacciones del usuario:', error);\n      return [];\n    }\n  };\n\n  // Actualizar estado de transacción P2P\n  const updateTransactionP2P = async (transactionId, updateData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const updateTransaction = httpsCallable(functions, 'updateTransactionP2P');\n      const result = await updateTransaction({\n        transactionId,\n        userId: user.uid,\n        ...updateData\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error actualizando transacción P2P:', error);\n      throw error;\n    }\n  };\n\n  // Responder a una transacción como vendedor\n  const respondToTransaction = async (transactionId, action, responseData = {}) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const respondToTransaction = httpsCallable(functions, 'respondToTransaction');\n      const result = await respondToTransaction({\n        transactionId,\n        sellerId: user.uid,\n        action,\n        // 'accept' | 'reject'\n        ...responseData\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error respondiendo a transacción:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar entrega como vendedor\n  const confirmDelivery = async (transactionId, deliveryProof) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const confirmDelivery = httpsCallable(functions, 'confirmDelivery');\n      const result = await confirmDelivery({\n        transactionId,\n        sellerId: user.uid,\n        deliveryProof // { originStore, proofImage, notes }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando entrega:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar pago como vendedor\n  const confirmPayment = async (transactionId, paymentProof) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const confirmPayment = httpsCallable(functions, 'confirmPayment');\n      const result = await confirmPayment({\n        transactionId,\n        sellerId: user.uid,\n        paymentProof // { method, proofImage, amount, notes }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando pago:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar recibo como comprador\n  const confirmReceipt = async (transactionId, receiptData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const confirmReceipt = httpsCallable(functions, 'confirmReceipt');\n      const result = await confirmReceipt({\n        transactionId,\n        buyerId: user.uid,\n        ...receiptData // { destinationStore, satisfaction, notes }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando recibo:', error);\n      throw error;\n    }\n  };\n\n  // Enviar calificación mutua\n  const submitRating = async (transactionId, ratingData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const submitRating = httpsCallable(functions, 'submitRating');\n      const result = await submitRating({\n        transactionId,\n        userId: user.uid,\n        ...ratingData // { rating, comment, category }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error enviando calificación:', error);\n      throw error;\n    }\n  };\n\n  // Crear disputa/reporte\n  const createDispute = async (transactionId, disputeData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    try {\n      const createDispute = httpsCallable(functions, 'createDispute');\n      const result = await createDispute({\n        transactionId,\n        reporterId: user.uid,\n        ...disputeData // { type, description, evidence }\n      });\n      return result.data;\n    } catch (error) {\n      console.error('Error creando disputa:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      // Funciones originales del carrito\n      cart,\n      addToCart,\n      removeFromCart,\n      updateCartItemQuantity,\n      clearCart,\n      getTotalItems,\n      getTotalPrice,\n      user,\n      userData,\n      loading,\n      syncUserData,\n      createTransaction,\n      updateTransactionStatus,\n      checkListingAvailability,\n      reduceListingQuantity,\n      // Nuevas funciones P2P\n      checkAtomicAvailability,\n      createPendingTransaction,\n      getCartByVendor,\n      getUserTransactions,\n      updateTransactionP2P,\n      respondToTransaction,\n      confirmDelivery,\n      confirmPayment,\n      confirmReceipt,\n      submitRating,\n      createDispute\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 621,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"j1Wu1v5Ydk1+MTp0XUEs6pLSWm8=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n  return useContext(CartContext);\n}\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","apiClient","useAuth","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","loading","setLoading","user","isAuthenticated","loadUserCart","savedCart","localStorage","getItem","id","JSON","parse","error","console","saveCart","newCart","setItem","stringify","addToCart","listing","requestedQuantity","log","cardName","listingId","alert","availability","checkListingAvailability","available","reason","existingItemIndex","Array","isArray","findIndex","item","currentQuantityInCart","quantity","totalQuantity","availableQuantity","addedAt","Date","updateDoc","doc","db","uid","stack","message","removeFromCart","filter","updateCartItemQuantity","map","Math","max","clearCart","removeItem","syncUserData","userDoc","getDoc","exists","data","setUserData","createTransaction","items","contactMethod","buyerNotes","length","_userData","_userData2","transaction","buyerId","buyerName","userData","username","displayName","email","trim","cardId","cardImage","sellerId","sellerName","price","condition","totalAmount","reduce","sum","status","createdAt","updatedAt","transactionRef","addDoc","collection","updateTransactionStatus","transactionId","response","get","success","listingData","code","getTotalItems","total","getTotalPrice","reduceListingQuantity","quantityToReduce","result","runTransaction","listingRef","listingSnap","Error","currentAvailable","newAvailable","newStatus","update","checkAtomicAvailability","checkAvailability","httpsCallable","functions","createPendingTransaction","vendorItems","_userData3","_userData4","transactionData","vendorId","shippingCost","shippingIncluded","processedListingIds","includes","getCartByVendor","vendors","forEach","vendorName","vendorPhone","userPhone","vendorEmail","userEmail","totalItems","hasShipping","push","Object","values","getUserTransactions","type","userId","transactions","updateTransactionP2P","updateData","updateTransaction","respondToTransaction","action","responseData","confirmDelivery","deliveryProof","confirmPayment","paymentProof","confirmReceipt","receiptData","submitRating","ratingData","createDispute","disputeData","reporterId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/contexts/CartContext.js"],"sourcesContent":["// src/contexts/CartContext.js\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport apiClient from '../services/api';\nimport { useAuth } from './AuthContext';\n\nconst CartContext = createContext();\n\nexport function CartProvider({ children }) {\n  const [cart, setCart] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const { user, isAuthenticated } = useAuth();\n\n  // Cargar carrito cuando el usuario cambie\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      loadUserCart();\n    } else {\n      // Usuario no autenticado, carrito vacío\n      setCart([]);\n      setLoading(false);\n    }\n  }, [isAuthenticated, user]);\n\n  const loadUserCart = async () => {\n    setLoading(true);\n    try {\n      // Por ahora usamos localStorage, luego se puede implementar endpoint de carrito\n      const savedCart = localStorage.getItem(`cart_${user.id}`);\n      if (savedCart) {\n        setCart(JSON.parse(savedCart));\n      } else {\n        setCart([]);\n      }\n    } catch (error) {\n      console.error('Error cargando carrito:', error);\n      setCart([]);\n    }\n    setLoading(false);\n  };\n\n  const saveCart = (newCart) => {\n    if (user) {\n      localStorage.setItem(`cart_${user.id}`, JSON.stringify(newCart));\n    }\n  };\n\n  const addToCart = async (listing, requestedQuantity = 1) => {\n    try {\n      console.log('🛒 Intentando agregar al carrito:', listing?.cardName, 'ID:', listing?.id || listing?.listingId, 'Cantidad:', requestedQuantity);\n      console.log('📋 Listing completo:', listing);\n      \n      // Normalizar el ID del listing\n      const listingId = listing.id || listing.listingId;\n      \n      if (!listing || !listingId) {\n        console.error('❌ Listing inválido:', listing);\n        alert('No se puede agregar al carrito: Datos de carta inválidos');\n        return false;\n      }\n      \n      // Verificar disponibilidad\n      const availability = await checkListingAvailability(listingId, requestedQuantity);\n      \n      if (!availability.available) {\n        console.log('❌ No disponible:', availability.reason);\n        alert(`No se puede agregar al carrito: ${availability.reason}`);\n        return false;\n      }\n\n      // Verificar si ya está en el carrito\n      console.log('🛒 Carrito actual:', cart);\n      console.log('🔍 Buscando item existente con ID:', listingId);\n      \n      let existingItemIndex = -1;\n      if (!Array.isArray(cart)) {\n        console.error('❌ Carrito no es un array:', cart);\n        setCart([]);\n      } else {\n        existingItemIndex = cart.findIndex(item => item && (item.id === listingId || item.listingId === listingId));\n      }\n      \n      console.log('📍 Índice de item existente:', existingItemIndex);\n      let newCart;\n      \n      if (existingItemIndex >= 0) {\n        // Si ya existe, verificar si la nueva cantidad total no excede la disponible\n        const currentQuantityInCart = cart[existingItemIndex].quantity || 1;\n        const totalQuantity = currentQuantityInCart + requestedQuantity;\n        \n        if (totalQuantity > availability.availableQuantity) {\n          alert(`Solo puedes agregar ${availability.availableQuantity - currentQuantityInCart} unidades más de esta carta`);\n          return false;\n        }\n        \n        newCart = [...cart];\n        newCart[existingItemIndex].quantity = totalQuantity;\n      } else {\n        newCart = [...cart, { \n          ...listing, \n          id: listingId, // Asegurar que tenga 'id'\n          listingId: listingId, // Mantener 'listingId' también\n          quantity: requestedQuantity, \n          addedAt: new Date(),\n          availableQuantity: availability.availableQuantity \n        }];\n      }\n      \n      setCart(newCart);\n      \n      // Guardar en localStorage para usuarios no autenticados\n      localStorage.setItem('cart', JSON.stringify(newCart));\n      \n      // Guardar en Firebase si el usuario está autenticado\n      if (user) {\n        try {\n          await updateDoc(doc(db, 'users', user.uid), {\n            cart: newCart\n          });\n        } catch (error) {\n          console.error('Error guardando carrito en Firebase:', error);\n        }\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('❌ Error agregando al carrito:', error);\n      console.error('Stack trace:', error.stack);\n      console.error('Listing que causó error:', listing);\n      alert(`Error agregando al carrito: ${error.message}`);\n      return false;\n    }\n  };\n\n  const removeFromCart = async (listingId) => {\n    const newCart = cart.filter(item => (item.listingId || item.id) !== listingId);\n    setCart(newCart);\n    \n    // Guardar en localStorage\n    localStorage.setItem('cart', JSON.stringify(newCart));\n    \n    // Guardar en Firebase si el usuario está autenticado\n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: newCart\n        });\n      } catch (error) {\n        console.error('Error guardando carrito en Firebase:', error);\n      }\n    }\n  };\n\n  const updateCartItemQuantity = async (listingId, quantity) => {\n    const newCart = cart.map(item => \n      item.id === listingId ? { ...item, quantity: Math.max(1, quantity) } : item\n    );\n    setCart(newCart);\n    \n    // Guardar en localStorage\n    localStorage.setItem('cart', JSON.stringify(newCart));\n    \n    // Guardar en Firebase si el usuario está autenticado\n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: newCart\n        });\n      } catch (error) {\n        console.error('Error guardando carrito en Firebase:', error);\n      }\n    }\n  };\n\n  const clearCart = async () => {\n    setCart([]);\n    localStorage.removeItem('cart');\n    \n    if (user) {\n      try {\n        await updateDoc(doc(db, 'users', user.uid), {\n          cart: []\n        });\n      } catch (error) {\n        console.error('Error limpiando carrito en Firebase:', error);\n      }\n    }\n  };\n\n  const syncUserData = async () => {\n    if (user) {\n      try {\n        const userDoc = await getDoc(doc(db, 'users', user.uid));\n        if (userDoc.exists()) {\n          const data = userDoc.data();\n          setUserData(data);\n          setCart(data.cart || []);\n        }\n      } catch (error) {\n        console.error('Error sincronizando datos del usuario:', error);\n      }\n    }\n  };\n\n  const createTransaction = async (items, contactMethod = 'whatsapp', buyerNotes = '') => {\n    if (!user || !items.length) return null;\n    \n    try {\n      const transaction = {\n        buyerId: user.uid,\n        buyerName: userData?.username || userData?.displayName || user.email,\n        buyerNotes: buyerNotes.trim(),\n        items: items.map(item => ({\n          listingId: item.id,\n          cardId: item.cardId,\n          cardName: item.cardName,\n          cardImage: item.cardImage,\n          sellerId: item.sellerId,\n          sellerName: item.sellerName,\n          price: item.price,\n          quantity: item.quantity || 1,\n          condition: item.condition\n        })),\n        totalAmount: items.reduce((sum, item) => sum + (item.price * (item.quantity || 1)), 0),\n        contactMethod,\n        status: 'initiated', // initiated -> contacted -> completed -> rated\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      const transactionRef = await addDoc(collection(db, 'transactions'), transaction);\n      \n      // Actualizar el carrito del usuario\n      await clearCart();\n      \n      return transactionRef.id;\n    } catch (error) {\n      console.error('Error creando transacción:', error);\n      return null;\n    }\n  };\n\n  const updateTransactionStatus = async (transactionId, status) => {\n    if (!user) return false;\n    \n    try {\n      await updateDoc(doc(db, 'transactions', transactionId), {\n        status,\n        updatedAt: new Date()\n      });\n      return true;\n    } catch (error) {\n      console.error('Error actualizando transacción:', error);\n      return false;\n    }\n  };\n\n  // Funciones de inventario\n  const checkListingAvailability = async (listingId, requestedQuantity = 1) => {\n    try {\n      console.log('🔍 Verificando disponibilidad para listing:', listingId, 'cantidad:', requestedQuantity);\n      \n      const response = await apiClient.get(`/api/v1/listings/${listingId}`);\n      \n      if (!response.data.success) {\n        console.log('❌ Listing no existe:', listingId);\n        return { available: false, reason: 'El listado no existe' };\n      }\n\n      const listingData = response.data.listing;\n      console.log('📦 Datos del listing:', listingData);\n      \n      const availableQuantity = listingData.availableQuantity || listingData.quantity || 0;\n      const status = listingData.status || 'active';\n      \n      console.log('📊 Estado:', status, 'Disponible:', availableQuantity, 'Solicitado:', requestedQuantity);\n      \n      if (status === 'inactive') {\n        return { available: false, reason: 'El listado está inactivo' };\n      }\n      \n      if (status === 'sold_out' || availableQuantity === 0) {\n        return { available: false, reason: 'Producto agotado' };\n      }\n      \n      if (availableQuantity < requestedQuantity) {\n        return { \n          available: false, \n          reason: `Solo hay ${availableQuantity} unidad${availableQuantity > 1 ? 'es' : ''} disponible${availableQuantity > 1 ? 's' : ''}`,\n          availableQuantity \n        };\n      }\n\n      console.log('✅ Disponibilidad verificada exitosamente');\n      return { \n        available: true, \n        availableQuantity,\n        status: listingData.status \n      };\n    } catch (error) {\n      console.error('❌ Error verificando disponibilidad:', error);\n      console.error('Error details:', error.message, error.code);\n      return { available: false, reason: `Error verificando disponibilidad: ${error.message}` };\n    }\n  };\n\n  const getTotalItems = () => {\n    return cart.reduce((total, item) => total + (item.quantity || 1), 0);\n  };\n\n  const getTotalPrice = () => {\n    return cart.reduce((total, item) => total + (item.price * (item.quantity || 1)), 0);\n  };\n\n  const reduceListingQuantity = async (listingId, quantityToReduce) => {\n    try {\n      const result = await runTransaction(db, async (transaction) => {\n        const listingRef = doc(db, 'listings', listingId);\n        const listingSnap = await transaction.get(listingRef);\n        \n        if (!listingSnap.exists()) {\n          throw new Error('El listado no existe');\n        }\n\n        const listingData = listingSnap.data();\n        const currentAvailable = listingData.availableQuantity || listingData.quantity || 0;\n        \n        if (currentAvailable < quantityToReduce) {\n          throw new Error(`Solo hay ${currentAvailable} unidades disponibles`);\n        }\n\n        const newAvailable = currentAvailable - quantityToReduce;\n        const newStatus = newAvailable === 0 ? 'sold_out' : 'active';\n        \n        transaction.update(listingRef, {\n          availableQuantity: newAvailable,\n          status: newStatus,\n          updatedAt: new Date()\n        });\n\n        return { success: true, newAvailable, newStatus };\n      });\n      \n      return result;\n    } catch (error) {\n      console.error('Error reduciendo cantidad del listado:', error);\n      throw error;\n    }\n  };\n\n  // ===============================================\n  // NUEVAS FUNCIONES P2P - SPRINT 2\n  // ===============================================\n\n  // Verificar disponibilidad atómica para checkout\n  const checkAtomicAvailability = async (items) => {\n    try {\n      const checkAvailability = httpsCallable(functions, 'checkAtomicAvailability');\n      const result = await checkAvailability({ \n        items: items.map(item => ({\n          listingId: item.id,\n          requestedQuantity: item.quantity || 1\n        }))\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error verificando disponibilidad atómica:', error);\n      throw error;\n    }\n  };\n\n  // Crear transacción P2P pendiente con reserva de inventario\n  const createPendingTransaction = async (vendorItems, contactMethod = 'whatsapp', buyerNotes = '') => {\n    if (!user || !vendorItems.length) {\n      throw new Error('Usuario no autenticado o items vacíos');\n    }\n    \n    try {\n      const createTransaction = httpsCallable(functions, 'createPendingTransaction');\n      \n      const transactionData = {\n        buyerId: user.uid,\n        buyerName: userData?.username || userData?.displayName || user.email,\n        buyerNotes: buyerNotes.trim(),\n        vendorId: vendorItems[0].sellerId, // Todos los items son del mismo vendedor\n        items: vendorItems.map(item => ({\n          listingId: item.id,\n          cardId: item.cardId,\n          cardName: item.cardName,\n          cardImage: item.cardImage,\n          sellerId: item.sellerId,\n          sellerName: item.sellerName,\n          price: item.price,\n          quantity: item.quantity || 1,\n          condition: item.condition\n        })),\n        totalAmount: vendorItems.reduce((sum, item) => sum + (item.price * (item.quantity || 1)), 0),\n        contactMethod,\n        shippingCost: vendorItems[0].shippingIncluded ? 0 : 600\n      };\n\n      const result = await createTransaction(transactionData);\n      \n      // Remover items del carrito que fueron procesados\n      const processedListingIds = vendorItems.map(item => item.id);\n      const newCart = cart.filter(item => !processedListingIds.includes(item.id));\n      setCart(newCart);\n      \n      // Actualizar localStorage y Firebase\n      localStorage.setItem('cart', JSON.stringify(newCart));\n      if (user) {\n        await updateDoc(doc(db, 'users', user.uid), { cart: newCart });\n      }\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error creando transacción P2P:', error);\n      throw error;\n    }\n  };\n\n  // Obtener items del carrito agrupados por vendedor\n  const getCartByVendor = () => {\n    const vendors = {};\n    \n    cart.forEach(item => {\n      const vendorId = item.sellerId;\n      if (!vendors[vendorId]) {\n        vendors[vendorId] = {\n          vendorId,\n          vendorName: item.sellerName,\n          vendorPhone: item.userPhone,\n          vendorEmail: item.userEmail,\n          items: [],\n          totalAmount: 0,\n          totalItems: 0,\n          hasShipping: false\n        };\n      }\n      \n      vendors[vendorId].items.push(item);\n      vendors[vendorId].totalAmount += item.price * (item.quantity || 1);\n      vendors[vendorId].totalItems += (item.quantity || 1);\n      \n      // Verificar si algún item no incluye envío gratis\n      if (!item.shippingIncluded) {\n        vendors[vendorId].hasShipping = true;\n      }\n    });\n    \n    return Object.values(vendors);\n  };\n\n  // Obtener transacciones del usuario actual\n  const getUserTransactions = async (type = 'all') => {\n    if (!user) return [];\n    \n    try {\n      const getUserTransactions = httpsCallable(functions, 'getUserTransactions');\n      const result = await getUserTransactions({ \n        userId: user.uid,\n        type // 'buyer', 'seller', 'all'\n      });\n      \n      return result.data.transactions || [];\n    } catch (error) {\n      console.error('Error obteniendo transacciones del usuario:', error);\n      return [];\n    }\n  };\n\n  // Actualizar estado de transacción P2P\n  const updateTransactionP2P = async (transactionId, updateData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const updateTransaction = httpsCallable(functions, 'updateTransactionP2P');\n      const result = await updateTransaction({\n        transactionId,\n        userId: user.uid,\n        ...updateData\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error actualizando transacción P2P:', error);\n      throw error;\n    }\n  };\n\n  // Responder a una transacción como vendedor\n  const respondToTransaction = async (transactionId, action, responseData = {}) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const respondToTransaction = httpsCallable(functions, 'respondToTransaction');\n      const result = await respondToTransaction({\n        transactionId,\n        sellerId: user.uid,\n        action, // 'accept' | 'reject'\n        ...responseData\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error respondiendo a transacción:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar entrega como vendedor\n  const confirmDelivery = async (transactionId, deliveryProof) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const confirmDelivery = httpsCallable(functions, 'confirmDelivery');\n      const result = await confirmDelivery({\n        transactionId,\n        sellerId: user.uid,\n        deliveryProof // { originStore, proofImage, notes }\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando entrega:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar pago como vendedor\n  const confirmPayment = async (transactionId, paymentProof) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const confirmPayment = httpsCallable(functions, 'confirmPayment');\n      const result = await confirmPayment({\n        transactionId,\n        sellerId: user.uid,\n        paymentProof // { method, proofImage, amount, notes }\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando pago:', error);\n      throw error;\n    }\n  };\n\n  // Confirmar recibo como comprador\n  const confirmReceipt = async (transactionId, receiptData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const confirmReceipt = httpsCallable(functions, 'confirmReceipt');\n      const result = await confirmReceipt({\n        transactionId,\n        buyerId: user.uid,\n        ...receiptData // { destinationStore, satisfaction, notes }\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error confirmando recibo:', error);\n      throw error;\n    }\n  };\n\n  // Enviar calificación mutua\n  const submitRating = async (transactionId, ratingData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const submitRating = httpsCallable(functions, 'submitRating');\n      const result = await submitRating({\n        transactionId,\n        userId: user.uid,\n        ...ratingData // { rating, comment, category }\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error enviando calificación:', error);\n      throw error;\n    }\n  };\n\n  // Crear disputa/reporte\n  const createDispute = async (transactionId, disputeData) => {\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    \n    try {\n      const createDispute = httpsCallable(functions, 'createDispute');\n      const result = await createDispute({\n        transactionId,\n        reporterId: user.uid,\n        ...disputeData // { type, description, evidence }\n      });\n      \n      return result.data;\n    } catch (error) {\n      console.error('Error creando disputa:', error);\n      throw error;\n    }\n  };\n\n  return (\n    <CartContext.Provider value={{ \n      // Funciones originales del carrito\n      cart, \n      addToCart, \n      removeFromCart, \n      updateCartItemQuantity,\n      clearCart,\n      getTotalItems,\n      getTotalPrice,\n      user,\n      userData,\n      loading,\n      syncUserData,\n      createTransaction,\n      updateTransactionStatus,\n      checkListingAvailability,\n      reduceListingQuantity,\n      \n      // Nuevas funciones P2P\n      checkAtomicAvailability,\n      createPendingTransaction,\n      getCartByVendor,\n      getUserTransactions,\n      updateTransactionP2P,\n      respondToTransaction,\n      confirmDelivery,\n      confirmPayment,\n      confirmReceipt,\n      submitRating,\n      createDispute\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  return useContext(CartContext);\n}"],"mappings":";;;AAAA;AACA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASS,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM;IAAEc,IAAI;IAAEC;EAAgB,CAAC,GAAGZ,OAAO,CAAC,CAAC;;EAE3C;EACAF,SAAS,CAAC,MAAM;IACd,IAAIc,eAAe,IAAID,IAAI,EAAE;MAC3BE,YAAY,CAAC,CAAC;IAChB,CAAC,MAAM;MACL;MACAL,OAAO,CAAC,EAAE,CAAC;MACXE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACE,eAAe,EAAED,IAAI,CAAC,CAAC;EAE3B,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BH,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF;MACA,MAAMI,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQL,IAAI,CAACM,EAAE,EAAE,CAAC;MACzD,IAAIH,SAAS,EAAE;QACbN,OAAO,CAACU,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,CAAC;MAChC,CAAC,MAAM;QACLN,OAAO,CAAC,EAAE,CAAC;MACb;IACF,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CZ,OAAO,CAAC,EAAE,CAAC;IACb;IACAE,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAMY,QAAQ,GAAIC,OAAO,IAAK;IAC5B,IAAIZ,IAAI,EAAE;MACRI,YAAY,CAACS,OAAO,CAAC,QAAQb,IAAI,CAACM,EAAE,EAAE,EAAEC,IAAI,CAACO,SAAS,CAACF,OAAO,CAAC,CAAC;IAClE;EACF,CAAC;EAED,MAAMG,SAAS,GAAG,MAAAA,CAAOC,OAAO,EAAEC,iBAAiB,GAAG,CAAC,KAAK;IAC1D,IAAI;MACFP,OAAO,CAACQ,GAAG,CAAC,mCAAmC,EAAEF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,QAAQ,EAAE,KAAK,EAAE,CAAAH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEV,EAAE,MAAIU,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,SAAS,GAAE,WAAW,EAAEH,iBAAiB,CAAC;MAC7IP,OAAO,CAACQ,GAAG,CAAC,sBAAsB,EAAEF,OAAO,CAAC;;MAE5C;MACA,MAAMI,SAAS,GAAGJ,OAAO,CAACV,EAAE,IAAIU,OAAO,CAACI,SAAS;MAEjD,IAAI,CAACJ,OAAO,IAAI,CAACI,SAAS,EAAE;QAC1BV,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEO,OAAO,CAAC;QAC7CK,KAAK,CAAC,0DAA0D,CAAC;QACjE,OAAO,KAAK;MACd;;MAEA;MACA,MAAMC,YAAY,GAAG,MAAMC,wBAAwB,CAACH,SAAS,EAAEH,iBAAiB,CAAC;MAEjF,IAAI,CAACK,YAAY,CAACE,SAAS,EAAE;QAC3Bd,OAAO,CAACQ,GAAG,CAAC,kBAAkB,EAAEI,YAAY,CAACG,MAAM,CAAC;QACpDJ,KAAK,CAAC,mCAAmCC,YAAY,CAACG,MAAM,EAAE,CAAC;QAC/D,OAAO,KAAK;MACd;;MAEA;MACAf,OAAO,CAACQ,GAAG,CAAC,oBAAoB,EAAEtB,IAAI,CAAC;MACvCc,OAAO,CAACQ,GAAG,CAAC,oCAAoC,EAAEE,SAAS,CAAC;MAE5D,IAAIM,iBAAiB,GAAG,CAAC,CAAC;MAC1B,IAAI,CAACC,KAAK,CAACC,OAAO,CAAChC,IAAI,CAAC,EAAE;QACxBc,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEb,IAAI,CAAC;QAChDC,OAAO,CAAC,EAAE,CAAC;MACb,CAAC,MAAM;QACL6B,iBAAiB,GAAG9B,IAAI,CAACiC,SAAS,CAACC,IAAI,IAAIA,IAAI,KAAKA,IAAI,CAACxB,EAAE,KAAKc,SAAS,IAAIU,IAAI,CAACV,SAAS,KAAKA,SAAS,CAAC,CAAC;MAC7G;MAEAV,OAAO,CAACQ,GAAG,CAAC,8BAA8B,EAAEQ,iBAAiB,CAAC;MAC9D,IAAId,OAAO;MAEX,IAAIc,iBAAiB,IAAI,CAAC,EAAE;QAC1B;QACA,MAAMK,qBAAqB,GAAGnC,IAAI,CAAC8B,iBAAiB,CAAC,CAACM,QAAQ,IAAI,CAAC;QACnE,MAAMC,aAAa,GAAGF,qBAAqB,GAAGd,iBAAiB;QAE/D,IAAIgB,aAAa,GAAGX,YAAY,CAACY,iBAAiB,EAAE;UAClDb,KAAK,CAAC,uBAAuBC,YAAY,CAACY,iBAAiB,GAAGH,qBAAqB,6BAA6B,CAAC;UACjH,OAAO,KAAK;QACd;QAEAnB,OAAO,GAAG,CAAC,GAAGhB,IAAI,CAAC;QACnBgB,OAAO,CAACc,iBAAiB,CAAC,CAACM,QAAQ,GAAGC,aAAa;MACrD,CAAC,MAAM;QACLrB,OAAO,GAAG,CAAC,GAAGhB,IAAI,EAAE;UAClB,GAAGoB,OAAO;UACVV,EAAE,EAAEc,SAAS;UAAE;UACfA,SAAS,EAAEA,SAAS;UAAE;UACtBY,QAAQ,EAAEf,iBAAiB;UAC3BkB,OAAO,EAAE,IAAIC,IAAI,CAAC,CAAC;UACnBF,iBAAiB,EAAEZ,YAAY,CAACY;QAClC,CAAC,CAAC;MACJ;MAEArC,OAAO,CAACe,OAAO,CAAC;;MAEhB;MACAR,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACF,OAAO,CAAC,CAAC;;MAErD;MACA,IAAIZ,IAAI,EAAE;QACR,IAAI;UACF,MAAMqC,SAAS,CAACC,GAAG,CAACC,EAAE,EAAE,OAAO,EAAEvC,IAAI,CAACwC,GAAG,CAAC,EAAE;YAC1C5C,IAAI,EAAEgB;UACR,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOH,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC9D;MACF;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACgC,KAAK,CAAC;MAC1C/B,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEO,OAAO,CAAC;MAClDK,KAAK,CAAC,+BAA+BZ,KAAK,CAACiC,OAAO,EAAE,CAAC;MACrD,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMC,cAAc,GAAG,MAAOvB,SAAS,IAAK;IAC1C,MAAMR,OAAO,GAAGhB,IAAI,CAACgD,MAAM,CAACd,IAAI,IAAI,CAACA,IAAI,CAACV,SAAS,IAAIU,IAAI,CAACxB,EAAE,MAAMc,SAAS,CAAC;IAC9EvB,OAAO,CAACe,OAAO,CAAC;;IAEhB;IACAR,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACF,OAAO,CAAC,CAAC;;IAErD;IACA,IAAIZ,IAAI,EAAE;MACR,IAAI;QACF,MAAMqC,SAAS,CAACC,GAAG,CAACC,EAAE,EAAE,OAAO,EAAEvC,IAAI,CAACwC,GAAG,CAAC,EAAE;UAC1C5C,IAAI,EAAEgB;QACR,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF;EACF,CAAC;EAED,MAAMoC,sBAAsB,GAAG,MAAAA,CAAOzB,SAAS,EAAEY,QAAQ,KAAK;IAC5D,MAAMpB,OAAO,GAAGhB,IAAI,CAACkD,GAAG,CAAChB,IAAI,IAC3BA,IAAI,CAACxB,EAAE,KAAKc,SAAS,GAAG;MAAE,GAAGU,IAAI;MAAEE,QAAQ,EAAEe,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEhB,QAAQ;IAAE,CAAC,GAAGF,IACzE,CAAC;IACDjC,OAAO,CAACe,OAAO,CAAC;;IAEhB;IACAR,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACF,OAAO,CAAC,CAAC;;IAErD;IACA,IAAIZ,IAAI,EAAE;MACR,IAAI;QACF,MAAMqC,SAAS,CAACC,GAAG,CAACC,EAAE,EAAE,OAAO,EAAEvC,IAAI,CAACwC,GAAG,CAAC,EAAE;UAC1C5C,IAAI,EAAEgB;QACR,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF;EACF,CAAC;EAED,MAAMwC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5BpD,OAAO,CAAC,EAAE,CAAC;IACXO,YAAY,CAAC8C,UAAU,CAAC,MAAM,CAAC;IAE/B,IAAIlD,IAAI,EAAE;MACR,IAAI;QACF,MAAMqC,SAAS,CAACC,GAAG,CAACC,EAAE,EAAE,OAAO,EAAEvC,IAAI,CAACwC,GAAG,CAAC,EAAE;UAC1C5C,IAAI,EAAE;QACR,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF;EACF,CAAC;EAED,MAAM0C,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAInD,IAAI,EAAE;MACR,IAAI;QACF,MAAMoD,OAAO,GAAG,MAAMC,MAAM,CAACf,GAAG,CAACC,EAAE,EAAE,OAAO,EAAEvC,IAAI,CAACwC,GAAG,CAAC,CAAC;QACxD,IAAIY,OAAO,CAACE,MAAM,CAAC,CAAC,EAAE;UACpB,MAAMC,IAAI,GAAGH,OAAO,CAACG,IAAI,CAAC,CAAC;UAC3BC,WAAW,CAACD,IAAI,CAAC;UACjB1D,OAAO,CAAC0D,IAAI,CAAC3D,IAAI,IAAI,EAAE,CAAC;QAC1B;MACF,CAAC,CAAC,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAChE;IACF;EACF,CAAC;EAED,MAAMgD,iBAAiB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,aAAa,GAAG,UAAU,EAAEC,UAAU,GAAG,EAAE,KAAK;IACtF,IAAI,CAAC5D,IAAI,IAAI,CAAC0D,KAAK,CAACG,MAAM,EAAE,OAAO,IAAI;IAEvC,IAAI;MAAA,IAAAC,SAAA,EAAAC,UAAA;MACF,MAAMC,WAAW,GAAG;QAClBC,OAAO,EAAEjE,IAAI,CAACwC,GAAG;QACjB0B,SAAS,EAAE,EAAAJ,SAAA,GAAAK,QAAQ,cAAAL,SAAA,uBAARA,SAAA,CAAUM,QAAQ,OAAAL,UAAA,GAAII,QAAQ,cAAAJ,UAAA,uBAARA,UAAA,CAAUM,WAAW,KAAIrE,IAAI,CAACsE,KAAK;QACpEV,UAAU,EAAEA,UAAU,CAACW,IAAI,CAAC,CAAC;QAC7Bb,KAAK,EAAEA,KAAK,CAACZ,GAAG,CAAChB,IAAI,KAAK;UACxBV,SAAS,EAAEU,IAAI,CAACxB,EAAE;UAClBkE,MAAM,EAAE1C,IAAI,CAAC0C,MAAM;UACnBrD,QAAQ,EAAEW,IAAI,CAACX,QAAQ;UACvBsD,SAAS,EAAE3C,IAAI,CAAC2C,SAAS;UACzBC,QAAQ,EAAE5C,IAAI,CAAC4C,QAAQ;UACvBC,UAAU,EAAE7C,IAAI,CAAC6C,UAAU;UAC3BC,KAAK,EAAE9C,IAAI,CAAC8C,KAAK;UACjB5C,QAAQ,EAAEF,IAAI,CAACE,QAAQ,IAAI,CAAC;UAC5B6C,SAAS,EAAE/C,IAAI,CAAC+C;QAClB,CAAC,CAAC,CAAC;QACHC,WAAW,EAAEpB,KAAK,CAACqB,MAAM,CAAC,CAACC,GAAG,EAAElD,IAAI,KAAKkD,GAAG,GAAIlD,IAAI,CAAC8C,KAAK,IAAI9C,IAAI,CAACE,QAAQ,IAAI,CAAC,CAAE,EAAE,CAAC,CAAC;QACtF2B,aAAa;QACbsB,MAAM,EAAE,WAAW;QAAE;QACrBC,SAAS,EAAE,IAAI9C,IAAI,CAAC,CAAC;QACrB+C,SAAS,EAAE,IAAI/C,IAAI,CAAC;MACtB,CAAC;MAED,MAAMgD,cAAc,GAAG,MAAMC,MAAM,CAACC,UAAU,CAAC/C,EAAE,EAAE,cAAc,CAAC,EAAEyB,WAAW,CAAC;;MAEhF;MACA,MAAMf,SAAS,CAAC,CAAC;MAEjB,OAAOmC,cAAc,CAAC9E,EAAE;IAC1B,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAM8E,uBAAuB,GAAG,MAAAA,CAAOC,aAAa,EAAEP,MAAM,KAAK;IAC/D,IAAI,CAACjF,IAAI,EAAE,OAAO,KAAK;IAEvB,IAAI;MACF,MAAMqC,SAAS,CAACC,GAAG,CAACC,EAAE,EAAE,cAAc,EAAEiD,aAAa,CAAC,EAAE;QACtDP,MAAM;QACNE,SAAS,EAAE,IAAI/C,IAAI,CAAC;MACtB,CAAC,CAAC;MACF,OAAO,IAAI;IACb,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAMc,wBAAwB,GAAG,MAAAA,CAAOH,SAAS,EAAEH,iBAAiB,GAAG,CAAC,KAAK;IAC3E,IAAI;MACFP,OAAO,CAACQ,GAAG,CAAC,6CAA6C,EAAEE,SAAS,EAAE,WAAW,EAAEH,iBAAiB,CAAC;MAErG,MAAMwE,QAAQ,GAAG,MAAMrG,SAAS,CAACsG,GAAG,CAAC,oBAAoBtE,SAAS,EAAE,CAAC;MAErE,IAAI,CAACqE,QAAQ,CAAClC,IAAI,CAACoC,OAAO,EAAE;QAC1BjF,OAAO,CAACQ,GAAG,CAAC,sBAAsB,EAAEE,SAAS,CAAC;QAC9C,OAAO;UAAEI,SAAS,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAuB,CAAC;MAC7D;MAEA,MAAMmE,WAAW,GAAGH,QAAQ,CAAClC,IAAI,CAACvC,OAAO;MACzCN,OAAO,CAACQ,GAAG,CAAC,uBAAuB,EAAE0E,WAAW,CAAC;MAEjD,MAAM1D,iBAAiB,GAAG0D,WAAW,CAAC1D,iBAAiB,IAAI0D,WAAW,CAAC5D,QAAQ,IAAI,CAAC;MACpF,MAAMiD,MAAM,GAAGW,WAAW,CAACX,MAAM,IAAI,QAAQ;MAE7CvE,OAAO,CAACQ,GAAG,CAAC,YAAY,EAAE+D,MAAM,EAAE,aAAa,EAAE/C,iBAAiB,EAAE,aAAa,EAAEjB,iBAAiB,CAAC;MAErG,IAAIgE,MAAM,KAAK,UAAU,EAAE;QACzB,OAAO;UAAEzD,SAAS,EAAE,KAAK;UAAEC,MAAM,EAAE;QAA2B,CAAC;MACjE;MAEA,IAAIwD,MAAM,KAAK,UAAU,IAAI/C,iBAAiB,KAAK,CAAC,EAAE;QACpD,OAAO;UAAEV,SAAS,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAmB,CAAC;MACzD;MAEA,IAAIS,iBAAiB,GAAGjB,iBAAiB,EAAE;QACzC,OAAO;UACLO,SAAS,EAAE,KAAK;UAChBC,MAAM,EAAE,YAAYS,iBAAiB,UAAUA,iBAAiB,GAAG,CAAC,GAAG,IAAI,GAAG,EAAE,cAAcA,iBAAiB,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE;UAChIA;QACF,CAAC;MACH;MAEAxB,OAAO,CAACQ,GAAG,CAAC,0CAA0C,CAAC;MACvD,OAAO;QACLM,SAAS,EAAE,IAAI;QACfU,iBAAiB;QACjB+C,MAAM,EAAEW,WAAW,CAACX;MACtB,CAAC;IACH,CAAC,CAAC,OAAOxE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3DC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACiC,OAAO,EAAEjC,KAAK,CAACoF,IAAI,CAAC;MAC1D,OAAO;QAAErE,SAAS,EAAE,KAAK;QAAEC,MAAM,EAAE,qCAAqChB,KAAK,CAACiC,OAAO;MAAG,CAAC;IAC3F;EACF,CAAC;EAED,MAAMoD,aAAa,GAAGA,CAAA,KAAM;IAC1B,OAAOlG,IAAI,CAACmF,MAAM,CAAC,CAACgB,KAAK,EAAEjE,IAAI,KAAKiE,KAAK,IAAIjE,IAAI,CAACE,QAAQ,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EACtE,CAAC;EAED,MAAMgE,aAAa,GAAGA,CAAA,KAAM;IAC1B,OAAOpG,IAAI,CAACmF,MAAM,CAAC,CAACgB,KAAK,EAAEjE,IAAI,KAAKiE,KAAK,GAAIjE,IAAI,CAAC8C,KAAK,IAAI9C,IAAI,CAACE,QAAQ,IAAI,CAAC,CAAE,EAAE,CAAC,CAAC;EACrF,CAAC;EAED,MAAMiE,qBAAqB,GAAG,MAAAA,CAAO7E,SAAS,EAAE8E,gBAAgB,KAAK;IACnE,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,cAAc,CAAC7D,EAAE,EAAE,MAAOyB,WAAW,IAAK;QAC7D,MAAMqC,UAAU,GAAG/D,GAAG,CAACC,EAAE,EAAE,UAAU,EAAEnB,SAAS,CAAC;QACjD,MAAMkF,WAAW,GAAG,MAAMtC,WAAW,CAAC0B,GAAG,CAACW,UAAU,CAAC;QAErD,IAAI,CAACC,WAAW,CAAChD,MAAM,CAAC,CAAC,EAAE;UACzB,MAAM,IAAIiD,KAAK,CAAC,sBAAsB,CAAC;QACzC;QAEA,MAAMX,WAAW,GAAGU,WAAW,CAAC/C,IAAI,CAAC,CAAC;QACtC,MAAMiD,gBAAgB,GAAGZ,WAAW,CAAC1D,iBAAiB,IAAI0D,WAAW,CAAC5D,QAAQ,IAAI,CAAC;QAEnF,IAAIwE,gBAAgB,GAAGN,gBAAgB,EAAE;UACvC,MAAM,IAAIK,KAAK,CAAC,YAAYC,gBAAgB,uBAAuB,CAAC;QACtE;QAEA,MAAMC,YAAY,GAAGD,gBAAgB,GAAGN,gBAAgB;QACxD,MAAMQ,SAAS,GAAGD,YAAY,KAAK,CAAC,GAAG,UAAU,GAAG,QAAQ;QAE5DzC,WAAW,CAAC2C,MAAM,CAACN,UAAU,EAAE;UAC7BnE,iBAAiB,EAAEuE,YAAY;UAC/BxB,MAAM,EAAEyB,SAAS;UACjBvB,SAAS,EAAE,IAAI/C,IAAI,CAAC;QACtB,CAAC,CAAC;QAEF,OAAO;UAAEuD,OAAO,EAAE,IAAI;UAAEc,YAAY;UAAEC;QAAU,CAAC;MACnD,CAAC,CAAC;MAEF,OAAOP,MAAM;IACf,CAAC,CAAC,OAAO1F,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA;EACA;;EAEA;EACA,MAAMmG,uBAAuB,GAAG,MAAOlD,KAAK,IAAK;IAC/C,IAAI;MACF,MAAMmD,iBAAiB,GAAGC,aAAa,CAACC,SAAS,EAAE,yBAAyB,CAAC;MAC7E,MAAMZ,MAAM,GAAG,MAAMU,iBAAiB,CAAC;QACrCnD,KAAK,EAAEA,KAAK,CAACZ,GAAG,CAAChB,IAAI,KAAK;UACxBV,SAAS,EAAEU,IAAI,CAACxB,EAAE;UAClBW,iBAAiB,EAAEa,IAAI,CAACE,QAAQ,IAAI;QACtC,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,OAAOmE,MAAM,CAAC5C,IAAI;IACpB,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjE,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMuG,wBAAwB,GAAG,MAAAA,CAAOC,WAAW,EAAEtD,aAAa,GAAG,UAAU,EAAEC,UAAU,GAAG,EAAE,KAAK;IACnG,IAAI,CAAC5D,IAAI,IAAI,CAACiH,WAAW,CAACpD,MAAM,EAAE;MAChC,MAAM,IAAI0C,KAAK,CAAC,uCAAuC,CAAC;IAC1D;IAEA,IAAI;MAAA,IAAAW,UAAA,EAAAC,UAAA;MACF,MAAM1D,iBAAiB,GAAGqD,aAAa,CAACC,SAAS,EAAE,0BAA0B,CAAC;MAE9E,MAAMK,eAAe,GAAG;QACtBnD,OAAO,EAAEjE,IAAI,CAACwC,GAAG;QACjB0B,SAAS,EAAE,EAAAgD,UAAA,GAAA/C,QAAQ,cAAA+C,UAAA,uBAARA,UAAA,CAAU9C,QAAQ,OAAA+C,UAAA,GAAIhD,QAAQ,cAAAgD,UAAA,uBAARA,UAAA,CAAU9C,WAAW,KAAIrE,IAAI,CAACsE,KAAK;QACpEV,UAAU,EAAEA,UAAU,CAACW,IAAI,CAAC,CAAC;QAC7B8C,QAAQ,EAAEJ,WAAW,CAAC,CAAC,CAAC,CAACvC,QAAQ;QAAE;QACnChB,KAAK,EAAEuD,WAAW,CAACnE,GAAG,CAAChB,IAAI,KAAK;UAC9BV,SAAS,EAAEU,IAAI,CAACxB,EAAE;UAClBkE,MAAM,EAAE1C,IAAI,CAAC0C,MAAM;UACnBrD,QAAQ,EAAEW,IAAI,CAACX,QAAQ;UACvBsD,SAAS,EAAE3C,IAAI,CAAC2C,SAAS;UACzBC,QAAQ,EAAE5C,IAAI,CAAC4C,QAAQ;UACvBC,UAAU,EAAE7C,IAAI,CAAC6C,UAAU;UAC3BC,KAAK,EAAE9C,IAAI,CAAC8C,KAAK;UACjB5C,QAAQ,EAAEF,IAAI,CAACE,QAAQ,IAAI,CAAC;UAC5B6C,SAAS,EAAE/C,IAAI,CAAC+C;QAClB,CAAC,CAAC,CAAC;QACHC,WAAW,EAAEmC,WAAW,CAAClC,MAAM,CAAC,CAACC,GAAG,EAAElD,IAAI,KAAKkD,GAAG,GAAIlD,IAAI,CAAC8C,KAAK,IAAI9C,IAAI,CAACE,QAAQ,IAAI,CAAC,CAAE,EAAE,CAAC,CAAC;QAC5F2B,aAAa;QACb2D,YAAY,EAAEL,WAAW,CAAC,CAAC,CAAC,CAACM,gBAAgB,GAAG,CAAC,GAAG;MACtD,CAAC;MAED,MAAMpB,MAAM,GAAG,MAAM1C,iBAAiB,CAAC2D,eAAe,CAAC;;MAEvD;MACA,MAAMI,mBAAmB,GAAGP,WAAW,CAACnE,GAAG,CAAChB,IAAI,IAAIA,IAAI,CAACxB,EAAE,CAAC;MAC5D,MAAMM,OAAO,GAAGhB,IAAI,CAACgD,MAAM,CAACd,IAAI,IAAI,CAAC0F,mBAAmB,CAACC,QAAQ,CAAC3F,IAAI,CAACxB,EAAE,CAAC,CAAC;MAC3ET,OAAO,CAACe,OAAO,CAAC;;MAEhB;MACAR,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACF,OAAO,CAAC,CAAC;MACrD,IAAIZ,IAAI,EAAE;QACR,MAAMqC,SAAS,CAACC,GAAG,CAACC,EAAE,EAAE,OAAO,EAAEvC,IAAI,CAACwC,GAAG,CAAC,EAAE;UAAE5C,IAAI,EAAEgB;QAAQ,CAAC,CAAC;MAChE;MAEA,OAAOuF,MAAM,CAAC5C,IAAI;IACpB,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMiH,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,OAAO,GAAG,CAAC,CAAC;IAElB/H,IAAI,CAACgI,OAAO,CAAC9F,IAAI,IAAI;MACnB,MAAMuF,QAAQ,GAAGvF,IAAI,CAAC4C,QAAQ;MAC9B,IAAI,CAACiD,OAAO,CAACN,QAAQ,CAAC,EAAE;QACtBM,OAAO,CAACN,QAAQ,CAAC,GAAG;UAClBA,QAAQ;UACRQ,UAAU,EAAE/F,IAAI,CAAC6C,UAAU;UAC3BmD,WAAW,EAAEhG,IAAI,CAACiG,SAAS;UAC3BC,WAAW,EAAElG,IAAI,CAACmG,SAAS;UAC3BvE,KAAK,EAAE,EAAE;UACToB,WAAW,EAAE,CAAC;UACdoD,UAAU,EAAE,CAAC;UACbC,WAAW,EAAE;QACf,CAAC;MACH;MAEAR,OAAO,CAACN,QAAQ,CAAC,CAAC3D,KAAK,CAAC0E,IAAI,CAACtG,IAAI,CAAC;MAClC6F,OAAO,CAACN,QAAQ,CAAC,CAACvC,WAAW,IAAIhD,IAAI,CAAC8C,KAAK,IAAI9C,IAAI,CAACE,QAAQ,IAAI,CAAC,CAAC;MAClE2F,OAAO,CAACN,QAAQ,CAAC,CAACa,UAAU,IAAKpG,IAAI,CAACE,QAAQ,IAAI,CAAE;;MAEpD;MACA,IAAI,CAACF,IAAI,CAACyF,gBAAgB,EAAE;QAC1BI,OAAO,CAACN,QAAQ,CAAC,CAACc,WAAW,GAAG,IAAI;MACtC;IACF,CAAC,CAAC;IAEF,OAAOE,MAAM,CAACC,MAAM,CAACX,OAAO,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMY,mBAAmB,GAAG,MAAAA,CAAOC,IAAI,GAAG,KAAK,KAAK;IAClD,IAAI,CAACxI,IAAI,EAAE,OAAO,EAAE;IAEpB,IAAI;MACF,MAAMuI,mBAAmB,GAAGzB,aAAa,CAACC,SAAS,EAAE,qBAAqB,CAAC;MAC3E,MAAMZ,MAAM,GAAG,MAAMoC,mBAAmB,CAAC;QACvCE,MAAM,EAAEzI,IAAI,CAACwC,GAAG;QAChBgG,IAAI,CAAC;MACP,CAAC,CAAC;MAEF,OAAOrC,MAAM,CAAC5C,IAAI,CAACmF,YAAY,IAAI,EAAE;IACvC,CAAC,CAAC,OAAOjI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,OAAO,EAAE;IACX;EACF,CAAC;;EAED;EACA,MAAMkI,oBAAoB,GAAG,MAAAA,CAAOnD,aAAa,EAAEoD,UAAU,KAAK;IAChE,IAAI,CAAC5I,IAAI,EAAE;MACT,MAAM,IAAIuG,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,IAAI;MACF,MAAMsC,iBAAiB,GAAG/B,aAAa,CAACC,SAAS,EAAE,sBAAsB,CAAC;MAC1E,MAAMZ,MAAM,GAAG,MAAM0C,iBAAiB,CAAC;QACrCrD,aAAa;QACbiD,MAAM,EAAEzI,IAAI,CAACwC,GAAG;QAChB,GAAGoG;MACL,CAAC,CAAC;MAEF,OAAOzC,MAAM,CAAC5C,IAAI;IACpB,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMqI,oBAAoB,GAAG,MAAAA,CAAOtD,aAAa,EAAEuD,MAAM,EAAEC,YAAY,GAAG,CAAC,CAAC,KAAK;IAC/E,IAAI,CAAChJ,IAAI,EAAE;MACT,MAAM,IAAIuG,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,IAAI;MACF,MAAMuC,oBAAoB,GAAGhC,aAAa,CAACC,SAAS,EAAE,sBAAsB,CAAC;MAC7E,MAAMZ,MAAM,GAAG,MAAM2C,oBAAoB,CAAC;QACxCtD,aAAa;QACbd,QAAQ,EAAE1E,IAAI,CAACwC,GAAG;QAClBuG,MAAM;QAAE;QACR,GAAGC;MACL,CAAC,CAAC;MAEF,OAAO7C,MAAM,CAAC5C,IAAI;IACpB,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMwI,eAAe,GAAG,MAAAA,CAAOzD,aAAa,EAAE0D,aAAa,KAAK;IAC9D,IAAI,CAAClJ,IAAI,EAAE;MACT,MAAM,IAAIuG,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,IAAI;MACF,MAAM0C,eAAe,GAAGnC,aAAa,CAACC,SAAS,EAAE,iBAAiB,CAAC;MACnE,MAAMZ,MAAM,GAAG,MAAM8C,eAAe,CAAC;QACnCzD,aAAa;QACbd,QAAQ,EAAE1E,IAAI,CAACwC,GAAG;QAClB0G,aAAa,CAAC;MAChB,CAAC,CAAC;MAEF,OAAO/C,MAAM,CAAC5C,IAAI;IACpB,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAM0I,cAAc,GAAG,MAAAA,CAAO3D,aAAa,EAAE4D,YAAY,KAAK;IAC5D,IAAI,CAACpJ,IAAI,EAAE;MACT,MAAM,IAAIuG,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,IAAI;MACF,MAAM4C,cAAc,GAAGrC,aAAa,CAACC,SAAS,EAAE,gBAAgB,CAAC;MACjE,MAAMZ,MAAM,GAAG,MAAMgD,cAAc,CAAC;QAClC3D,aAAa;QACbd,QAAQ,EAAE1E,IAAI,CAACwC,GAAG;QAClB4G,YAAY,CAAC;MACf,CAAC,CAAC;MAEF,OAAOjD,MAAM,CAAC5C,IAAI;IACpB,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAM4I,cAAc,GAAG,MAAAA,CAAO7D,aAAa,EAAE8D,WAAW,KAAK;IAC3D,IAAI,CAACtJ,IAAI,EAAE;MACT,MAAM,IAAIuG,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,IAAI;MACF,MAAM8C,cAAc,GAAGvC,aAAa,CAACC,SAAS,EAAE,gBAAgB,CAAC;MACjE,MAAMZ,MAAM,GAAG,MAAMkD,cAAc,CAAC;QAClC7D,aAAa;QACbvB,OAAO,EAAEjE,IAAI,CAACwC,GAAG;QACjB,GAAG8G,WAAW,CAAC;MACjB,CAAC,CAAC;MAEF,OAAOnD,MAAM,CAAC5C,IAAI;IACpB,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAM8I,YAAY,GAAG,MAAAA,CAAO/D,aAAa,EAAEgE,UAAU,KAAK;IACxD,IAAI,CAACxJ,IAAI,EAAE;MACT,MAAM,IAAIuG,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,IAAI;MACF,MAAMgD,YAAY,GAAGzC,aAAa,CAACC,SAAS,EAAE,cAAc,CAAC;MAC7D,MAAMZ,MAAM,GAAG,MAAMoD,YAAY,CAAC;QAChC/D,aAAa;QACbiD,MAAM,EAAEzI,IAAI,CAACwC,GAAG;QAChB,GAAGgH,UAAU,CAAC;MAChB,CAAC,CAAC;MAEF,OAAOrD,MAAM,CAAC5C,IAAI;IACpB,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMgJ,aAAa,GAAG,MAAAA,CAAOjE,aAAa,EAAEkE,WAAW,KAAK;IAC1D,IAAI,CAAC1J,IAAI,EAAE;MACT,MAAM,IAAIuG,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,IAAI;MACF,MAAMkD,aAAa,GAAG3C,aAAa,CAACC,SAAS,EAAE,eAAe,CAAC;MAC/D,MAAMZ,MAAM,GAAG,MAAMsD,aAAa,CAAC;QACjCjE,aAAa;QACbmE,UAAU,EAAE3J,IAAI,CAACwC,GAAG;QACpB,GAAGkH,WAAW,CAAC;MACjB,CAAC,CAAC;MAEF,OAAOvD,MAAM,CAAC5C,IAAI;IACpB,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,oBACElB,OAAA,CAACC,WAAW,CAACoK,QAAQ;IAACC,KAAK,EAAE;MAC3B;MACAjK,IAAI;MACJmB,SAAS;MACT4B,cAAc;MACdE,sBAAsB;MACtBI,SAAS;MACT6C,aAAa;MACbE,aAAa;MACbhG,IAAI;MACJmE,QAAQ;MACRrE,OAAO;MACPqD,YAAY;MACZM,iBAAiB;MACjB8B,uBAAuB;MACvBhE,wBAAwB;MACxB0E,qBAAqB;MAErB;MACAW,uBAAuB;MACvBI,wBAAwB;MACxBU,eAAe;MACfa,mBAAmB;MACnBI,oBAAoB;MACpBG,oBAAoB;MACpBG,eAAe;MACfE,cAAc;MACdE,cAAc;MACdE,YAAY;MACZE;IACF,CAAE;IAAA/J,QAAA,EACCA;EAAQ;IAAAoK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACtK,EAAA,CAvoBeF,YAAY;EAAA,QAGQJ,OAAO;AAAA;AAAA6K,EAAA,GAH3BzK,YAAY;AAyoB5B,OAAO,SAAS0K,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,OAAOnL,UAAU,CAACO,WAAW,CAAC;AAChC;AAAC4K,GAAA,CAFeD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}