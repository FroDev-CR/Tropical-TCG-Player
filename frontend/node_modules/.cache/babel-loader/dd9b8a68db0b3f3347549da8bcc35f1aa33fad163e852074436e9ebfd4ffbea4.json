{"ast":null,"code":"// src/utils/validation.js\n// Utilidades de validación para Costa Rica\n\n/**\n * Valida el formato de cédula costarricense\n * Formato: #-####-#### donde # puede ser 1-9\n */\nexport const validateCedulaFormat = cedula => {\n  if (!cedula) return {\n    valid: false,\n    error: 'Cédula es requerida'\n  };\n\n  // Remover espacios y guiones para validación\n  const cleanCedula = cedula.replace(/[\\s-]/g, '');\n\n  // Debe tener 9 dígitos\n  if (cleanCedula.length !== 9) {\n    return {\n      valid: false,\n      error: 'La cédula debe tener 9 dígitos'\n    };\n  }\n\n  // Solo debe contener números\n  if (!/^\\d{9}$/.test(cleanCedula)) {\n    return {\n      valid: false,\n      error: 'La cédula solo debe contener números'\n    };\n  }\n\n  // El primer dígito debe ser 1-9 (no puede ser 0)\n  const firstDigit = parseInt(cleanCedula[0]);\n  if (firstDigit < 1 || firstDigit > 9) {\n    return {\n      valid: false,\n      error: 'El primer dígito debe ser entre 1 y 9'\n    };\n  }\n  return {\n    valid: true,\n    cleanCedula,\n    formatted: formatCedula(cleanCedula)\n  };\n};\n\n/**\n * Formatea una cédula con guiones\n * Ejemplo: \"123456789\" -> \"1-2345-6789\"\n */\nexport const formatCedula = cedula => {\n  if (!cedula) return '';\n  const clean = cedula.replace(/[\\s-]/g, '');\n  if (clean.length !== 9) return cedula;\n  return `${clean[0]}-${clean.substring(1, 5)}-${clean.substring(5)}`;\n};\n\n/**\n * Valida número de teléfono costarricense\n * Formatos aceptados: 8888-8888, 88888888, 2222-2222, 22222222\n */\nexport const validatePhoneFormat = phone => {\n  if (!phone) return {\n    valid: false,\n    error: 'Teléfono es requerido'\n  };\n\n  // Remover espacios y guiones\n  const cleanPhone = phone.replace(/[\\s-]/g, '');\n\n  // Debe tener 8 dígitos\n  if (cleanPhone.length !== 8) {\n    return {\n      valid: false,\n      error: 'El teléfono debe tener 8 dígitos'\n    };\n  }\n\n  // Solo números\n  if (!/^\\d{8}$/.test(cleanPhone)) {\n    return {\n      valid: false,\n      error: 'El teléfono solo debe contener números'\n    };\n  }\n\n  // Validar prefijos válidos en Costa Rica\n  const firstDigit = cleanPhone[0];\n  const validPrefixes = ['2', '4', '5', '6', '7', '8', '9'];\n  if (!validPrefixes.includes(firstDigit)) {\n    return {\n      valid: false,\n      error: 'Prefijo de teléfono no válido para Costa Rica'\n    };\n  }\n  return {\n    valid: true,\n    cleanPhone,\n    formatted: formatPhone(cleanPhone)\n  };\n};\n\n/**\n * Formatea número de teléfono con guión\n * Ejemplo: \"88888888\" -> \"8888-8888\"\n */\nexport const formatPhone = phone => {\n  if (!phone) return '';\n  const clean = phone.replace(/[\\s-]/g, '');\n  if (clean.length !== 8) return phone;\n  return `${clean.substring(0, 4)}-${clean.substring(4)}`;\n};\n\n/**\n * Valida email\n */\nexport const validateEmail = email => {\n  if (!email) return {\n    valid: false,\n    error: 'Email es requerido'\n  };\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    return {\n      valid: false,\n      error: 'Formato de email inválido'\n    };\n  }\n  return {\n    valid: true\n  };\n};\n\n/**\n * Valida nombre de usuario\n * - Mínimo 3 caracteres\n * - Solo letras, números y guiones bajos\n * - Debe empezar con letra\n */\nexport const validateUsername = username => {\n  if (!username) return {\n    valid: false,\n    error: 'Nombre de usuario es requerido'\n  };\n  if (username.length < 3) {\n    return {\n      valid: false,\n      error: 'Mínimo 3 caracteres'\n    };\n  }\n  if (username.length > 20) {\n    return {\n      valid: false,\n      error: 'Máximo 20 caracteres'\n    };\n  }\n\n  // Solo letras, números y guiones bajos\n  if (!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(username)) {\n    return {\n      valid: false,\n      error: 'Solo letras, números y guiones bajos. Debe empezar con letra'\n    };\n  }\n  return {\n    valid: true\n  };\n};\n\n/**\n * Valida contraseña\n * - Mínimo 6 caracteres\n * - Al menos una letra y un número\n */\nexport const validatePassword = password => {\n  if (!password) return {\n    valid: false,\n    error: 'Contraseña es requerida'\n  };\n  if (password.length < 6) {\n    return {\n      valid: false,\n      error: 'Mínimo 6 caracteres'\n    };\n  }\n\n  // Al menos una letra\n  if (!/[a-zA-Z]/.test(password)) {\n    return {\n      valid: false,\n      error: 'Debe contener al menos una letra'\n    };\n  }\n\n  // Al menos un número\n  if (!/\\d/.test(password)) {\n    return {\n      valid: false,\n      error: 'Debe contener al menos un número'\n    };\n  }\n  return {\n    valid: true\n  };\n};\n\n/**\n * Valida formulario completo de registro\n */\nexport const validateRegistrationForm = formData => {\n  const errors = {};\n\n  // Validar cada campo\n  const usernameValidation = validateUsername(formData.username);\n  if (!usernameValidation.valid) errors.username = usernameValidation.error;\n  const emailValidation = validateEmail(formData.email);\n  if (!emailValidation.valid) errors.email = emailValidation.error;\n  const passwordValidation = validatePassword(formData.password);\n  if (!passwordValidation.valid) errors.password = passwordValidation.error;\n  const phoneValidation = validatePhoneFormat(formData.phone);\n  if (!phoneValidation.valid) errors.phone = phoneValidation.error;\n  const cedulaValidation = validateCedulaFormat(formData.cedula);\n  if (!cedulaValidation.valid) errors.cedula = cedulaValidation.error;\n  if (!formData.province) {\n    errors.province = 'Provincia es requerida';\n  }\n  const isValid = Object.keys(errors).length === 0;\n  return {\n    valid: isValid,\n    errors,\n    // Datos formateados si son válidos\n    formattedData: isValid ? {\n      ...formData,\n      phone: phoneValidation.formatted || formData.phone,\n      cedula: cedulaValidation.formatted || formData.cedula\n    } : null\n  };\n};\n\n// Utilidad para obtener mensaje de error amigable\nexport const getValidationMessage = (field, error) => {\n  const messages = {\n    cedula: 'Cédula: ' + error,\n    phone: 'Teléfono: ' + error,\n    email: 'Email: ' + error,\n    username: 'Usuario: ' + error,\n    password: 'Contraseña: ' + error,\n    province: 'Provincia: ' + error\n  };\n  return messages[field] || error;\n};","map":{"version":3,"names":["validateCedulaFormat","cedula","valid","error","cleanCedula","replace","length","test","firstDigit","parseInt","formatted","formatCedula","clean","substring","validatePhoneFormat","phone","cleanPhone","validPrefixes","includes","formatPhone","validateEmail","email","emailRegex","validateUsername","username","validatePassword","password","validateRegistrationForm","formData","errors","usernameValidation","emailValidation","passwordValidation","phoneValidation","cedulaValidation","province","isValid","Object","keys","formattedData","getValidationMessage","field","messages"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/utils/validation.js"],"sourcesContent":["// src/utils/validation.js\n// Utilidades de validación para Costa Rica\n\n/**\n * Valida el formato de cédula costarricense\n * Formato: #-####-#### donde # puede ser 1-9\n */\nexport const validateCedulaFormat = (cedula) => {\n  if (!cedula) return { valid: false, error: 'Cédula es requerida' };\n  \n  // Remover espacios y guiones para validación\n  const cleanCedula = cedula.replace(/[\\s-]/g, '');\n  \n  // Debe tener 9 dígitos\n  if (cleanCedula.length !== 9) {\n    return { valid: false, error: 'La cédula debe tener 9 dígitos' };\n  }\n  \n  // Solo debe contener números\n  if (!/^\\d{9}$/.test(cleanCedula)) {\n    return { valid: false, error: 'La cédula solo debe contener números' };\n  }\n  \n  // El primer dígito debe ser 1-9 (no puede ser 0)\n  const firstDigit = parseInt(cleanCedula[0]);\n  if (firstDigit < 1 || firstDigit > 9) {\n    return { valid: false, error: 'El primer dígito debe ser entre 1 y 9' };\n  }\n  \n  return { valid: true, cleanCedula, formatted: formatCedula(cleanCedula) };\n};\n\n/**\n * Formatea una cédula con guiones\n * Ejemplo: \"123456789\" -> \"1-2345-6789\"\n */\nexport const formatCedula = (cedula) => {\n  if (!cedula) return '';\n  \n  const clean = cedula.replace(/[\\s-]/g, '');\n  if (clean.length !== 9) return cedula;\n  \n  return `${clean[0]}-${clean.substring(1, 5)}-${clean.substring(5)}`;\n};\n\n/**\n * Valida número de teléfono costarricense\n * Formatos aceptados: 8888-8888, 88888888, 2222-2222, 22222222\n */\nexport const validatePhoneFormat = (phone) => {\n  if (!phone) return { valid: false, error: 'Teléfono es requerido' };\n  \n  // Remover espacios y guiones\n  const cleanPhone = phone.replace(/[\\s-]/g, '');\n  \n  // Debe tener 8 dígitos\n  if (cleanPhone.length !== 8) {\n    return { valid: false, error: 'El teléfono debe tener 8 dígitos' };\n  }\n  \n  // Solo números\n  if (!/^\\d{8}$/.test(cleanPhone)) {\n    return { valid: false, error: 'El teléfono solo debe contener números' };\n  }\n  \n  // Validar prefijos válidos en Costa Rica\n  const firstDigit = cleanPhone[0];\n  const validPrefixes = ['2', '4', '5', '6', '7', '8', '9'];\n  \n  if (!validPrefixes.includes(firstDigit)) {\n    return { valid: false, error: 'Prefijo de teléfono no válido para Costa Rica' };\n  }\n  \n  return { valid: true, cleanPhone, formatted: formatPhone(cleanPhone) };\n};\n\n/**\n * Formatea número de teléfono con guión\n * Ejemplo: \"88888888\" -> \"8888-8888\"\n */\nexport const formatPhone = (phone) => {\n  if (!phone) return '';\n  \n  const clean = phone.replace(/[\\s-]/g, '');\n  if (clean.length !== 8) return phone;\n  \n  return `${clean.substring(0, 4)}-${clean.substring(4)}`;\n};\n\n/**\n * Valida email\n */\nexport const validateEmail = (email) => {\n  if (!email) return { valid: false, error: 'Email es requerido' };\n  \n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  \n  if (!emailRegex.test(email)) {\n    return { valid: false, error: 'Formato de email inválido' };\n  }\n  \n  return { valid: true };\n};\n\n/**\n * Valida nombre de usuario\n * - Mínimo 3 caracteres\n * - Solo letras, números y guiones bajos\n * - Debe empezar con letra\n */\nexport const validateUsername = (username) => {\n  if (!username) return { valid: false, error: 'Nombre de usuario es requerido' };\n  \n  if (username.length < 3) {\n    return { valid: false, error: 'Mínimo 3 caracteres' };\n  }\n  \n  if (username.length > 20) {\n    return { valid: false, error: 'Máximo 20 caracteres' };\n  }\n  \n  // Solo letras, números y guiones bajos\n  if (!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(username)) {\n    return { valid: false, error: 'Solo letras, números y guiones bajos. Debe empezar con letra' };\n  }\n  \n  return { valid: true };\n};\n\n/**\n * Valida contraseña\n * - Mínimo 6 caracteres\n * - Al menos una letra y un número\n */\nexport const validatePassword = (password) => {\n  if (!password) return { valid: false, error: 'Contraseña es requerida' };\n  \n  if (password.length < 6) {\n    return { valid: false, error: 'Mínimo 6 caracteres' };\n  }\n  \n  // Al menos una letra\n  if (!/[a-zA-Z]/.test(password)) {\n    return { valid: false, error: 'Debe contener al menos una letra' };\n  }\n  \n  // Al menos un número\n  if (!/\\d/.test(password)) {\n    return { valid: false, error: 'Debe contener al menos un número' };\n  }\n  \n  return { valid: true };\n};\n\n/**\n * Valida formulario completo de registro\n */\nexport const validateRegistrationForm = (formData) => {\n  const errors = {};\n  \n  // Validar cada campo\n  const usernameValidation = validateUsername(formData.username);\n  if (!usernameValidation.valid) errors.username = usernameValidation.error;\n  \n  const emailValidation = validateEmail(formData.email);\n  if (!emailValidation.valid) errors.email = emailValidation.error;\n  \n  const passwordValidation = validatePassword(formData.password);\n  if (!passwordValidation.valid) errors.password = passwordValidation.error;\n  \n  const phoneValidation = validatePhoneFormat(formData.phone);\n  if (!phoneValidation.valid) errors.phone = phoneValidation.error;\n  \n  const cedulaValidation = validateCedulaFormat(formData.cedula);\n  if (!cedulaValidation.valid) errors.cedula = cedulaValidation.error;\n  \n  if (!formData.province) {\n    errors.province = 'Provincia es requerida';\n  }\n  \n  const isValid = Object.keys(errors).length === 0;\n  \n  return {\n    valid: isValid,\n    errors,\n    // Datos formateados si son válidos\n    formattedData: isValid ? {\n      ...formData,\n      phone: phoneValidation.formatted || formData.phone,\n      cedula: cedulaValidation.formatted || formData.cedula\n    } : null\n  };\n};\n\n// Utilidad para obtener mensaje de error amigable\nexport const getValidationMessage = (field, error) => {\n  const messages = {\n    cedula: 'Cédula: ' + error,\n    phone: 'Teléfono: ' + error,\n    email: 'Email: ' + error,\n    username: 'Usuario: ' + error,\n    password: 'Contraseña: ' + error,\n    province: 'Provincia: ' + error\n  };\n  \n  return messages[field] || error;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}