{"ast":null,"code":"// src/services/apiSearchService.js\nclass APISearchService {\n  constructor() {\n    this.cache = new Map();\n    this.cacheTimeout = 5 * 60 * 1000; // 5 minutos\n    this.tcgApiKey = process.env.REACT_APP_TCG_API_KEY;\n    this.useMockData = false; // Desactivado - usando proxy para evitar CORS\n  }\n\n  // Mock data para cuando las APIs fallen\n  getMockCards(searchTerm, tcgType = 'all') {\n    const mockCards = [{\n      id: 'mock-charizard-1',\n      name: 'Charizard',\n      images: {\n        small: 'https://images.pokemontcg.io/base1/4.png',\n        large: 'https://images.pokemontcg.io/base1/4_hires.png'\n      },\n      set: {\n        name: 'Base Set'\n      },\n      rarity: 'Rare Holo',\n      tcgType: 'pokemon',\n      apiSource: 'mock',\n      hp: 120,\n      types: ['Fire'],\n      attacks: [{\n        name: 'Fire Spin',\n        damage: '100',\n        cost: ['Fire', 'Fire', 'Fire', 'Fire']\n      }],\n      flavorText: 'Spits fire that is hot enough to melt boulders.',\n      artist: 'Mitsuhiro Arita'\n    }, {\n      id: 'mock-pikachu-1',\n      name: 'Pikachu',\n      images: {\n        small: 'https://images.pokemontcg.io/base1/58.png',\n        large: 'https://images.pokemontcg.io/base1/58_hires.png'\n      },\n      set: {\n        name: 'Base Set'\n      },\n      rarity: 'Common',\n      tcgType: 'pokemon',\n      apiSource: 'mock',\n      hp: 60,\n      types: ['Lightning'],\n      attacks: [{\n        name: 'Thunder Jolt',\n        damage: '30',\n        cost: ['Lightning', 'Colorless']\n      }],\n      flavorText: 'When several of these Pok√©mon gather, their electricity could build and cause lightning storms.',\n      artist: 'Atsuko Nishida'\n    }, {\n      id: 'mock-luffy-1',\n      name: 'Monkey D. Luffy',\n      images: {\n        small: 'https://images.pokemontcg.io/base1/25.png',\n        large: 'https://images.pokemontcg.io/base1/25_hires.png'\n      },\n      set: {\n        name: 'Romance Dawn'\n      },\n      rarity: 'Leader',\n      tcgType: 'onepiece',\n      apiSource: 'mock',\n      cost: '1',\n      power: '5000',\n      color: 'Red',\n      ability: '[Activate: Main] You may rest this Leader: Add up to 1 DON!! card from your DON!! deck and set it as active.'\n    }, {\n      id: 'mock-goku-1',\n      name: 'Son Goku',\n      images: {\n        small: 'https://images.pokemontcg.io/base1/6.png',\n        large: 'https://images.pokemontcg.io/base1/6_hires.png'\n      },\n      set: {\n        name: 'Dragon Ball Super'\n      },\n      rarity: 'Super Rare',\n      tcgType: 'dragonball',\n      apiSource: 'mock',\n      cost: '4',\n      power: '20000',\n      color: 'Orange',\n      ability: '[Auto] When you play this card, draw 1 card.'\n    }, {\n      id: 'mock-black-lotus',\n      name: 'Black Lotus',\n      images: {\n        small: 'https://images.pokemontcg.io/base1/2.png',\n        large: 'https://images.pokemontcg.io/base1/2_hires.png'\n      },\n      set: {\n        name: 'Alpha'\n      },\n      rarity: 'Rare',\n      tcgType: 'magic',\n      apiSource: 'mock',\n      cost: '0',\n      type: 'Artifact',\n      ability: '{T}, Sacrifice Black Lotus: Add three mana of any one color.'\n    }, {\n      id: 'mock-agumon-1',\n      name: 'Agumon',\n      images: {\n        small: 'https://images.pokemontcg.io/base1/32.png',\n        large: 'https://images.pokemontcg.io/base1/32_hires.png'\n      },\n      set: {\n        name: 'BT01 New Evolution'\n      },\n      rarity: 'Common',\n      tcgType: 'digimon',\n      apiSource: 'mock',\n      cost: '3',\n      power: '2000',\n      type: 'Rookie',\n      attribute: 'Vaccine'\n    }, {\n      id: 'mock-naruto-1',\n      name: 'Naruto Uzumaki',\n      images: {\n        small: 'https://images.pokemontcg.io/base1/44.png',\n        large: 'https://images.pokemontcg.io/base1/44_hires.png'\n      },\n      set: {\n        name: 'Union Arena'\n      },\n      rarity: 'Rare',\n      tcgType: 'unionarena',\n      apiSource: 'mock',\n      cost: '2',\n      power: '3000',\n      color: 'Orange',\n      ability: 'Shadow Clone Jutsu: Create multiple copies to confuse enemies.'\n    }, {\n      id: 'mock-gundam-1',\n      name: 'RX-78-2 Gundam',\n      images: {\n        small: 'https://images.pokemontcg.io/base1/7.png',\n        large: 'https://images.pokemontcg.io/base1/7_hires.png'\n      },\n      set: {\n        name: 'Mobile Suit Gundam'\n      },\n      rarity: 'Ultra Rare',\n      tcgType: 'gundam',\n      apiSource: 'mock',\n      cost: '5',\n      power: '8000',\n      type: 'Mobile Suit',\n      ability: 'Beam Rifle: Deal 2000 damage to target enemy unit.'\n    }];\n\n    // Filtrar por t√©rmino de b√∫squeda\n    return mockCards.filter(card => {\n      const matchesName = card.name.toLowerCase().includes(searchTerm.toLowerCase()) || searchTerm.toLowerCase().includes(card.name.toLowerCase().substring(0, 3));\n      const matchesType = tcgType === 'all' || card.tcgType === tcgType;\n      return matchesName && matchesType;\n    });\n  }\n\n  // M√©todo para buscar en una API espec√≠fica usando nuestro proxy\n  async searchSpecificAPI(tcgType, searchTerm, page = 1, pageSize = 24) {\n    if (!searchTerm.trim()) {\n      return {\n        cards: [],\n        totalResults: 0,\n        errors: []\n      };\n    }\n    console.log(`üîç Buscando \"${searchTerm}\" en ${tcgType} via proxy`);\n    try {\n      // Construir URL de nuestro proxy\n      const proxyUrl = `/api/search?tcgType=${encodeURIComponent(tcgType)}&searchTerm=${encodeURIComponent(searchTerm)}&page=${page}&limit=${pageSize}`;\n      console.log(`üì° Llamando a proxy: ${proxyUrl}`);\n      const response = await fetch(proxyUrl);\n      if (!response.ok) {\n        throw new Error(`Proxy error: ${response.status}`);\n      }\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.error || 'API proxy failed');\n      }\n\n      // Normalizar las cartas recibidas\n      const normalizedCards = this.normalizeCards(data.cards);\n      const uniqueCards = this.removeDuplicates(normalizedCards);\n      const sortedCards = this.sortByRelevance(uniqueCards, searchTerm);\n\n      // Paginaci√≥n local (las APIs pueden devolver m√°s de lo que necesitamos)\n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n      const result = {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: false\n      };\n      console.log(`‚úÖ B√∫squeda en ${tcgType} completada: ${sortedCards.length} cartas encontradas`);\n      return result;\n    } catch (error) {\n      console.error(`Error en b√∫squeda de ${tcgType}:`, error);\n\n      // Fallback: usar datos de demostraci√≥n\n      console.log('üìù Error en proxy - usando datos de demostraci√≥n como fallback');\n      const mockCards = this.getMockCards(searchTerm, tcgType);\n      const normalizedMockCards = this.normalizeCards(mockCards);\n      const sortedCards = this.sortByRelevance(normalizedMockCards, searchTerm);\n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n      return {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [{\n          api: 'Proxy',\n          error: 'Proxy no disponible - mostrando datos de demostraci√≥n'\n        }],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: true\n      };\n    }\n  }\n\n  // M√©todo principal para buscar en todas las APIs\n  async searchAllAPIs(searchTerm, page = 1, pageSize = 24, tcgFilter = 'all') {\n    if (!searchTerm.trim()) {\n      return {\n        cards: [],\n        totalResults: 0,\n        errors: []\n      };\n    }\n    const cacheKey = `${searchTerm}-${page}-${pageSize}-${tcgFilter}`;\n\n    // Verificar cache\n    if (this.cache.has(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      if (Date.now() - cached.timestamp < this.cacheTimeout) {\n        console.log('üöÄ Resultado obtenido desde cache');\n        return cached.data;\n      }\n      this.cache.delete(cacheKey);\n    }\n    console.log(`üîç Buscando \"${searchTerm}\" en APIs externas (filtro: ${tcgFilter})`);\n\n    // Usar datos de demostraci√≥n (activado por defecto para evitar CORS)\n    if (this.useMockData) {\n      console.log('üìù Usando datos de demostraci√≥n');\n      const mockCards = this.getMockCards(searchTerm, tcgFilter);\n      const normalizedMockCards = this.normalizeCards(mockCards);\n      const sortedCards = this.sortByRelevance(normalizedMockCards, searchTerm);\n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n      return {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [{\n          api: 'Demo',\n          error: 'Modo demostraci√≥n activado - configura las API keys y cambia useMockData a false'\n        }],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: true\n      };\n    }\n    let allCards = [];\n    let errors = [];\n    let successfulAPIs = 0;\n    try {\n      var _allCards$;\n      // Buscar en TCGS APIs - ahora incluye Pokemon tambi√©n\n      const tcgGames = ['pokemon', 'onepiece', 'dragonball', 'digimon', 'magic', 'unionarena', 'gundam'];\n      for (const game of tcgGames) {\n        if ((tcgFilter === 'all' || tcgFilter === game) && this.tcgApiKey) {\n          try {\n            const tcgResult = await this.searchTCGSAPI(game, searchTerm, 1, 30);\n            if (tcgResult.cards && tcgResult.cards.length > 0) {\n              allCards = allCards.concat(tcgResult.cards);\n              successfulAPIs++;\n              console.log(`‚úÖ ${game} API: ${tcgResult.cards.length} cartas encontradas`);\n            }\n          } catch (error) {\n            console.warn(`‚ö†Ô∏è ${game} API fall√≥:`, error.message);\n            errors.push({\n              api: game,\n              error: 'Error de CORS o conectividad'\n            });\n          }\n        }\n      }\n\n      // Si todas las APIs fallaron, usar datos de demostraci√≥n\n      if (allCards.length === 0 && successfulAPIs === 0) {\n        console.log('üìù Todas las APIs fallaron - usando datos de demostraci√≥n');\n        const mockCards = this.getMockCards(searchTerm, tcgFilter);\n        allCards = mockCards;\n        errors.push({\n          api: 'Fallback',\n          error: 'APIs no disponibles - mostrando datos de demostraci√≥n'\n        });\n      }\n\n      // Normalizar y eliminar duplicados\n      const normalizedCards = this.normalizeCards(allCards);\n      const uniqueCards = this.removeDuplicates(normalizedCards);\n\n      // Ordenar por relevancia\n      const sortedCards = this.sortByRelevance(uniqueCards, searchTerm);\n\n      // Paginaci√≥n\n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n      const result = {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: errors,\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: allCards.length > 0 && ((_allCards$ = allCards[0]) === null || _allCards$ === void 0 ? void 0 : _allCards$.apiSource) === 'mock'\n      };\n\n      // Guardar en cache solo si obtuvimos resultados reales\n      if (!result.usingMockData) {\n        this.cache.set(cacheKey, {\n          data: result,\n          timestamp: Date.now()\n        });\n      }\n      console.log(`‚úÖ B√∫squeda completada: ${sortedCards.length} cartas encontradas (${successfulAPIs} APIs exitosas)`);\n      return result;\n    } catch (error) {\n      console.error('Error general en b√∫squeda de APIs:', error);\n\n      // Fallback final: usar datos de demostraci√≥n\n      console.log('üìù Error general - usando datos de demostraci√≥n como fallback');\n      const mockCards = this.getMockCards(searchTerm, tcgFilter);\n      const normalizedMockCards = this.normalizeCards(mockCards);\n      const sortedCards = this.sortByRelevance(normalizedMockCards, searchTerm);\n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n      return {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [{\n          api: 'Error',\n          error: 'Error de conectividad - mostrando datos de demostraci√≥n'\n        }],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: true\n      };\n    }\n  }\n\n  // Buscar en TCGS API\n  async searchTCGSAPI(tcgType, searchTerm, page = 1, limit = 30) {\n    if (!this.tcgApiKey) {\n      console.warn('‚ö†Ô∏è TCGS API key no configurada');\n      return {\n        cards: []\n      };\n    }\n    const apiEndpoints = {\n      onepiece: '/one-piece/cards',\n      dragonball: '/dragon-ball-fusion/cards',\n      digimon: '/digimon/cards',\n      magic: '/magic/cards',\n      unionarena: '/union-arena/cards',\n      gundam: '/gundam/cards'\n    };\n    const endpoint = apiEndpoints[tcgType];\n    if (!endpoint) {\n      console.warn(`‚ö†Ô∏è TCG tipo desconocido: ${tcgType}`);\n      return {\n        cards: []\n      };\n    }\n    try {\n      const response = await fetch(`https://apitcg.com/api${endpoint}?name=${encodeURIComponent(searchTerm)}&limit=${limit}&page=${page}`, {\n        headers: {\n          'x-api-key': this.tcgApiKey\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`TCGS API error: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Agregar tcgType a cada carta\n      const cards = (data.data || data.cards || []).map(card => ({\n        ...card,\n        tcgType: tcgType,\n        apiSource: 'tcgapis'\n      }));\n      return {\n        cards\n      };\n    } catch (error) {\n      console.error(`Error en ${tcgType} API:`, error);\n      throw error;\n    }\n  }\n\n  // Obtener detalles de una carta espec√≠fica\n  async getCardDetails(cardId, tcgType) {\n    return this.getTCGSCardDetails(cardId, tcgType);\n  }\n  async getTCGSCardDetails(cardId, tcgType) {\n    const apiEndpoints = {\n      pokemon: '/pokemon/cards',\n      onepiece: '/one-piece/cards',\n      dragonball: '/dragon-ball-fusion/cards',\n      digimon: '/digimon/cards',\n      magic: '/magic/cards',\n      unionarena: '/union-arena/cards',\n      gundam: '/gundam/cards'\n    };\n    const endpoint = apiEndpoints[tcgType];\n    if (!endpoint) {\n      return null;\n    }\n    try {\n      const response = await fetch(`https://apitcg.com/api${endpoint}/${cardId}`, {\n        headers: {\n          'x-api-key': this.tcgApiKey\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`TCGS API error: ${response.status}`);\n      }\n      const data = await response.json();\n      return this.normalizeTCGSCard(data.data || data, tcgType);\n    } catch (error) {\n      console.error(`Error obteniendo detalles de carta ${tcgType}:`, error);\n      return null;\n    }\n  }\n\n  // Normalizar cartas usando solo formato TCGS API\n  normalizeCards(cards) {\n    return cards.map(card => {\n      return this.normalizeTCGSCard(card, card.tcgType);\n    });\n  }\n  normalizeTCGSCard(card, tcgType) {\n    // Mapear nombres de TCG\n    const tcgNames = {\n      pokemon: 'Pok√©mon TCG',\n      onepiece: 'One Piece',\n      dragonball: 'Dragon Ball',\n      digimon: 'Digimon',\n      magic: 'Magic: The Gathering',\n      unionarena: 'Union Arena',\n      gundam: 'Gundam'\n    };\n\n    // Funci√≥n helper para convertir valores a string seguro\n    const safeString = value => {\n      if (value === null || value === undefined) return '';\n      if (typeof value === 'object') {\n        // Para objetos set, extraer name y series\n        if (value.name) {\n          const name = value.name || '';\n          const series = value.series || '';\n          if (name && series) return `${name}, ${series}`;else if (name) return name;else return 'Desconocido';\n        }\n        // Para otros objetos, convertir a JSON como fallback\n        return JSON.stringify(value);\n      }\n      return String(value);\n    };\n\n    // Funci√≥n helper para obtener imagen\n    const getImageUrl = card => {\n      var _card$images;\n      if (card.image) return safeString(card.image);\n      if ((_card$images = card.images) !== null && _card$images !== void 0 && _card$images.small) return safeString(card.images.small);\n      if (card.card_image) return safeString(card.card_image);\n      return '';\n    };\n\n    // Funci√≥n para procesar arrays de forma segura\n    const safeArray = value => {\n      if (!Array.isArray(value)) return [];\n      return value.map(item => {\n        if (typeof item === 'object') {\n          // Para objetos como attacks/abilities, mantener estructura pero convertir valores\n          const safeItem = {};\n          for (const [key, val] of Object.entries(item)) {\n            safeItem[key] = safeString(val);\n          }\n          return safeItem;\n        }\n        return safeString(item);\n      });\n    };\n    return {\n      id: safeString(card.id || card._id || `${tcgType}-${Date.now()}`),\n      name: safeString(card.name || card.card_name || 'Sin nombre'),\n      images: {\n        small: getImageUrl(card),\n        large: getImageUrl(card)\n      },\n      set: {\n        name: safeString(card.set || card.set_name || card.expansion || 'Desconocido')\n      },\n      rarity: safeString(card.rarity || 'Com√∫n'),\n      tcgType: tcgType,\n      tcgName: tcgNames[tcgType] || tcgType,\n      apiSource: safeString(card.apiSource || 'tcgapis'),\n      // Campos espec√≠ficos por TCG - todos convertidos a string\n      cost: safeString(card.cost || card.play_cost || ''),\n      power: safeString(card.power || card.battle_power || ''),\n      color: safeString(card.color || card.colours || ''),\n      type: safeString(card.type || card.card_type || ''),\n      attribute: safeString(card.attribute || ''),\n      ability: safeString(card.ability || card.card_text || ''),\n      effect: safeString(card.effect || card.effect_text || ''),\n      flavorText: safeString(card.flavor_text || card.flavour_text || ''),\n      // Campos espec√≠ficos de Pokemon (si est√°n disponibles)\n      hp: safeString(card.hp || ''),\n      types: safeArray(card.types || []),\n      attacks: safeArray(card.attacks || []),\n      abilities: safeArray(card.abilities || []),\n      artist: safeString(card.artist || ''),\n      // Precios y legalidades (mantener objetos para el modal)\n      tcgplayer: card.tcgplayer || null,\n      legalities: card.legalities || null\n    };\n  }\n\n  // Eliminar cartas duplicadas bas√°ndose en el ID\n  removeDuplicates(cards) {\n    const seen = new Set();\n    return cards.filter(card => {\n      const key = `${card.id}-${card.tcgType}`;\n      if (seen.has(key)) {\n        return false;\n      }\n      seen.add(key);\n      return true;\n    });\n  }\n\n  // Ordenar por relevancia (nombre m√°s similar primero)\n  sortByRelevance(cards, searchTerm) {\n    const term = searchTerm.toLowerCase().trim();\n    return cards.sort((a, b) => {\n      const aName = a.name.toLowerCase();\n      const bName = b.name.toLowerCase();\n\n      // Coincidencia exacta\n      if (aName === term && bName !== term) return -1;\n      if (bName === term && aName !== term) return 1;\n\n      // Comienza con el t√©rmino\n      const aStarts = aName.startsWith(term);\n      const bStarts = bName.startsWith(term);\n      if (aStarts && !bStarts) return -1;\n      if (bStarts && !aStarts) return 1;\n\n      // Contiene el t√©rmino\n      const aContains = aName.includes(term);\n      const bContains = bName.includes(term);\n      if (aContains && !bContains) return -1;\n      if (bContains && !aContains) return 1;\n\n      // Por longitud del nombre (m√°s corto primero)\n      return aName.length - bName.length;\n    });\n  }\n\n  // Limpiar cache manualmente\n  clearCache() {\n    this.cache.clear();\n    console.log('üßπ Cache de API limpiado');\n  }\n\n  // Obtener estad√≠sticas del cache\n  getCacheStats() {\n    return {\n      size: this.cache.size,\n      entries: Array.from(this.cache.keys())\n    };\n  }\n\n  // M√©todo para activar/desactivar datos de demostraci√≥n\n  setUseMockData(useMock) {\n    this.useMockData = useMock;\n    console.log(`üìù Modo demostraci√≥n: ${useMock ? 'ACTIVADO' : 'DESACTIVADO'}`);\n  }\n}\n\n// Exportar como singleton\nconst apiSearchService = new APISearchService();\nexport default apiSearchService;","map":{"version":3,"names":["APISearchService","constructor","cache","Map","cacheTimeout","tcgApiKey","process","env","REACT_APP_TCG_API_KEY","useMockData","getMockCards","searchTerm","tcgType","mockCards","id","name","images","small","large","set","rarity","apiSource","hp","types","attacks","damage","cost","flavorText","artist","power","color","ability","type","attribute","filter","card","matchesName","toLowerCase","includes","substring","matchesType","searchSpecificAPI","page","pageSize","trim","cards","totalResults","errors","console","log","proxyUrl","encodeURIComponent","response","fetch","ok","Error","status","data","json","success","error","normalizedCards","normalizeCards","uniqueCards","removeDuplicates","sortedCards","sortByRelevance","startIndex","paginatedCards","slice","result","length","totalPages","Math","ceil","usingMockData","normalizedMockCards","api","searchAllAPIs","tcgFilter","cacheKey","has","cached","get","Date","now","timestamp","delete","allCards","successfulAPIs","_allCards$","tcgGames","game","tcgResult","searchTCGSAPI","concat","warn","message","push","limit","apiEndpoints","onepiece","dragonball","digimon","magic","unionarena","gundam","endpoint","headers","map","getCardDetails","cardId","getTCGSCardDetails","pokemon","normalizeTCGSCard","tcgNames","safeString","value","undefined","series","JSON","stringify","String","getImageUrl","_card$images","image","card_image","safeArray","Array","isArray","item","safeItem","key","val","Object","entries","_id","card_name","set_name","expansion","tcgName","play_cost","battle_power","colours","card_type","card_text","effect","effect_text","flavor_text","flavour_text","abilities","tcgplayer","legalities","seen","Set","add","term","sort","a","b","aName","bName","aStarts","startsWith","bStarts","aContains","bContains","clearCache","clear","getCacheStats","size","from","keys","setUseMockData","useMock","apiSearchService"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/services/apiSearchService.js"],"sourcesContent":["// src/services/apiSearchService.js\nclass APISearchService {\n  constructor() {\n    this.cache = new Map();\n    this.cacheTimeout = 5 * 60 * 1000; // 5 minutos\n    this.tcgApiKey = process.env.REACT_APP_TCG_API_KEY;\n    this.useMockData = false; // Desactivado - usando proxy para evitar CORS\n  }\n\n  // Mock data para cuando las APIs fallen\n  getMockCards(searchTerm, tcgType = 'all') {\n    const mockCards = [\n      {\n        id: 'mock-charizard-1',\n        name: 'Charizard',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/4.png',\n          large: 'https://images.pokemontcg.io/base1/4_hires.png'\n        },\n        set: { name: 'Base Set' },\n        rarity: 'Rare Holo',\n        tcgType: 'pokemon',\n        apiSource: 'mock',\n        hp: 120,\n        types: ['Fire'],\n        attacks: [\n          { name: 'Fire Spin', damage: '100', cost: ['Fire', 'Fire', 'Fire', 'Fire'] }\n        ],\n        flavorText: 'Spits fire that is hot enough to melt boulders.',\n        artist: 'Mitsuhiro Arita'\n      },\n      {\n        id: 'mock-pikachu-1',\n        name: 'Pikachu',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/58.png',\n          large: 'https://images.pokemontcg.io/base1/58_hires.png'\n        },\n        set: { name: 'Base Set' },\n        rarity: 'Common',\n        tcgType: 'pokemon',\n        apiSource: 'mock',\n        hp: 60,\n        types: ['Lightning'],\n        attacks: [\n          { name: 'Thunder Jolt', damage: '30', cost: ['Lightning', 'Colorless'] }\n        ],\n        flavorText: 'When several of these Pok√©mon gather, their electricity could build and cause lightning storms.',\n        artist: 'Atsuko Nishida'\n      },\n      {\n        id: 'mock-luffy-1',\n        name: 'Monkey D. Luffy',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/25.png',\n          large: 'https://images.pokemontcg.io/base1/25_hires.png'\n        },\n        set: { name: 'Romance Dawn' },\n        rarity: 'Leader',\n        tcgType: 'onepiece',\n        apiSource: 'mock',\n        cost: '1',\n        power: '5000',\n        color: 'Red',\n        ability: '[Activate: Main] You may rest this Leader: Add up to 1 DON!! card from your DON!! deck and set it as active.'\n      },\n      {\n        id: 'mock-goku-1',\n        name: 'Son Goku',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/6.png',\n          large: 'https://images.pokemontcg.io/base1/6_hires.png'\n        },\n        set: { name: 'Dragon Ball Super' },\n        rarity: 'Super Rare',\n        tcgType: 'dragonball',\n        apiSource: 'mock',\n        cost: '4',\n        power: '20000',\n        color: 'Orange',\n        ability: '[Auto] When you play this card, draw 1 card.'\n      },\n      {\n        id: 'mock-black-lotus',\n        name: 'Black Lotus',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/2.png',\n          large: 'https://images.pokemontcg.io/base1/2_hires.png'\n        },\n        set: { name: 'Alpha' },\n        rarity: 'Rare',\n        tcgType: 'magic',\n        apiSource: 'mock',\n        cost: '0',\n        type: 'Artifact',\n        ability: '{T}, Sacrifice Black Lotus: Add three mana of any one color.'\n      },\n      {\n        id: 'mock-agumon-1',\n        name: 'Agumon',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/32.png',\n          large: 'https://images.pokemontcg.io/base1/32_hires.png'\n        },\n        set: { name: 'BT01 New Evolution' },\n        rarity: 'Common',\n        tcgType: 'digimon',\n        apiSource: 'mock',\n        cost: '3',\n        power: '2000',\n        type: 'Rookie',\n        attribute: 'Vaccine'\n      },\n      {\n        id: 'mock-naruto-1',\n        name: 'Naruto Uzumaki',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/44.png',\n          large: 'https://images.pokemontcg.io/base1/44_hires.png'\n        },\n        set: { name: 'Union Arena' },\n        rarity: 'Rare',\n        tcgType: 'unionarena',\n        apiSource: 'mock',\n        cost: '2',\n        power: '3000',\n        color: 'Orange',\n        ability: 'Shadow Clone Jutsu: Create multiple copies to confuse enemies.'\n      },\n      {\n        id: 'mock-gundam-1',\n        name: 'RX-78-2 Gundam',\n        images: {\n          small: 'https://images.pokemontcg.io/base1/7.png',\n          large: 'https://images.pokemontcg.io/base1/7_hires.png'\n        },\n        set: { name: 'Mobile Suit Gundam' },\n        rarity: 'Ultra Rare',\n        tcgType: 'gundam',\n        apiSource: 'mock',\n        cost: '5',\n        power: '8000',\n        type: 'Mobile Suit',\n        ability: 'Beam Rifle: Deal 2000 damage to target enemy unit.'\n      }\n    ];\n\n    // Filtrar por t√©rmino de b√∫squeda\n    return mockCards.filter(card => {\n      const matchesName = card.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         searchTerm.toLowerCase().includes(card.name.toLowerCase().substring(0, 3));\n      const matchesType = tcgType === 'all' || card.tcgType === tcgType;\n      return matchesName && matchesType;\n    });\n  }\n\n  // M√©todo para buscar en una API espec√≠fica usando nuestro proxy\n  async searchSpecificAPI(tcgType, searchTerm, page = 1, pageSize = 24) {\n    if (!searchTerm.trim()) {\n      return { cards: [], totalResults: 0, errors: [] };\n    }\n\n    console.log(`üîç Buscando \"${searchTerm}\" en ${tcgType} via proxy`);\n\n    try {\n      // Construir URL de nuestro proxy\n      const proxyUrl = `/api/search?tcgType=${encodeURIComponent(tcgType)}&searchTerm=${encodeURIComponent(searchTerm)}&page=${page}&limit=${pageSize}`;\n      \n      console.log(`üì° Llamando a proxy: ${proxyUrl}`);\n\n      const response = await fetch(proxyUrl);\n      \n      if (!response.ok) {\n        throw new Error(`Proxy error: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'API proxy failed');\n      }\n\n      // Normalizar las cartas recibidas\n      const normalizedCards = this.normalizeCards(data.cards);\n      const uniqueCards = this.removeDuplicates(normalizedCards);\n      const sortedCards = this.sortByRelevance(uniqueCards, searchTerm);\n\n      // Paginaci√≥n local (las APIs pueden devolver m√°s de lo que necesitamos)\n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n\n      const result = {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: false\n      };\n\n      console.log(`‚úÖ B√∫squeda en ${tcgType} completada: ${sortedCards.length} cartas encontradas`);\n      return result;\n\n    } catch (error) {\n      console.error(`Error en b√∫squeda de ${tcgType}:`, error);\n      \n      // Fallback: usar datos de demostraci√≥n\n      console.log('üìù Error en proxy - usando datos de demostraci√≥n como fallback');\n      const mockCards = this.getMockCards(searchTerm, tcgType);\n      const normalizedMockCards = this.normalizeCards(mockCards);\n      const sortedCards = this.sortByRelevance(normalizedMockCards, searchTerm);\n      \n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n\n      return {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [{ api: 'Proxy', error: 'Proxy no disponible - mostrando datos de demostraci√≥n' }],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: true\n      };\n    }\n  }\n\n  // M√©todo principal para buscar en todas las APIs\n  async searchAllAPIs(searchTerm, page = 1, pageSize = 24, tcgFilter = 'all') {\n    if (!searchTerm.trim()) {\n      return { cards: [], totalResults: 0, errors: [] };\n    }\n\n    const cacheKey = `${searchTerm}-${page}-${pageSize}-${tcgFilter}`;\n    \n    // Verificar cache\n    if (this.cache.has(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      if (Date.now() - cached.timestamp < this.cacheTimeout) {\n        console.log('üöÄ Resultado obtenido desde cache');\n        return cached.data;\n      }\n      this.cache.delete(cacheKey);\n    }\n\n    console.log(`üîç Buscando \"${searchTerm}\" en APIs externas (filtro: ${tcgFilter})`);\n\n    // Usar datos de demostraci√≥n (activado por defecto para evitar CORS)\n    if (this.useMockData) {\n      console.log('üìù Usando datos de demostraci√≥n');\n      const mockCards = this.getMockCards(searchTerm, tcgFilter);\n      const normalizedMockCards = this.normalizeCards(mockCards);\n      const sortedCards = this.sortByRelevance(normalizedMockCards, searchTerm);\n      \n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n\n      return {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [{ api: 'Demo', error: 'Modo demostraci√≥n activado - configura las API keys y cambia useMockData a false' }],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: true\n      };\n    }\n\n    let allCards = [];\n    let errors = [];\n    let successfulAPIs = 0;\n\n    try {\n      // Buscar en TCGS APIs - ahora incluye Pokemon tambi√©n\n      const tcgGames = ['pokemon', 'onepiece', 'dragonball', 'digimon', 'magic', 'unionarena', 'gundam'];\n      for (const game of tcgGames) {\n        if ((tcgFilter === 'all' || tcgFilter === game) && this.tcgApiKey) {\n          try {\n            const tcgResult = await this.searchTCGSAPI(game, searchTerm, 1, 30);\n            if (tcgResult.cards && tcgResult.cards.length > 0) {\n              allCards = allCards.concat(tcgResult.cards);\n              successfulAPIs++;\n              console.log(`‚úÖ ${game} API: ${tcgResult.cards.length} cartas encontradas`);\n            }\n          } catch (error) {\n            console.warn(`‚ö†Ô∏è ${game} API fall√≥:`, error.message);\n            errors.push({ api: game, error: 'Error de CORS o conectividad' });\n          }\n        }\n      }\n\n      // Si todas las APIs fallaron, usar datos de demostraci√≥n\n      if (allCards.length === 0 && successfulAPIs === 0) {\n        console.log('üìù Todas las APIs fallaron - usando datos de demostraci√≥n');\n        const mockCards = this.getMockCards(searchTerm, tcgFilter);\n        allCards = mockCards;\n        errors.push({ api: 'Fallback', error: 'APIs no disponibles - mostrando datos de demostraci√≥n' });\n      }\n\n      // Normalizar y eliminar duplicados\n      const normalizedCards = this.normalizeCards(allCards);\n      const uniqueCards = this.removeDuplicates(normalizedCards);\n\n      // Ordenar por relevancia\n      const sortedCards = this.sortByRelevance(uniqueCards, searchTerm);\n\n      // Paginaci√≥n\n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n\n      const result = {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: errors,\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: allCards.length > 0 && allCards[0]?.apiSource === 'mock'\n      };\n\n      // Guardar en cache solo si obtuvimos resultados reales\n      if (!result.usingMockData) {\n        this.cache.set(cacheKey, {\n          data: result,\n          timestamp: Date.now()\n        });\n      }\n\n      console.log(`‚úÖ B√∫squeda completada: ${sortedCards.length} cartas encontradas (${successfulAPIs} APIs exitosas)`);\n      return result;\n\n    } catch (error) {\n      console.error('Error general en b√∫squeda de APIs:', error);\n      \n      // Fallback final: usar datos de demostraci√≥n\n      console.log('üìù Error general - usando datos de demostraci√≥n como fallback');\n      const mockCards = this.getMockCards(searchTerm, tcgFilter);\n      const normalizedMockCards = this.normalizeCards(mockCards);\n      const sortedCards = this.sortByRelevance(normalizedMockCards, searchTerm);\n      \n      const startIndex = (page - 1) * pageSize;\n      const paginatedCards = sortedCards.slice(startIndex, startIndex + pageSize);\n\n      return {\n        cards: paginatedCards,\n        totalResults: sortedCards.length,\n        errors: [{ api: 'Error', error: 'Error de conectividad - mostrando datos de demostraci√≥n' }],\n        page: page,\n        totalPages: Math.ceil(sortedCards.length / pageSize),\n        usingMockData: true\n      };\n    }\n  }\n\n\n  // Buscar en TCGS API\n  async searchTCGSAPI(tcgType, searchTerm, page = 1, limit = 30) {\n    if (!this.tcgApiKey) {\n      console.warn('‚ö†Ô∏è TCGS API key no configurada');\n      return { cards: [] };\n    }\n\n    const apiEndpoints = {\n      onepiece: '/one-piece/cards',\n      dragonball: '/dragon-ball-fusion/cards', \n      digimon: '/digimon/cards',\n      magic: '/magic/cards',\n      unionarena: '/union-arena/cards',\n      gundam: '/gundam/cards'\n    };\n\n    const endpoint = apiEndpoints[tcgType];\n    if (!endpoint) {\n      console.warn(`‚ö†Ô∏è TCG tipo desconocido: ${tcgType}`);\n      return { cards: [] };\n    }\n\n    try {\n      const response = await fetch(\n        `https://apitcg.com/api${endpoint}?name=${encodeURIComponent(searchTerm)}&limit=${limit}&page=${page}`,\n        {\n          headers: {\n            'x-api-key': this.tcgApiKey\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`TCGS API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Agregar tcgType a cada carta\n      const cards = (data.data || data.cards || []).map(card => ({\n        ...card,\n        tcgType: tcgType,\n        apiSource: 'tcgapis'\n      }));\n\n      return { cards };\n\n    } catch (error) {\n      console.error(`Error en ${tcgType} API:`, error);\n      throw error;\n    }\n  }\n\n  // Obtener detalles de una carta espec√≠fica\n  async getCardDetails(cardId, tcgType) {\n    return this.getTCGSCardDetails(cardId, tcgType);\n  }\n\n  async getTCGSCardDetails(cardId, tcgType) {\n    const apiEndpoints = {\n      pokemon: '/pokemon/cards',\n      onepiece: '/one-piece/cards',\n      dragonball: '/dragon-ball-fusion/cards',\n      digimon: '/digimon/cards', \n      magic: '/magic/cards',\n      unionarena: '/union-arena/cards',\n      gundam: '/gundam/cards'\n    };\n\n    const endpoint = apiEndpoints[tcgType];\n    if (!endpoint) {\n      return null;\n    }\n\n    try {\n      const response = await fetch(\n        `https://apitcg.com/api${endpoint}/${cardId}`,\n        {\n          headers: {\n            'x-api-key': this.tcgApiKey\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`TCGS API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return this.normalizeTCGSCard(data.data || data, tcgType);\n\n    } catch (error) {\n      console.error(`Error obteniendo detalles de carta ${tcgType}:`, error);\n      return null;\n    }\n  }\n\n  // Normalizar cartas usando solo formato TCGS API\n  normalizeCards(cards) {\n    return cards.map(card => {\n      return this.normalizeTCGSCard(card, card.tcgType);\n    });\n  }\n\n\n  normalizeTCGSCard(card, tcgType) {\n    // Mapear nombres de TCG\n    const tcgNames = {\n      pokemon: 'Pok√©mon TCG',\n      onepiece: 'One Piece',\n      dragonball: 'Dragon Ball',\n      digimon: 'Digimon',\n      magic: 'Magic: The Gathering',\n      unionarena: 'Union Arena',\n      gundam: 'Gundam'\n    };\n\n    // Funci√≥n helper para convertir valores a string seguro\n    const safeString = (value) => {\n      if (value === null || value === undefined) return '';\n      if (typeof value === 'object') {\n        // Para objetos set, extraer name y series\n        if (value.name) {\n          const name = value.name || '';\n          const series = value.series || '';\n          if (name && series) return `${name}, ${series}`;\n          else if (name) return name;\n          else return 'Desconocido';\n        }\n        // Para otros objetos, convertir a JSON como fallback\n        return JSON.stringify(value);\n      }\n      return String(value);\n    };\n\n    // Funci√≥n helper para obtener imagen\n    const getImageUrl = (card) => {\n      if (card.image) return safeString(card.image);\n      if (card.images?.small) return safeString(card.images.small);\n      if (card.card_image) return safeString(card.card_image);\n      return '';\n    };\n\n    // Funci√≥n para procesar arrays de forma segura\n    const safeArray = (value) => {\n      if (!Array.isArray(value)) return [];\n      return value.map(item => {\n        if (typeof item === 'object') {\n          // Para objetos como attacks/abilities, mantener estructura pero convertir valores\n          const safeItem = {};\n          for (const [key, val] of Object.entries(item)) {\n            safeItem[key] = safeString(val);\n          }\n          return safeItem;\n        }\n        return safeString(item);\n      });\n    };\n\n    return {\n      id: safeString(card.id || card._id || `${tcgType}-${Date.now()}`),\n      name: safeString(card.name || card.card_name || 'Sin nombre'),\n      images: {\n        small: getImageUrl(card),\n        large: getImageUrl(card)\n      },\n      set: {\n        name: safeString(card.set || card.set_name || card.expansion || 'Desconocido')\n      },\n      rarity: safeString(card.rarity || 'Com√∫n'),\n      tcgType: tcgType,\n      tcgName: tcgNames[tcgType] || tcgType,\n      apiSource: safeString(card.apiSource || 'tcgapis'),\n      \n      // Campos espec√≠ficos por TCG - todos convertidos a string\n      cost: safeString(card.cost || card.play_cost || ''),\n      power: safeString(card.power || card.battle_power || ''),\n      color: safeString(card.color || card.colours || ''),\n      type: safeString(card.type || card.card_type || ''),\n      attribute: safeString(card.attribute || ''),\n      ability: safeString(card.ability || card.card_text || ''),\n      effect: safeString(card.effect || card.effect_text || ''),\n      flavorText: safeString(card.flavor_text || card.flavour_text || ''),\n      \n      // Campos espec√≠ficos de Pokemon (si est√°n disponibles)\n      hp: safeString(card.hp || ''),\n      types: safeArray(card.types || []),\n      attacks: safeArray(card.attacks || []),\n      abilities: safeArray(card.abilities || []),\n      artist: safeString(card.artist || ''),\n      \n      // Precios y legalidades (mantener objetos para el modal)\n      tcgplayer: card.tcgplayer || null,\n      legalities: card.legalities || null\n    };\n  }\n\n  // Eliminar cartas duplicadas bas√°ndose en el ID\n  removeDuplicates(cards) {\n    const seen = new Set();\n    return cards.filter(card => {\n      const key = `${card.id}-${card.tcgType}`;\n      if (seen.has(key)) {\n        return false;\n      }\n      seen.add(key);\n      return true;\n    });\n  }\n\n  // Ordenar por relevancia (nombre m√°s similar primero)\n  sortByRelevance(cards, searchTerm) {\n    const term = searchTerm.toLowerCase().trim();\n    \n    return cards.sort((a, b) => {\n      const aName = a.name.toLowerCase();\n      const bName = b.name.toLowerCase();\n      \n      // Coincidencia exacta\n      if (aName === term && bName !== term) return -1;\n      if (bName === term && aName !== term) return 1;\n      \n      // Comienza con el t√©rmino\n      const aStarts = aName.startsWith(term);\n      const bStarts = bName.startsWith(term);\n      if (aStarts && !bStarts) return -1;\n      if (bStarts && !aStarts) return 1;\n      \n      // Contiene el t√©rmino\n      const aContains = aName.includes(term);\n      const bContains = bName.includes(term);\n      if (aContains && !bContains) return -1;\n      if (bContains && !aContains) return 1;\n      \n      // Por longitud del nombre (m√°s corto primero)\n      return aName.length - bName.length;\n    });\n  }\n\n  // Limpiar cache manualmente\n  clearCache() {\n    this.cache.clear();\n    console.log('üßπ Cache de API limpiado');\n  }\n\n  // Obtener estad√≠sticas del cache\n  getCacheStats() {\n    return {\n      size: this.cache.size,\n      entries: Array.from(this.cache.keys())\n    };\n  }\n\n  // M√©todo para activar/desactivar datos de demostraci√≥n\n  setUseMockData(useMock) {\n    this.useMockData = useMock;\n    console.log(`üìù Modo demostraci√≥n: ${useMock ? 'ACTIVADO' : 'DESACTIVADO'}`);\n  }\n}\n\n// Exportar como singleton\nconst apiSearchService = new APISearchService();\nexport default apiSearchService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}