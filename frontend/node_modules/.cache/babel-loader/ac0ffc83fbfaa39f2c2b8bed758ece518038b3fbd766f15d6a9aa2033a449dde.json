{"ast":null,"code":"// src/scripts/cleanDatabase.js\n// Script para limpiar completamente la base de datos Firebase\n// ‚ö†Ô∏è DEPRECADO: Este archivo ya no se usa despu√©s de la migraci√≥n a Node.js + MongoDB\n// TODO: Eliminar este archivo o crear equivalente para MongoDB\n\n// Comentado Firebase - ya no se usa\n// import { db } from '../firebase';\n// import { collection, getDocs, deleteDoc, doc, writeBatch } from 'firebase/firestore';\n\nexport async function cleanDatabase() {\n  console.log('üßπ DEPRECADO: Esta funci√≥n ya no funciona despu√©s de la migraci√≥n a MongoDB');\n  console.log('‚ÑπÔ∏è Para limpiar la base de datos, reinicia el servidor backend');\n  console.log('üìã El backend usa MongoDB en memoria que se resetea autom√°ticamente');\n\n  // TODO: Implementar limpieza para MongoDB backend si es necesario\n  return false;\n}\nexport async function createInitialStructures() {\n  console.log('üèóÔ∏è Creando estructuras iniciales...');\n  try {\n    // No necesitamos crear documentos, solo las collections se crear√°n autom√°ticamente\n    // cuando agregemos el primer documento a cada una\n\n    console.log('‚úÖ Estructuras iniciales listas');\n    console.log('üìù Las collections se crear√°n autom√°ticamente al agregar datos');\n    return true;\n  } catch (error) {\n    console.error('‚ùå Error creando estructuras:', error);\n    throw error;\n  }\n}\n\n// Funci√≥n para crear datos de prueba\nexport async function createTestData() {\n  console.log('üß™ Creando datos de prueba...');\n\n  // Esta funci√≥n la implementaremos despu√©s de la limpieza\n  return true;\n}\n\n// Funci√≥n principal que ejecuta todo el proceso\nexport async function resetDatabaseForP2P() {\n  try {\n    console.log('üöÄ Iniciando reset completo de base de datos para P2P...');\n\n    // Paso 1: Limpiar todo\n    await cleanDatabase();\n\n    // Paso 2: Crear estructuras\n    await createInitialStructures();\n\n    // Paso 3: Crear datos de prueba (opcional)\n    // await createTestData();\n\n    console.log('üéâ ¬°Reset completo exitoso!');\n    console.log('üìã La base de datos est√° lista para el sistema P2P');\n    return true;\n  } catch (error) {\n    console.error('‚ùå Error en el reset de base de datos:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["cleanDatabase","console","log","createInitialStructures","error","createTestData","resetDatabaseForP2P"],"sources":["/home/frodev/Downloads/FroDev-CR-TropicalTCGPlayers/src/scripts/cleanDatabase.js"],"sourcesContent":["// src/scripts/cleanDatabase.js\n// Script para limpiar completamente la base de datos Firebase\n// ‚ö†Ô∏è DEPRECADO: Este archivo ya no se usa despu√©s de la migraci√≥n a Node.js + MongoDB\n// TODO: Eliminar este archivo o crear equivalente para MongoDB\n\n// Comentado Firebase - ya no se usa\n// import { db } from '../firebase';\n// import { collection, getDocs, deleteDoc, doc, writeBatch } from 'firebase/firestore';\n\nexport async function cleanDatabase() {\n  console.log('üßπ DEPRECADO: Esta funci√≥n ya no funciona despu√©s de la migraci√≥n a MongoDB');\n  console.log('‚ÑπÔ∏è Para limpiar la base de datos, reinicia el servidor backend');\n  console.log('üìã El backend usa MongoDB en memoria que se resetea autom√°ticamente');\n  \n  // TODO: Implementar limpieza para MongoDB backend si es necesario\n  return false;\n}\n\nexport async function createInitialStructures() {\n  console.log('üèóÔ∏è Creando estructuras iniciales...');\n  \n  try {\n    // No necesitamos crear documentos, solo las collections se crear√°n autom√°ticamente\n    // cuando agregemos el primer documento a cada una\n    \n    console.log('‚úÖ Estructuras iniciales listas');\n    console.log('üìù Las collections se crear√°n autom√°ticamente al agregar datos');\n    \n    return true;\n  } catch (error) {\n    console.error('‚ùå Error creando estructuras:', error);\n    throw error;\n  }\n}\n\n// Funci√≥n para crear datos de prueba\nexport async function createTestData() {\n  console.log('üß™ Creando datos de prueba...');\n  \n  // Esta funci√≥n la implementaremos despu√©s de la limpieza\n  return true;\n}\n\n// Funci√≥n principal que ejecuta todo el proceso\nexport async function resetDatabaseForP2P() {\n  try {\n    console.log('üöÄ Iniciando reset completo de base de datos para P2P...');\n    \n    // Paso 1: Limpiar todo\n    await cleanDatabase();\n    \n    // Paso 2: Crear estructuras\n    await createInitialStructures();\n    \n    // Paso 3: Crear datos de prueba (opcional)\n    // await createTestData();\n    \n    console.log('üéâ ¬°Reset completo exitoso!');\n    console.log('üìã La base de datos est√° lista para el sistema P2P');\n    \n    return true;\n    \n  } catch (error) {\n    console.error('‚ùå Error en el reset de base de datos:', error);\n    throw error;\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,eAAeA,aAAaA,CAAA,EAAG;EACpCC,OAAO,CAACC,GAAG,CAAC,6EAA6E,CAAC;EAC1FD,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;EAC7ED,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC;;EAElF;EACA,OAAO,KAAK;AACd;AAEA,OAAO,eAAeC,uBAAuBA,CAAA,EAAG;EAC9CF,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;EAEnD,IAAI;IACF;IACA;;IAEAD,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7CD,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;IAE7E,OAAO,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF;;AAEA;AACA,OAAO,eAAeC,cAAcA,CAAA,EAAG;EACrCJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;;EAE5C;EACA,OAAO,IAAI;AACb;;AAEA;AACA,OAAO,eAAeI,mBAAmBA,CAAA,EAAG;EAC1C,IAAI;IACFL,OAAO,CAACC,GAAG,CAAC,0DAA0D,CAAC;;IAEvE;IACA,MAAMF,aAAa,CAAC,CAAC;;IAErB;IACA,MAAMG,uBAAuB,CAAC,CAAC;;IAE/B;IACA;;IAEAF,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1CD,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;IAEjE,OAAO,IAAI;EAEb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}